//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

kibitz.RecommenderService_createNewIndividualServer_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_createNewIndividualServer_args.prototype = {};
kibitz.RecommenderService_createNewIndividualServer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewIndividualServer_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_result = function(args) {
};
kibitz.RecommenderService_createNewIndividualServer_result.prototype = {};
kibitz.RecommenderService_createNewIndividualServer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewIndividualServer_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_terminateSession_args.prototype = {};
kibitz.RecommenderService_terminateSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_terminateSession_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_result = function(args) {
};
kibitz.RecommenderService_terminateSession_result.prototype = {};
kibitz.RecommenderService_terminateSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_terminateSession_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_args = function(args) {
  this.key = null;
  this.userId = null;
  this.numRecs = null;
  this.isBoolean = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
    if (args.isBoolean !== undefined) {
      this.isBoolean = args.isBoolean;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_makeRecommendation_args.prototype = {};
kibitz.RecommenderService_makeRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isBoolean = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.displayColumns = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readString().value;
          this.displayColumns.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeRecommendation_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I64, 3);
    output.writeI64(this.numRecs);
    output.writeFieldEnd();
  }
  if (this.isBoolean !== null && this.isBoolean !== undefined) {
    output.writeFieldBegin('isBoolean', Thrift.Type.BOOL, 4);
    output.writeBool(this.isBoolean);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter35 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter35))
      {
        iter35 = this.displayColumns[iter35];
        output.writeString(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_makeRecommendation_result.prototype = {};
kibitz.RecommenderService_makeRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.success = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = new kibitz.Item();
          elem42.read(input);
          this.success.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeRecommendation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter43 in this.success)
    {
      if (this.success.hasOwnProperty(iter43))
      {
        iter43 = this.success[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_args = function(args) {
  this.key = null;
  this.userId = null;
  this.numRecs = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_makeItemBasedRecommendations_args.prototype = {};
kibitz.RecommenderService_makeItemBasedRecommendations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.displayColumns = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readString().value;
          this.displayColumns.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeItemBasedRecommendations_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I64, 3);
    output.writeI64(this.numRecs);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter51 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter51))
      {
        iter51 = this.displayColumns[iter51];
        output.writeString(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_makeItemBasedRecommendations_result.prototype = {};
kibitz.RecommenderService_makeItemBasedRecommendations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.success = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new kibitz.Item();
          elem58.read(input);
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeItemBasedRecommendations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter59 in this.success)
    {
      if (this.success.hasOwnProperty(iter59))
      {
        iter59 = this.success[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_args = function(args) {
  this.key = null;
  this.page = null;
  this.numPerPage = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
    if (args.numPerPage !== undefined) {
      this.numPerPage = args.numPerPage;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_getPageItems_args.prototype = {};
kibitz.RecommenderService_getPageItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.page = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numPerPage = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.displayColumns = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = input.readString().value;
          this.displayColumns.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getPageItems_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I64, 2);
    output.writeI64(this.page);
    output.writeFieldEnd();
  }
  if (this.numPerPage !== null && this.numPerPage !== undefined) {
    output.writeFieldBegin('numPerPage', Thrift.Type.I64, 3);
    output.writeI64(this.numPerPage);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter67 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter67))
      {
        iter67 = this.displayColumns[iter67];
        output.writeString(iter67);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getPageItems_result.prototype = {};
kibitz.RecommenderService_getPageItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.success = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new kibitz.Item();
          elem74.read(input);
          this.success.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getPageItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter75 in this.success)
    {
      if (this.success.hasOwnProperty(iter75))
      {
        iter75 = this.success[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_getItemCount_args.prototype = {};
kibitz.RecommenderService_getItemCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getItemCount_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getItemCount_result.prototype = {};
kibitz.RecommenderService_getItemCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getItemCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_args = function(args) {
  this.key = null;
  this.userId = null;
  this.itemId = null;
  this.rating = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
    if (args.rating !== undefined) {
      this.rating = args.rating;
    }
  }
};
kibitz.RecommenderService_recordRatings_args.prototype = {};
kibitz.RecommenderService_recordRatings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.itemId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.rating = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_recordRatings_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I64, 3);
    output.writeI64(this.itemId);
    output.writeFieldEnd();
  }
  if (this.rating !== null && this.rating !== undefined) {
    output.writeFieldBegin('rating', Thrift.Type.I64, 4);
    output.writeI64(this.rating);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_result = function(args) {
};
kibitz.RecommenderService_recordRatings_result.prototype = {};
kibitz.RecommenderService_recordRatings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_recordRatings_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_args = function(args) {
  this.key = null;
  this.userId = null;
  this.itemId = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
  }
};
kibitz.RecommenderService_deleteRatings_args.prototype = {};
kibitz.RecommenderService_deleteRatings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.itemId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRatings_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I64, 3);
    output.writeI64(this.itemId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_result = function(args) {
};
kibitz.RecommenderService_deleteRatings_result.prototype = {};
kibitz.RecommenderService_deleteRatings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRatings_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_args = function(args) {
  this.key = null;
  this.username = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_createNewUser_args.prototype = {};
kibitz.RecommenderService_createNewUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewUser_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 3);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_createNewUser_result.prototype = {};
kibitz.RecommenderService_createNewUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_args = function(args) {
  this.key = null;
  this.username = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_checkUsername_args.prototype = {};
kibitz.RecommenderService_checkUsername_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkUsername_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 3);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkUsername_result.prototype = {};
kibitz.RecommenderService_checkUsername_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkUsername_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_args = function(args) {
  this.key = null;
  this.username = null;
  this.password = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_checkLogin_args.prototype = {};
kibitz.RecommenderService_checkLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkLogin_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 4);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkLogin_result.prototype = {};
kibitz.RecommenderService_checkLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_args = function(args) {
  this.key = null;
  this.username = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
kibitz.RecommenderService_retrieveUserId_args.prototype = {};
kibitz.RecommenderService_retrieveUserId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_retrieveUserId_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_retrieveUserId_result.prototype = {};
kibitz.RecommenderService_retrieveUserId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_retrieveUserId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_args = function(args) {
  this.username = null;
  this.primaryKey = null;
  this.database = null;
  this.table = null;
  this.title = null;
  this.description = null;
  this.image = null;
  this.ratings_column = null;
  this.clientKey = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.primaryKey !== undefined) {
      this.primaryKey = args.primaryKey;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.image !== undefined) {
      this.image = args.image;
    }
    if (args.ratings_column !== undefined) {
      this.ratings_column = args.ratings_column;
    }
    if (args.clientKey !== undefined) {
      this.clientKey = args.clientKey;
    }
  }
};
kibitz.RecommenderService_createNewRecommender_args.prototype = {};
kibitz.RecommenderService_createNewRecommender_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.primaryKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.ratings_column = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.clientKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewRecommender_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.primaryKey !== null && this.primaryKey !== undefined) {
    output.writeFieldBegin('primaryKey', Thrift.Type.STRING, 2);
    output.writeString(this.primaryKey);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 3);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 5);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 6);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 7);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 8);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.ratings_column !== null && this.ratings_column !== undefined) {
    output.writeFieldBegin('ratings_column', Thrift.Type.STRING, 9);
    output.writeString(this.ratings_column);
    output.writeFieldEnd();
  }
  if (this.clientKey !== null && this.clientKey !== undefined) {
    output.writeFieldBegin('clientKey', Thrift.Type.STRING, 10);
    output.writeString(this.clientKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_createNewRecommender_result.prototype = {};
kibitz.RecommenderService_createNewRecommender_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewRecommender_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_args = function(args) {
  this.key = null;
  this.userId = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_getUserRatedItems_args.prototype = {};
kibitz.RecommenderService_getUserRatedItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.displayColumns = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = input.readString().value;
          this.displayColumns.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getUserRatedItems_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter83 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter83))
      {
        iter83 = this.displayColumns[iter83];
        output.writeString(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getUserRatedItems_result.prototype = {};
kibitz.RecommenderService_getUserRatedItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.success = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new kibitz.Item();
          elem90.read(input);
          this.success.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getUserRatedItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter91 in this.success)
    {
      if (this.success.hasOwnProperty(iter91))
      {
        iter91 = this.success[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_args = function(args) {
  this.key = null;
  this.table = null;
  this.username = null;
  this.database = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
  }
};
kibitz.RecommenderService_initiateModel_args.prototype = {};
kibitz.RecommenderService_initiateModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_initiateModel_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 2);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 4);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_result = function(args) {
};
kibitz.RecommenderService_initiateModel_result.prototype = {};
kibitz.RecommenderService_initiateModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_initiateModel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_args = function(args) {
  this.table = null;
  this.query = null;
  this.columnsToSearch = null;
  this.displayColumns = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.columnsToSearch !== undefined) {
      this.columnsToSearch = args.columnsToSearch;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_getSearchItems_args.prototype = {};
kibitz.RecommenderService_getSearchItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.columnsToSearch = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = input.readString().value;
          this.columnsToSearch.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size99 = 0;
        var _rtmp3103;
        this.displayColumns = [];
        var _etype102 = 0;
        _rtmp3103 = input.readListBegin();
        _etype102 = _rtmp3103.etype;
        _size99 = _rtmp3103.size;
        for (var _i104 = 0; _i104 < _size99; ++_i104)
        {
          var elem105 = null;
          elem105 = input.readString().value;
          this.displayColumns.push(elem105);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getSearchItems_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.columnsToSearch !== null && this.columnsToSearch !== undefined) {
    output.writeFieldBegin('columnsToSearch', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columnsToSearch.length);
    for (var iter106 in this.columnsToSearch)
    {
      if (this.columnsToSearch.hasOwnProperty(iter106))
      {
        iter106 = this.columnsToSearch[iter106];
        output.writeString(iter106);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter107 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter107))
      {
        iter107 = this.displayColumns[iter107];
        output.writeString(iter107);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getSearchItems_result.prototype = {};
kibitz.RecommenderService_getSearchItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.success = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = new kibitz.Item();
          elem114.read(input);
          this.success.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getSearchItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter115 in this.success)
    {
      if (this.success.hasOwnProperty(iter115))
      {
        iter115 = this.success[iter115];
        iter115.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args = function(args) {
  this.key = null;
  this.ratingColumnName = null;
  this.numRecs = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.ratingColumnName !== undefined) {
      this.ratingColumnName = args.ratingColumnName;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args.prototype = {};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ratingColumnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.displayColumns = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = input.readString().value;
          this.displayColumns.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.ratingColumnName !== null && this.ratingColumnName !== undefined) {
    output.writeFieldBegin('ratingColumnName', Thrift.Type.STRING, 2);
    output.writeString(this.ratingColumnName);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I64, 3);
    output.writeI64(this.numRecs);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter123 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter123))
      {
        iter123 = this.displayColumns[iter123];
        output.writeString(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result.prototype = {};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.success = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new kibitz.Item();
          elem130.read(input);
          this.success.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter131 in this.success)
    {
      if (this.success.hasOwnProperty(iter131))
      {
        iter131 = this.success[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_addKibitzUser_args = function(args) {
  this.email = null;
  this.password = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
kibitz.RecommenderService_addKibitzUser_args.prototype = {};
kibitz.RecommenderService_addKibitzUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_addKibitzUser_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_addKibitzUser_args');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_addKibitzUser_result = function(args) {
};
kibitz.RecommenderService_addKibitzUser_result.prototype = {};
kibitz.RecommenderService_addKibitzUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_addKibitzUser_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_addKibitzUser_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkCorrectDatahubLogin_args = function(args) {
  this.username = null;
  this.repository = null;
  this.table = null;
  this.primary_key = null;
  this.title = null;
  this.description = null;
  this.image = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.repository !== undefined) {
      this.repository = args.repository;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.primary_key !== undefined) {
      this.primary_key = args.primary_key;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.image !== undefined) {
      this.image = args.image;
    }
  }
};
kibitz.RecommenderService_checkCorrectDatahubLogin_args.prototype = {};
kibitz.RecommenderService_checkCorrectDatahubLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repository = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.primary_key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkCorrectDatahubLogin_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkCorrectDatahubLogin_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.STRING, 2);
    output.writeString(this.repository);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 3);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.primary_key !== null && this.primary_key !== undefined) {
    output.writeFieldBegin('primary_key', Thrift.Type.STRING, 4);
    output.writeString(this.primary_key);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 5);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 7);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkCorrectDatahubLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkCorrectDatahubLogin_result.prototype = {};
kibitz.RecommenderService_checkCorrectDatahubLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkCorrectDatahubLogin_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkCorrectDatahubLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkRatingsColumn_args = function(args) {
  this.username = null;
  this.table = null;
  this.repository = null;
  this.ratings_column = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.repository !== undefined) {
      this.repository = args.repository;
    }
    if (args.ratings_column !== undefined) {
      this.ratings_column = args.ratings_column;
    }
  }
};
kibitz.RecommenderService_checkRatingsColumn_args.prototype = {};
kibitz.RecommenderService_checkRatingsColumn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.repository = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ratings_column = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkRatingsColumn_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkRatingsColumn_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 2);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.repository !== null && this.repository !== undefined) {
    output.writeFieldBegin('repository', Thrift.Type.STRING, 3);
    output.writeString(this.repository);
    output.writeFieldEnd();
  }
  if (this.ratings_column !== null && this.ratings_column !== undefined) {
    output.writeFieldBegin('ratings_column', Thrift.Type.STRING, 4);
    output.writeString(this.ratings_column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkRatingsColumn_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkRatingsColumn_result.prototype = {};
kibitz.RecommenderService_checkRatingsColumn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkRatingsColumn_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkRatingsColumn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getRecommenders_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
kibitz.RecommenderService_getRecommenders_args.prototype = {};
kibitz.RecommenderService_getRecommenders_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getRecommenders_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getRecommenders_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getRecommenders_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getRecommenders_result.prototype = {};
kibitz.RecommenderService_getRecommenders_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new kibitz.Recommender();
          elem138.read(input);
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getRecommenders_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getRecommenders_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getProfilePicture_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
kibitz.RecommenderService_getProfilePicture_args.prototype = {};
kibitz.RecommenderService_getProfilePicture_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getProfilePicture_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getProfilePicture_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getProfilePicture_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getProfilePicture_result.prototype = {};
kibitz.RecommenderService_getProfilePicture_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getProfilePicture_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getProfilePicture_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_saveFBProfilePic_args = function(args) {
  this.username = null;
  this.fbUsername = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.fbUsername !== undefined) {
      this.fbUsername = args.fbUsername;
    }
  }
};
kibitz.RecommenderService_saveFBProfilePic_args.prototype = {};
kibitz.RecommenderService_saveFBProfilePic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fbUsername = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_saveFBProfilePic_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_saveFBProfilePic_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.fbUsername !== null && this.fbUsername !== undefined) {
    output.writeFieldBegin('fbUsername', Thrift.Type.STRING, 2);
    output.writeString(this.fbUsername);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_saveFBProfilePic_result = function(args) {
};
kibitz.RecommenderService_saveFBProfilePic_result.prototype = {};
kibitz.RecommenderService_saveFBProfilePic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_saveFBProfilePic_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_saveFBProfilePic_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRecommender_args = function(args) {
  this.clientKey = null;
  if (args) {
    if (args.clientKey !== undefined) {
      this.clientKey = args.clientKey;
    }
  }
};
kibitz.RecommenderService_deleteRecommender_args.prototype = {};
kibitz.RecommenderService_deleteRecommender_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRecommender_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRecommender_args');
  if (this.clientKey !== null && this.clientKey !== undefined) {
    output.writeFieldBegin('clientKey', Thrift.Type.STRING, 1);
    output.writeString(this.clientKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRecommender_result = function(args) {
};
kibitz.RecommenderService_deleteRecommender_result.prototype = {};
kibitz.RecommenderService_deleteRecommender_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRecommender_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRecommender_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_updateTemplate_args = function(args) {
  this.username = null;
  this.primaryKey = null;
  this.title = null;
  this.description = null;
  this.image = null;
  this.video = null;
  this.itemTypes = null;
  this.displayItems = null;
  this.maxRatingVal = null;
  this.numRecs = null;
  this.recommenderName = null;
  this.clientKey = null;
  this.homepage = null;
  this.creatorName = null;
  this.repoName = null;
  this.tableName = null;
  this.ratingsColumn = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.primaryKey !== undefined) {
      this.primaryKey = args.primaryKey;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.image !== undefined) {
      this.image = args.image;
    }
    if (args.video !== undefined) {
      this.video = args.video;
    }
    if (args.itemTypes !== undefined) {
      this.itemTypes = args.itemTypes;
    }
    if (args.displayItems !== undefined) {
      this.displayItems = args.displayItems;
    }
    if (args.maxRatingVal !== undefined) {
      this.maxRatingVal = args.maxRatingVal;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
    if (args.recommenderName !== undefined) {
      this.recommenderName = args.recommenderName;
    }
    if (args.clientKey !== undefined) {
      this.clientKey = args.clientKey;
    }
    if (args.homepage !== undefined) {
      this.homepage = args.homepage;
    }
    if (args.creatorName !== undefined) {
      this.creatorName = args.creatorName;
    }
    if (args.repoName !== undefined) {
      this.repoName = args.repoName;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.ratingsColumn !== undefined) {
      this.ratingsColumn = args.ratingsColumn;
    }
  }
};
kibitz.RecommenderService_updateTemplate_args.prototype = {};
kibitz.RecommenderService_updateTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.primaryKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.video = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size140 = 0;
        var _rtmp3144;
        this.itemTypes = {};
        var _ktype141 = 0;
        var _vtype142 = 0;
        _rtmp3144 = input.readMapBegin();
        _ktype141 = _rtmp3144.ktype;
        _vtype142 = _rtmp3144.vtype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          if (_i145 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key146 = null;
          var val147 = null;
          key146 = input.readString().value;
          val147 = input.readString().value;
          this.itemTypes[key146] = val147;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.displayItems = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = input.readString().value;
          this.displayItems.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.maxRatingVal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.numRecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.recommenderName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.clientKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.homepage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.creatorName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.repoName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.ratingsColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_updateTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_updateTemplate_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.primaryKey !== null && this.primaryKey !== undefined) {
    output.writeFieldBegin('primaryKey', Thrift.Type.STRING, 2);
    output.writeString(this.primaryKey);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 5);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.video !== null && this.video !== undefined) {
    output.writeFieldBegin('video', Thrift.Type.STRING, 6);
    output.writeString(this.video);
    output.writeFieldEnd();
  }
  if (this.itemTypes !== null && this.itemTypes !== undefined) {
    output.writeFieldBegin('itemTypes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.itemTypes));
    for (var kiter155 in this.itemTypes)
    {
      if (this.itemTypes.hasOwnProperty(kiter155))
      {
        var viter156 = this.itemTypes[kiter155];
        output.writeString(kiter155);
        output.writeString(viter156);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.displayItems !== null && this.displayItems !== undefined) {
    output.writeFieldBegin('displayItems', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.displayItems.length);
    for (var iter157 in this.displayItems)
    {
      if (this.displayItems.hasOwnProperty(iter157))
      {
        iter157 = this.displayItems[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.maxRatingVal !== null && this.maxRatingVal !== undefined) {
    output.writeFieldBegin('maxRatingVal', Thrift.Type.I64, 9);
    output.writeI64(this.maxRatingVal);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I64, 10);
    output.writeI64(this.numRecs);
    output.writeFieldEnd();
  }
  if (this.recommenderName !== null && this.recommenderName !== undefined) {
    output.writeFieldBegin('recommenderName', Thrift.Type.STRING, 11);
    output.writeString(this.recommenderName);
    output.writeFieldEnd();
  }
  if (this.clientKey !== null && this.clientKey !== undefined) {
    output.writeFieldBegin('clientKey', Thrift.Type.STRING, 12);
    output.writeString(this.clientKey);
    output.writeFieldEnd();
  }
  if (this.homepage !== null && this.homepage !== undefined) {
    output.writeFieldBegin('homepage', Thrift.Type.STRING, 13);
    output.writeString(this.homepage);
    output.writeFieldEnd();
  }
  if (this.creatorName !== null && this.creatorName !== undefined) {
    output.writeFieldBegin('creatorName', Thrift.Type.STRING, 14);
    output.writeString(this.creatorName);
    output.writeFieldEnd();
  }
  if (this.repoName !== null && this.repoName !== undefined) {
    output.writeFieldBegin('repoName', Thrift.Type.STRING, 15);
    output.writeString(this.repoName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 16);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.ratingsColumn !== null && this.ratingsColumn !== undefined) {
    output.writeFieldBegin('ratingsColumn', Thrift.Type.STRING, 17);
    output.writeString(this.ratingsColumn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_updateTemplate_result = function(args) {
};
kibitz.RecommenderService_updateTemplate_result.prototype = {};
kibitz.RecommenderService_updateTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_updateTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_updateTemplate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_configurePrefilledUserRatings_args = function(args) {
  this.username = null;
  this.repoName = null;
  this.primaryKey = null;
  this.itemTable = null;
  this.tableName = null;
  this.userIdCol = null;
  this.itemIdCol = null;
  this.userRatingCol = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.repoName !== undefined) {
      this.repoName = args.repoName;
    }
    if (args.primaryKey !== undefined) {
      this.primaryKey = args.primaryKey;
    }
    if (args.itemTable !== undefined) {
      this.itemTable = args.itemTable;
    }
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.userIdCol !== undefined) {
      this.userIdCol = args.userIdCol;
    }
    if (args.itemIdCol !== undefined) {
      this.itemIdCol = args.itemIdCol;
    }
    if (args.userRatingCol !== undefined) {
      this.userRatingCol = args.userRatingCol;
    }
  }
};
kibitz.RecommenderService_configurePrefilledUserRatings_args.prototype = {};
kibitz.RecommenderService_configurePrefilledUserRatings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repoName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.primaryKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.itemTable = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userIdCol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.itemIdCol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.userRatingCol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_configurePrefilledUserRatings_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_configurePrefilledUserRatings_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.repoName !== null && this.repoName !== undefined) {
    output.writeFieldBegin('repoName', Thrift.Type.STRING, 2);
    output.writeString(this.repoName);
    output.writeFieldEnd();
  }
  if (this.primaryKey !== null && this.primaryKey !== undefined) {
    output.writeFieldBegin('primaryKey', Thrift.Type.STRING, 3);
    output.writeString(this.primaryKey);
    output.writeFieldEnd();
  }
  if (this.itemTable !== null && this.itemTable !== undefined) {
    output.writeFieldBegin('itemTable', Thrift.Type.STRING, 4);
    output.writeString(this.itemTable);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 5);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.userIdCol !== null && this.userIdCol !== undefined) {
    output.writeFieldBegin('userIdCol', Thrift.Type.STRING, 6);
    output.writeString(this.userIdCol);
    output.writeFieldEnd();
  }
  if (this.itemIdCol !== null && this.itemIdCol !== undefined) {
    output.writeFieldBegin('itemIdCol', Thrift.Type.STRING, 7);
    output.writeString(this.itemIdCol);
    output.writeFieldEnd();
  }
  if (this.userRatingCol !== null && this.userRatingCol !== undefined) {
    output.writeFieldBegin('userRatingCol', Thrift.Type.STRING, 8);
    output.writeString(this.userRatingCol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_configurePrefilledUserRatings_result = function(args) {
};
kibitz.RecommenderService_configurePrefilledUserRatings_result.prototype = {};
kibitz.RecommenderService_configurePrefilledUserRatings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_configurePrefilledUserRatings_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_configurePrefilledUserRatings_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getTables_args = function(args) {
  this.username = null;
  this.repo = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.repo !== undefined) {
      this.repo = args.repo;
    }
  }
};
kibitz.RecommenderService_getTables_args.prototype = {};
kibitz.RecommenderService_getTables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getTables_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getTables_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRING, 2);
    output.writeString(this.repo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getTables_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getTables_result.prototype = {};
kibitz.RecommenderService_getTables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.success = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = input.readString().value;
          this.success.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getTables_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getTables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter165 in this.success)
    {
      if (this.success.hasOwnProperty(iter165))
      {
        iter165 = this.success[iter165];
        output.writeString(iter165);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getColumns_args = function(args) {
  this.username = null;
  this.repo = null;
  this.table = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.repo !== undefined) {
      this.repo = args.repo;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
kibitz.RecommenderService_getColumns_args.prototype = {};
kibitz.RecommenderService_getColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getColumns_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getColumns_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRING, 2);
    output.writeString(this.repo);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 3);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getColumns_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getColumns_result.prototype = {};
kibitz.RecommenderService_getColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size166 = 0;
        var _rtmp3170;
        this.success = [];
        var _etype169 = 0;
        _rtmp3170 = input.readListBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = input.readString().value;
          this.success.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getColumns_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter173 in this.success)
    {
      if (this.success.hasOwnProperty(iter173))
      {
        iter173 = this.success[iter173];
        output.writeString(iter173);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getFirstRepo_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
kibitz.RecommenderService_getFirstRepo_args.prototype = {};
kibitz.RecommenderService_getFirstRepo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getFirstRepo_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getFirstRepo_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getFirstRepo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getFirstRepo_result.prototype = {};
kibitz.RecommenderService_getFirstRepo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getFirstRepo_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getFirstRepo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getNumRepos_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
kibitz.RecommenderService_getNumRepos_args.prototype = {};
kibitz.RecommenderService_getNumRepos_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getNumRepos_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getNumRepos_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getNumRepos_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getNumRepos_result.prototype = {};
kibitz.RecommenderService_getNumRepos_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getNumRepos_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getNumRepos_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getAllRepos_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
kibitz.RecommenderService_getAllRepos_args.prototype = {};
kibitz.RecommenderService_getAllRepos_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getAllRepos_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getAllRepos_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getAllRepos_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getAllRepos_result.prototype = {};
kibitz.RecommenderService_getAllRepos_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size174 = 0;
        var _rtmp3178;
        this.success = [];
        var _etype177 = 0;
        _rtmp3178 = input.readListBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = input.readString().value;
          this.success.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getAllRepos_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getAllRepos_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter181 in this.success)
    {
      if (this.success.hasOwnProperty(iter181))
      {
        iter181 = this.success[iter181];
        output.writeString(iter181);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_saveCSSData_args = function(args) {
  this.path = null;
  this.data = null;
  if (args) {
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
kibitz.RecommenderService_saveCSSData_args.prototype = {};
kibitz.RecommenderService_saveCSSData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_saveCSSData_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_saveCSSData_args');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_saveCSSData_result = function(args) {
};
kibitz.RecommenderService_saveCSSData_result.prototype = {};
kibitz.RecommenderService_saveCSSData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_saveCSSData_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_saveCSSData_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
kibitz.RecommenderServiceClient.prototype = {};
kibitz.RecommenderServiceClient.prototype.createNewIndividualServer = function(key, callback) {
  this.send_createNewIndividualServer(key, callback); 
  if (!callback) {
  this.recv_createNewIndividualServer();
  }
};

kibitz.RecommenderServiceClient.prototype.send_createNewIndividualServer = function(key, callback) {
  this.output.writeMessageBegin('createNewIndividualServer', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewIndividualServer_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createNewIndividualServer();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_createNewIndividualServer = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewIndividualServer_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.terminateSession = function(key, callback) {
  this.send_terminateSession(key, callback); 
  if (!callback) {
  this.recv_terminateSession();
  }
};

kibitz.RecommenderServiceClient.prototype.send_terminateSession = function(key, callback) {
  this.output.writeMessageBegin('terminateSession', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_terminateSession_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_terminateSession();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_terminateSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_terminateSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.makeRecommendation = function(key, userId, numRecs, isBoolean, displayColumns, callback) {
  this.send_makeRecommendation(key, userId, numRecs, isBoolean, displayColumns, callback); 
  if (!callback) {
    return this.recv_makeRecommendation();
  }
};

kibitz.RecommenderServiceClient.prototype.send_makeRecommendation = function(key, userId, numRecs, isBoolean, displayColumns, callback) {
  this.output.writeMessageBegin('makeRecommendation', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_makeRecommendation_args();
  args.key = key;
  args.userId = userId;
  args.numRecs = numRecs;
  args.isBoolean = isBoolean;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_makeRecommendation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_makeRecommendation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_makeRecommendation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makeRecommendation failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.makeItemBasedRecommendations = function(key, userId, numRecs, displayColumns, callback) {
  this.send_makeItemBasedRecommendations(key, userId, numRecs, displayColumns, callback); 
  if (!callback) {
    return this.recv_makeItemBasedRecommendations();
  }
};

kibitz.RecommenderServiceClient.prototype.send_makeItemBasedRecommendations = function(key, userId, numRecs, displayColumns, callback) {
  this.output.writeMessageBegin('makeItemBasedRecommendations', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_makeItemBasedRecommendations_args();
  args.key = key;
  args.userId = userId;
  args.numRecs = numRecs;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_makeItemBasedRecommendations();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_makeItemBasedRecommendations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_makeItemBasedRecommendations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makeItemBasedRecommendations failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getPageItems = function(key, page, numPerPage, displayColumns, callback) {
  this.send_getPageItems(key, page, numPerPage, displayColumns, callback); 
  if (!callback) {
    return this.recv_getPageItems();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getPageItems = function(key, page, numPerPage, displayColumns, callback) {
  this.output.writeMessageBegin('getPageItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getPageItems_args();
  args.key = key;
  args.page = page;
  args.numPerPage = numPerPage;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getPageItems();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getPageItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getPageItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPageItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getItemCount = function(key, callback) {
  this.send_getItemCount(key, callback); 
  if (!callback) {
    return this.recv_getItemCount();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getItemCount = function(key, callback) {
  this.output.writeMessageBegin('getItemCount', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getItemCount_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getItemCount();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getItemCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getItemCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getItemCount failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.recordRatings = function(key, userId, itemId, rating, callback) {
  this.send_recordRatings(key, userId, itemId, rating, callback); 
  if (!callback) {
  this.recv_recordRatings();
  }
};

kibitz.RecommenderServiceClient.prototype.send_recordRatings = function(key, userId, itemId, rating, callback) {
  this.output.writeMessageBegin('recordRatings', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_recordRatings_args();
  args.key = key;
  args.userId = userId;
  args.itemId = itemId;
  args.rating = rating;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_recordRatings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_recordRatings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_recordRatings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.deleteRatings = function(key, userId, itemId, callback) {
  this.send_deleteRatings(key, userId, itemId, callback); 
  if (!callback) {
  this.recv_deleteRatings();
  }
};

kibitz.RecommenderServiceClient.prototype.send_deleteRatings = function(key, userId, itemId, callback) {
  this.output.writeMessageBegin('deleteRatings', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_deleteRatings_args();
  args.key = key;
  args.userId = userId;
  args.itemId = itemId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deleteRatings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_deleteRatings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_deleteRatings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.createNewUser = function(key, username, iskibitzuser, callback) {
  this.send_createNewUser(key, username, iskibitzuser, callback); 
  if (!callback) {
    return this.recv_createNewUser();
  }
};

kibitz.RecommenderServiceClient.prototype.send_createNewUser = function(key, username, iskibitzuser, callback) {
  this.output.writeMessageBegin('createNewUser', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewUser_args();
  args.key = key;
  args.username = username;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createNewUser();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_createNewUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createNewUser failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.checkUsername = function(key, username, iskibitzuser, callback) {
  this.send_checkUsername(key, username, iskibitzuser, callback); 
  if (!callback) {
    return this.recv_checkUsername();
  }
};

kibitz.RecommenderServiceClient.prototype.send_checkUsername = function(key, username, iskibitzuser, callback) {
  this.output.writeMessageBegin('checkUsername', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkUsername_args();
  args.key = key;
  args.username = username;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_checkUsername();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_checkUsername = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkUsername_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkUsername failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.checkLogin = function(key, username, password, iskibitzuser, callback) {
  this.send_checkLogin(key, username, password, iskibitzuser, callback); 
  if (!callback) {
    return this.recv_checkLogin();
  }
};

kibitz.RecommenderServiceClient.prototype.send_checkLogin = function(key, username, password, iskibitzuser, callback) {
  this.output.writeMessageBegin('checkLogin', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkLogin_args();
  args.key = key;
  args.username = username;
  args.password = password;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_checkLogin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_checkLogin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkLogin failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.retrieveUserId = function(key, username, callback) {
  this.send_retrieveUserId(key, username, callback); 
  if (!callback) {
    return this.recv_retrieveUserId();
  }
};

kibitz.RecommenderServiceClient.prototype.send_retrieveUserId = function(key, username, callback) {
  this.output.writeMessageBegin('retrieveUserId', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_retrieveUserId_args();
  args.key = key;
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_retrieveUserId();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_retrieveUserId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_retrieveUserId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveUserId failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.createNewRecommender = function(username, primaryKey, database, table, title, description, image, ratings_column, clientKey, callback) {
  this.send_createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey, callback); 
  if (!callback) {
    return this.recv_createNewRecommender();
  }
};

kibitz.RecommenderServiceClient.prototype.send_createNewRecommender = function(username, primaryKey, database, table, title, description, image, ratings_column, clientKey, callback) {
  this.output.writeMessageBegin('createNewRecommender', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewRecommender_args();
  args.username = username;
  args.primaryKey = primaryKey;
  args.database = database;
  args.table = table;
  args.title = title;
  args.description = description;
  args.image = image;
  args.ratings_column = ratings_column;
  args.clientKey = clientKey;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_createNewRecommender();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_createNewRecommender = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewRecommender_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createNewRecommender failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getUserRatedItems = function(key, userId, displayColumns, callback) {
  this.send_getUserRatedItems(key, userId, displayColumns, callback); 
  if (!callback) {
    return this.recv_getUserRatedItems();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getUserRatedItems = function(key, userId, displayColumns, callback) {
  this.output.writeMessageBegin('getUserRatedItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getUserRatedItems_args();
  args.key = key;
  args.userId = userId;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getUserRatedItems();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getUserRatedItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getUserRatedItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserRatedItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.initiateModel = function(key, table, username, database, callback) {
  this.send_initiateModel(key, table, username, database, callback); 
  if (!callback) {
  this.recv_initiateModel();
  }
};

kibitz.RecommenderServiceClient.prototype.send_initiateModel = function(key, table, username, database, callback) {
  this.output.writeMessageBegin('initiateModel', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_initiateModel_args();
  args.key = key;
  args.table = table;
  args.username = username;
  args.database = database;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_initiateModel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_initiateModel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_initiateModel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.getSearchItems = function(table, query, columnsToSearch, displayColumns, callback) {
  this.send_getSearchItems(table, query, columnsToSearch, displayColumns, callback); 
  if (!callback) {
    return this.recv_getSearchItems();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getSearchItems = function(table, query, columnsToSearch, displayColumns, callback) {
  this.output.writeMessageBegin('getSearchItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getSearchItems_args();
  args.table = table;
  args.query = query;
  args.columnsToSearch = columnsToSearch;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getSearchItems();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getSearchItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getSearchItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.makeOverallRatingBasedOrRandomRecommendation = function(key, ratingColumnName, numRecs, displayColumns, callback) {
  this.send_makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns, callback); 
  if (!callback) {
    return this.recv_makeOverallRatingBasedOrRandomRecommendation();
  }
};

kibitz.RecommenderServiceClient.prototype.send_makeOverallRatingBasedOrRandomRecommendation = function(key, ratingColumnName, numRecs, displayColumns, callback) {
  this.output.writeMessageBegin('makeOverallRatingBasedOrRandomRecommendation', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args();
  args.key = key;
  args.ratingColumnName = ratingColumnName;
  args.numRecs = numRecs;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_makeOverallRatingBasedOrRandomRecommendation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_makeOverallRatingBasedOrRandomRecommendation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makeOverallRatingBasedOrRandomRecommendation failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.addKibitzUser = function(email, password, callback) {
  this.send_addKibitzUser(email, password, callback); 
  if (!callback) {
  this.recv_addKibitzUser();
  }
};

kibitz.RecommenderServiceClient.prototype.send_addKibitzUser = function(email, password, callback) {
  this.output.writeMessageBegin('addKibitzUser', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_addKibitzUser_args();
  args.email = email;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addKibitzUser();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_addKibitzUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_addKibitzUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.checkCorrectDatahubLogin = function(username, repository, table, primary_key, title, description, image, callback) {
  this.send_checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image, callback); 
  if (!callback) {
    return this.recv_checkCorrectDatahubLogin();
  }
};

kibitz.RecommenderServiceClient.prototype.send_checkCorrectDatahubLogin = function(username, repository, table, primary_key, title, description, image, callback) {
  this.output.writeMessageBegin('checkCorrectDatahubLogin', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkCorrectDatahubLogin_args();
  args.username = username;
  args.repository = repository;
  args.table = table;
  args.primary_key = primary_key;
  args.title = title;
  args.description = description;
  args.image = image;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_checkCorrectDatahubLogin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_checkCorrectDatahubLogin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkCorrectDatahubLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkCorrectDatahubLogin failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.checkRatingsColumn = function(username, table, repository, ratings_column, callback) {
  this.send_checkRatingsColumn(username, table, repository, ratings_column, callback); 
  if (!callback) {
    return this.recv_checkRatingsColumn();
  }
};

kibitz.RecommenderServiceClient.prototype.send_checkRatingsColumn = function(username, table, repository, ratings_column, callback) {
  this.output.writeMessageBegin('checkRatingsColumn', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkRatingsColumn_args();
  args.username = username;
  args.table = table;
  args.repository = repository;
  args.ratings_column = ratings_column;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_checkRatingsColumn();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_checkRatingsColumn = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkRatingsColumn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkRatingsColumn failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getRecommenders = function(username, callback) {
  this.send_getRecommenders(username, callback); 
  if (!callback) {
    return this.recv_getRecommenders();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getRecommenders = function(username, callback) {
  this.output.writeMessageBegin('getRecommenders', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getRecommenders_args();
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getRecommenders();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getRecommenders = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getRecommenders_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRecommenders failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getProfilePicture = function(username, callback) {
  this.send_getProfilePicture(username, callback); 
  if (!callback) {
    return this.recv_getProfilePicture();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getProfilePicture = function(username, callback) {
  this.output.writeMessageBegin('getProfilePicture', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getProfilePicture_args();
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getProfilePicture();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getProfilePicture = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getProfilePicture_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getProfilePicture failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.saveFBProfilePic = function(username, fbUsername, callback) {
  this.send_saveFBProfilePic(username, fbUsername, callback); 
  if (!callback) {
  this.recv_saveFBProfilePic();
  }
};

kibitz.RecommenderServiceClient.prototype.send_saveFBProfilePic = function(username, fbUsername, callback) {
  this.output.writeMessageBegin('saveFBProfilePic', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_saveFBProfilePic_args();
  args.username = username;
  args.fbUsername = fbUsername;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_saveFBProfilePic();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_saveFBProfilePic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_saveFBProfilePic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.deleteRecommender = function(clientKey, callback) {
  this.send_deleteRecommender(clientKey, callback); 
  if (!callback) {
  this.recv_deleteRecommender();
  }
};

kibitz.RecommenderServiceClient.prototype.send_deleteRecommender = function(clientKey, callback) {
  this.output.writeMessageBegin('deleteRecommender', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_deleteRecommender_args();
  args.clientKey = clientKey;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deleteRecommender();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_deleteRecommender = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_deleteRecommender_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.updateTemplate = function(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn, callback) {
  this.send_updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn, callback); 
  if (!callback) {
  this.recv_updateTemplate();
  }
};

kibitz.RecommenderServiceClient.prototype.send_updateTemplate = function(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn, callback) {
  this.output.writeMessageBegin('updateTemplate', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_updateTemplate_args();
  args.username = username;
  args.primaryKey = primaryKey;
  args.title = title;
  args.description = description;
  args.image = image;
  args.video = video;
  args.itemTypes = itemTypes;
  args.displayItems = displayItems;
  args.maxRatingVal = maxRatingVal;
  args.numRecs = numRecs;
  args.recommenderName = recommenderName;
  args.clientKey = clientKey;
  args.homepage = homepage;
  args.creatorName = creatorName;
  args.repoName = repoName;
  args.tableName = tableName;
  args.ratingsColumn = ratingsColumn;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateTemplate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_updateTemplate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_updateTemplate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.configurePrefilledUserRatings = function(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol, callback) {
  this.send_configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol, callback); 
  if (!callback) {
  this.recv_configurePrefilledUserRatings();
  }
};

kibitz.RecommenderServiceClient.prototype.send_configurePrefilledUserRatings = function(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol, callback) {
  this.output.writeMessageBegin('configurePrefilledUserRatings', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_configurePrefilledUserRatings_args();
  args.username = username;
  args.repoName = repoName;
  args.primaryKey = primaryKey;
  args.itemTable = itemTable;
  args.tableName = tableName;
  args.userIdCol = userIdCol;
  args.itemIdCol = itemIdCol;
  args.userRatingCol = userRatingCol;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_configurePrefilledUserRatings();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_configurePrefilledUserRatings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_configurePrefilledUserRatings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.getTables = function(username, repo, callback) {
  this.send_getTables(username, repo, callback); 
  if (!callback) {
    return this.recv_getTables();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getTables = function(username, repo, callback) {
  this.output.writeMessageBegin('getTables', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getTables_args();
  args.username = username;
  args.repo = repo;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getTables();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getTables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getTables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTables failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getColumns = function(username, repo, table, callback) {
  this.send_getColumns(username, repo, table, callback); 
  if (!callback) {
    return this.recv_getColumns();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getColumns = function(username, repo, table, callback) {
  this.output.writeMessageBegin('getColumns', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getColumns_args();
  args.username = username;
  args.repo = repo;
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getColumns();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getColumns = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getColumns_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getColumns failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getFirstRepo = function(username, callback) {
  this.send_getFirstRepo(username, callback); 
  if (!callback) {
    return this.recv_getFirstRepo();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getFirstRepo = function(username, callback) {
  this.output.writeMessageBegin('getFirstRepo', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getFirstRepo_args();
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getFirstRepo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getFirstRepo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getFirstRepo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFirstRepo failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getNumRepos = function(username, callback) {
  this.send_getNumRepos(username, callback); 
  if (!callback) {
    return this.recv_getNumRepos();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getNumRepos = function(username, callback) {
  this.output.writeMessageBegin('getNumRepos', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getNumRepos_args();
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getNumRepos();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getNumRepos = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getNumRepos_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getNumRepos failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getAllRepos = function(username, callback) {
  this.send_getAllRepos(username, callback); 
  if (!callback) {
    return this.recv_getAllRepos();
  }
};

kibitz.RecommenderServiceClient.prototype.send_getAllRepos = function(username, callback) {
  this.output.writeMessageBegin('getAllRepos', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getAllRepos_args();
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getAllRepos();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_getAllRepos = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getAllRepos_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllRepos failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.saveCSSData = function(path, data, callback) {
  this.send_saveCSSData(path, data, callback); 
  if (!callback) {
  this.recv_saveCSSData();
  }
};

kibitz.RecommenderServiceClient.prototype.send_saveCSSData = function(path, data, callback) {
  this.output.writeMessageBegin('saveCSSData', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_saveCSSData_args();
  args.path = path;
  args.data = data;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_saveCSSData();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

kibitz.RecommenderServiceClient.prototype.recv_saveCSSData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_saveCSSData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
