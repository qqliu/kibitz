//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

kibitz.RecommenderService_createNewIndividualServer_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_createNewIndividualServer_args.prototype = {};
kibitz.RecommenderService_createNewIndividualServer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewIndividualServer_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_result = function(args) {
};
kibitz.RecommenderService_createNewIndividualServer_result.prototype = {};
kibitz.RecommenderService_createNewIndividualServer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewIndividualServer_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_terminateSession_args.prototype = {};
kibitz.RecommenderService_terminateSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_terminateSession_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_result = function(args) {
};
kibitz.RecommenderService_terminateSession_result.prototype = {};
kibitz.RecommenderService_terminateSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_terminateSession_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_args = function(args) {
  this.key = null;
  this.userId = null;
  this.numRecs = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_makeRecommendation_args.prototype = {};
kibitz.RecommenderService_makeRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.displayColumns = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString().value;
          this.displayColumns.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeRecommendation_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I64, 3);
    output.writeI64(this.numRecs);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter17 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter17))
      {
        iter17 = this.displayColumns[iter17];
        output.writeString(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_makeRecommendation_result.prototype = {};
kibitz.RecommenderService_makeRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.success = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new kibitz.Item();
          elem24.read(input);
          this.success.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeRecommendation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter25 in this.success)
    {
      if (this.success.hasOwnProperty(iter25))
      {
        iter25 = this.success[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_args = function(args) {
  this.key = null;
  this.userId = null;
  this.numRecs = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_makeItemBasedRecommendations_args.prototype = {};
kibitz.RecommenderService_makeItemBasedRecommendations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.displayColumns = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString().value;
          this.displayColumns.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeItemBasedRecommendations_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I64, 3);
    output.writeI64(this.numRecs);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter33 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter33))
      {
        iter33 = this.displayColumns[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_makeItemBasedRecommendations_result.prototype = {};
kibitz.RecommenderService_makeItemBasedRecommendations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.success = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new kibitz.Item();
          elem40.read(input);
          this.success.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeItemBasedRecommendations_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeItemBasedRecommendations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter41 in this.success)
    {
      if (this.success.hasOwnProperty(iter41))
      {
        iter41 = this.success[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_args = function(args) {
  this.key = null;
  this.page = null;
  this.numPerPage = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
    if (args.numPerPage !== undefined) {
      this.numPerPage = args.numPerPage;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_getPageItems_args.prototype = {};
kibitz.RecommenderService_getPageItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.page = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numPerPage = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.displayColumns = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString().value;
          this.displayColumns.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getPageItems_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I64, 2);
    output.writeI64(this.page);
    output.writeFieldEnd();
  }
  if (this.numPerPage !== null && this.numPerPage !== undefined) {
    output.writeFieldBegin('numPerPage', Thrift.Type.I64, 3);
    output.writeI64(this.numPerPage);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter49 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter49))
      {
        iter49 = this.displayColumns[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getPageItems_result.prototype = {};
kibitz.RecommenderService_getPageItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.success = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = new kibitz.Item();
          elem56.read(input);
          this.success.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getPageItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getPageItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter57 in this.success)
    {
      if (this.success.hasOwnProperty(iter57))
      {
        iter57 = this.success[iter57];
        iter57.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_getItemCount_args.prototype = {};
kibitz.RecommenderService_getItemCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getItemCount_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getItemCount_result.prototype = {};
kibitz.RecommenderService_getItemCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getItemCount_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getItemCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_args = function(args) {
  this.key = null;
  this.userId = null;
  this.itemId = null;
  this.rating = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
    if (args.rating !== undefined) {
      this.rating = args.rating;
    }
  }
};
kibitz.RecommenderService_recordRatings_args.prototype = {};
kibitz.RecommenderService_recordRatings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.itemId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.rating = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_recordRatings_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I64, 3);
    output.writeI64(this.itemId);
    output.writeFieldEnd();
  }
  if (this.rating !== null && this.rating !== undefined) {
    output.writeFieldBegin('rating', Thrift.Type.I64, 4);
    output.writeI64(this.rating);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_result = function(args) {
};
kibitz.RecommenderService_recordRatings_result.prototype = {};
kibitz.RecommenderService_recordRatings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_recordRatings_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_args = function(args) {
  this.key = null;
  this.userId = null;
  this.itemId = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
  }
};
kibitz.RecommenderService_deleteRatings_args.prototype = {};
kibitz.RecommenderService_deleteRatings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.itemId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRatings_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I64, 3);
    output.writeI64(this.itemId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_result = function(args) {
};
kibitz.RecommenderService_deleteRatings_result.prototype = {};
kibitz.RecommenderService_deleteRatings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRatings_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_args = function(args) {
  this.key = null;
  this.username = null;
  this.email = null;
  this.password = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_createNewUser_args.prototype = {};
kibitz.RecommenderService_createNewUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewUser_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 5);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_createNewUser_result.prototype = {};
kibitz.RecommenderService_createNewUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_args = function(args) {
  this.key = null;
  this.username = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_checkUsername_args.prototype = {};
kibitz.RecommenderService_checkUsername_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkUsername_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 3);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkUsername_result.prototype = {};
kibitz.RecommenderService_checkUsername_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkUsername_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_args = function(args) {
  this.key = null;
  this.username = null;
  this.password = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_checkLogin_args.prototype = {};
kibitz.RecommenderService_checkLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkLogin_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 4);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkLogin_result.prototype = {};
kibitz.RecommenderService_checkLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_args = function(args) {
  this.key = null;
  this.username = null;
  this.password = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
kibitz.RecommenderService_retrieveUserId_args.prototype = {};
kibitz.RecommenderService_retrieveUserId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_retrieveUserId_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_retrieveUserId_result.prototype = {};
kibitz.RecommenderService_retrieveUserId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_retrieveUserId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_args = function(args) {
  this.username = null;
  this.primaryKey = null;
  this.password = null;
  this.database = null;
  this.table = null;
  this.firstColumnName = null;
  this.secondColumnName = null;
  this.thirdColumnName = null;
  this.firstColumnType = null;
  this.secondColumnType = null;
  this.thirdColumnType = null;
  this.displayColumns = null;
  this.clientKey = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.primaryKey !== undefined) {
      this.primaryKey = args.primaryKey;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.firstColumnName !== undefined) {
      this.firstColumnName = args.firstColumnName;
    }
    if (args.secondColumnName !== undefined) {
      this.secondColumnName = args.secondColumnName;
    }
    if (args.thirdColumnName !== undefined) {
      this.thirdColumnName = args.thirdColumnName;
    }
    if (args.firstColumnType !== undefined) {
      this.firstColumnType = args.firstColumnType;
    }
    if (args.secondColumnType !== undefined) {
      this.secondColumnType = args.secondColumnType;
    }
    if (args.thirdColumnType !== undefined) {
      this.thirdColumnType = args.thirdColumnType;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
    if (args.clientKey !== undefined) {
      this.clientKey = args.clientKey;
    }
  }
};
kibitz.RecommenderService_createNewRecommender_args.prototype = {};
kibitz.RecommenderService_createNewRecommender_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.primaryKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.firstColumnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.secondColumnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.thirdColumnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.firstColumnType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.secondColumnType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.thirdColumnType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.displayColumns = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readString().value;
          this.displayColumns.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.clientKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewRecommender_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.primaryKey !== null && this.primaryKey !== undefined) {
    output.writeFieldBegin('primaryKey', Thrift.Type.STRING, 2);
    output.writeString(this.primaryKey);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 4);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 5);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.firstColumnName !== null && this.firstColumnName !== undefined) {
    output.writeFieldBegin('firstColumnName', Thrift.Type.STRING, 6);
    output.writeString(this.firstColumnName);
    output.writeFieldEnd();
  }
  if (this.secondColumnName !== null && this.secondColumnName !== undefined) {
    output.writeFieldBegin('secondColumnName', Thrift.Type.STRING, 7);
    output.writeString(this.secondColumnName);
    output.writeFieldEnd();
  }
  if (this.thirdColumnName !== null && this.thirdColumnName !== undefined) {
    output.writeFieldBegin('thirdColumnName', Thrift.Type.STRING, 8);
    output.writeString(this.thirdColumnName);
    output.writeFieldEnd();
  }
  if (this.firstColumnType !== null && this.firstColumnType !== undefined) {
    output.writeFieldBegin('firstColumnType', Thrift.Type.STRING, 9);
    output.writeString(this.firstColumnType);
    output.writeFieldEnd();
  }
  if (this.secondColumnType !== null && this.secondColumnType !== undefined) {
    output.writeFieldBegin('secondColumnType', Thrift.Type.STRING, 10);
    output.writeString(this.secondColumnType);
    output.writeFieldEnd();
  }
  if (this.thirdColumnType !== null && this.thirdColumnType !== undefined) {
    output.writeFieldBegin('thirdColumnType', Thrift.Type.STRING, 11);
    output.writeString(this.thirdColumnType);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter65 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter65))
      {
        iter65 = this.displayColumns[iter65];
        output.writeString(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.clientKey !== null && this.clientKey !== undefined) {
    output.writeFieldBegin('clientKey', Thrift.Type.STRING, 13);
    output.writeString(this.clientKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_createNewRecommender_result.prototype = {};
kibitz.RecommenderService_createNewRecommender_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewRecommender_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_args = function(args) {
  this.key = null;
  this.userId = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_getUserRatedItems_args.prototype = {};
kibitz.RecommenderService_getUserRatedItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.displayColumns = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = input.readString().value;
          this.displayColumns.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getUserRatedItems_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter73 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter73))
      {
        iter73 = this.displayColumns[iter73];
        output.writeString(iter73);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getUserRatedItems_result.prototype = {};
kibitz.RecommenderService_getUserRatedItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.success = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new kibitz.Item();
          elem80.read(input);
          this.success.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getUserRatedItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter81 in this.success)
    {
      if (this.success.hasOwnProperty(iter81))
      {
        iter81 = this.success[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_args = function(args) {
  this.key = null;
  this.table = null;
  this.username = null;
  this.password = null;
  this.database = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
  }
};
kibitz.RecommenderService_initiateModel_args.prototype = {};
kibitz.RecommenderService_initiateModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_initiateModel_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 2);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 5);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_result = function(args) {
};
kibitz.RecommenderService_initiateModel_result.prototype = {};
kibitz.RecommenderService_initiateModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_initiateModel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_args = function(args) {
  this.table = null;
  this.query = null;
  this.displayColumns = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_getSearchItems_args.prototype = {};
kibitz.RecommenderService_getSearchItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.displayColumns = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = input.readString().value;
          this.displayColumns.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getSearchItems_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter89 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter89))
      {
        iter89 = this.displayColumns[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getSearchItems_result.prototype = {};
kibitz.RecommenderService_getSearchItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.success = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = new kibitz.Item();
          elem96.read(input);
          this.success.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getSearchItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getSearchItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter97 in this.success)
    {
      if (this.success.hasOwnProperty(iter97))
      {
        iter97 = this.success[iter97];
        iter97.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args = function(args) {
  this.key = null;
  this.ratingColumnName = null;
  this.numRecs = null;
  this.displayColumns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.ratingColumnName !== undefined) {
      this.ratingColumnName = args.ratingColumnName;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
    if (args.displayColumns !== undefined) {
      this.displayColumns = args.displayColumns;
    }
  }
};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args.prototype = {};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ratingColumnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRecs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.displayColumns = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readString().value;
          this.displayColumns.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.ratingColumnName !== null && this.ratingColumnName !== undefined) {
    output.writeFieldBegin('ratingColumnName', Thrift.Type.STRING, 2);
    output.writeString(this.ratingColumnName);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I64, 3);
    output.writeI64(this.numRecs);
    output.writeFieldEnd();
  }
  if (this.displayColumns !== null && this.displayColumns !== undefined) {
    output.writeFieldBegin('displayColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.displayColumns.length);
    for (var iter105 in this.displayColumns)
    {
      if (this.displayColumns.hasOwnProperty(iter105))
      {
        iter105 = this.displayColumns[iter105];
        output.writeString(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result.prototype = {};
kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.success = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = new kibitz.Item();
          elem112.read(input);
          this.success.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter113 in this.success)
    {
      if (this.success.hasOwnProperty(iter113))
      {
        iter113 = this.success[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
kibitz.RecommenderServiceClient.prototype = {};
kibitz.RecommenderServiceClient.prototype.createNewIndividualServer = function(key) {
  this.send_createNewIndividualServer(key);
  this.recv_createNewIndividualServer();
};

kibitz.RecommenderServiceClient.prototype.send_createNewIndividualServer = function(key) {
  this.output.writeMessageBegin('createNewIndividualServer', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewIndividualServer_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_createNewIndividualServer = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewIndividualServer_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.terminateSession = function(key) {
  this.send_terminateSession(key);
  this.recv_terminateSession();
};

kibitz.RecommenderServiceClient.prototype.send_terminateSession = function(key) {
  this.output.writeMessageBegin('terminateSession', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_terminateSession_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_terminateSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_terminateSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.makeRecommendation = function(key, userId, numRecs, displayColumns) {
  this.send_makeRecommendation(key, userId, numRecs, displayColumns);
  return this.recv_makeRecommendation();
};

kibitz.RecommenderServiceClient.prototype.send_makeRecommendation = function(key, userId, numRecs, displayColumns) {
  this.output.writeMessageBegin('makeRecommendation', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_makeRecommendation_args();
  args.key = key;
  args.userId = userId;
  args.numRecs = numRecs;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_makeRecommendation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_makeRecommendation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makeRecommendation failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.makeItemBasedRecommendations = function(key, userId, numRecs, displayColumns) {
  this.send_makeItemBasedRecommendations(key, userId, numRecs, displayColumns);
  return this.recv_makeItemBasedRecommendations();
};

kibitz.RecommenderServiceClient.prototype.send_makeItemBasedRecommendations = function(key, userId, numRecs, displayColumns) {
  this.output.writeMessageBegin('makeItemBasedRecommendations', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_makeItemBasedRecommendations_args();
  args.key = key;
  args.userId = userId;
  args.numRecs = numRecs;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_makeItemBasedRecommendations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_makeItemBasedRecommendations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makeItemBasedRecommendations failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getPageItems = function(key, page, numPerPage, displayColumns) {
  this.send_getPageItems(key, page, numPerPage, displayColumns);
  return this.recv_getPageItems();
};

kibitz.RecommenderServiceClient.prototype.send_getPageItems = function(key, page, numPerPage, displayColumns) {
  this.output.writeMessageBegin('getPageItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getPageItems_args();
  args.key = key;
  args.page = page;
  args.numPerPage = numPerPage;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_getPageItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getPageItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPageItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getItemCount = function(key) {
  this.send_getItemCount(key);
  return this.recv_getItemCount();
};

kibitz.RecommenderServiceClient.prototype.send_getItemCount = function(key) {
  this.output.writeMessageBegin('getItemCount', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getItemCount_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_getItemCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getItemCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getItemCount failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.recordRatings = function(key, userId, itemId, rating) {
  this.send_recordRatings(key, userId, itemId, rating);
  this.recv_recordRatings();
};

kibitz.RecommenderServiceClient.prototype.send_recordRatings = function(key, userId, itemId, rating) {
  this.output.writeMessageBegin('recordRatings', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_recordRatings_args();
  args.key = key;
  args.userId = userId;
  args.itemId = itemId;
  args.rating = rating;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_recordRatings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_recordRatings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.deleteRatings = function(key, userId, itemId) {
  this.send_deleteRatings(key, userId, itemId);
  this.recv_deleteRatings();
};

kibitz.RecommenderServiceClient.prototype.send_deleteRatings = function(key, userId, itemId) {
  this.output.writeMessageBegin('deleteRatings', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_deleteRatings_args();
  args.key = key;
  args.userId = userId;
  args.itemId = itemId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_deleteRatings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_deleteRatings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.createNewUser = function(key, username, email, password, iskibitzuser) {
  this.send_createNewUser(key, username, email, password, iskibitzuser);
  return this.recv_createNewUser();
};

kibitz.RecommenderServiceClient.prototype.send_createNewUser = function(key, username, email, password, iskibitzuser) {
  this.output.writeMessageBegin('createNewUser', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewUser_args();
  args.key = key;
  args.username = username;
  args.email = email;
  args.password = password;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_createNewUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createNewUser failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.checkUsername = function(key, username, iskibitzuser) {
  this.send_checkUsername(key, username, iskibitzuser);
  return this.recv_checkUsername();
};

kibitz.RecommenderServiceClient.prototype.send_checkUsername = function(key, username, iskibitzuser) {
  this.output.writeMessageBegin('checkUsername', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkUsername_args();
  args.key = key;
  args.username = username;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_checkUsername = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkUsername_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkUsername failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.checkLogin = function(key, username, password, iskibitzuser) {
  this.send_checkLogin(key, username, password, iskibitzuser);
  return this.recv_checkLogin();
};

kibitz.RecommenderServiceClient.prototype.send_checkLogin = function(key, username, password, iskibitzuser) {
  this.output.writeMessageBegin('checkLogin', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkLogin_args();
  args.key = key;
  args.username = username;
  args.password = password;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_checkLogin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkLogin failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.retrieveUserId = function(key, username, password) {
  this.send_retrieveUserId(key, username, password);
  return this.recv_retrieveUserId();
};

kibitz.RecommenderServiceClient.prototype.send_retrieveUserId = function(key, username, password) {
  this.output.writeMessageBegin('retrieveUserId', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_retrieveUserId_args();
  args.key = key;
  args.username = username;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_retrieveUserId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_retrieveUserId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveUserId failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.createNewRecommender = function(username, primaryKey, password, database, table, firstColumnName, secondColumnName, thirdColumnName, firstColumnType, secondColumnType, thirdColumnType, displayColumns, clientKey) {
  this.send_createNewRecommender(username, primaryKey, password, database, table, firstColumnName, secondColumnName, thirdColumnName, firstColumnType, secondColumnType, thirdColumnType, displayColumns, clientKey);
  return this.recv_createNewRecommender();
};

kibitz.RecommenderServiceClient.prototype.send_createNewRecommender = function(username, primaryKey, password, database, table, firstColumnName, secondColumnName, thirdColumnName, firstColumnType, secondColumnType, thirdColumnType, displayColumns, clientKey) {
  this.output.writeMessageBegin('createNewRecommender', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewRecommender_args();
  args.username = username;
  args.primaryKey = primaryKey;
  args.password = password;
  args.database = database;
  args.table = table;
  args.firstColumnName = firstColumnName;
  args.secondColumnName = secondColumnName;
  args.thirdColumnName = thirdColumnName;
  args.firstColumnType = firstColumnType;
  args.secondColumnType = secondColumnType;
  args.thirdColumnType = thirdColumnType;
  args.displayColumns = displayColumns;
  args.clientKey = clientKey;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_createNewRecommender = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewRecommender_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createNewRecommender failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getUserRatedItems = function(key, userId, displayColumns) {
  this.send_getUserRatedItems(key, userId, displayColumns);
  return this.recv_getUserRatedItems();
};

kibitz.RecommenderServiceClient.prototype.send_getUserRatedItems = function(key, userId, displayColumns) {
  this.output.writeMessageBegin('getUserRatedItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getUserRatedItems_args();
  args.key = key;
  args.userId = userId;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_getUserRatedItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getUserRatedItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserRatedItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.initiateModel = function(key, table, username, password, database) {
  this.send_initiateModel(key, table, username, password, database);
  this.recv_initiateModel();
};

kibitz.RecommenderServiceClient.prototype.send_initiateModel = function(key, table, username, password, database) {
  this.output.writeMessageBegin('initiateModel', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_initiateModel_args();
  args.key = key;
  args.table = table;
  args.username = username;
  args.password = password;
  args.database = database;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_initiateModel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_initiateModel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.getSearchItems = function(table, query, displayColumns) {
  this.send_getSearchItems(table, query, displayColumns);
  return this.recv_getSearchItems();
};

kibitz.RecommenderServiceClient.prototype.send_getSearchItems = function(table, query, displayColumns) {
  this.output.writeMessageBegin('getSearchItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getSearchItems_args();
  args.table = table;
  args.query = query;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_getSearchItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getSearchItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.makeOverallRatingBasedOrRandomRecommendation = function(key, ratingColumnName, numRecs, displayColumns) {
  this.send_makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns);
  return this.recv_makeOverallRatingBasedOrRandomRecommendation();
};

kibitz.RecommenderServiceClient.prototype.send_makeOverallRatingBasedOrRandomRecommendation = function(key, ratingColumnName, numRecs, displayColumns) {
  this.output.writeMessageBegin('makeOverallRatingBasedOrRandomRecommendation', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args();
  args.key = key;
  args.ratingColumnName = ratingColumnName;
  args.numRecs = numRecs;
  args.displayColumns = displayColumns;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_makeOverallRatingBasedOrRandomRecommendation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makeOverallRatingBasedOrRandomRecommendation failed: unknown result';
};
