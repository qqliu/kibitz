/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kibitz;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-13")
public class RecommenderService {

  public interface Iface {

    public void createNewIndividualServer(String key) throws org.apache.thrift.TException;

    public void terminateSession(String key) throws org.apache.thrift.TException;

    public List<Item> makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, List<String> displayColumns) throws org.apache.thrift.TException;

    public List<Item> makeItemBasedRecommendations(String key, long userId, long numRecs, List<String> displayColumns) throws org.apache.thrift.TException;

    public List<Item> getPageItems(String key, long page, long numPerPage, List<String> displayColumns) throws org.apache.thrift.TException;

    public long getItemCount(String key) throws org.apache.thrift.TException;

    public void recordRatings(String key, long userId, long itemId, long rating) throws org.apache.thrift.TException;

    public void deleteRatings(String key, long userId, long itemId) throws org.apache.thrift.TException;

    public String createNewUser(String key, String username, boolean iskibitzuser) throws org.apache.thrift.TException;

    public boolean checkUsername(String key, String username, boolean iskibitzuser) throws org.apache.thrift.TException;

    public boolean checkLogin(String key, String username, String password, boolean iskibitzuser) throws org.apache.thrift.TException;

    public long retrieveUserId(String key, String username) throws org.apache.thrift.TException;

    public boolean createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey) throws org.apache.thrift.TException;

    public List<Item> getUserRatedItems(String key, long userId, List<String> displayColumns) throws org.apache.thrift.TException;

    public void initiateModel(String key, String table, String username, String database) throws org.apache.thrift.TException;

    public List<Item> getSearchItems(String table, String query, List<String> columnsToSearch, List<String> displayColumns) throws org.apache.thrift.TException;

    public List<Item> makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, List<String> displayColumns) throws org.apache.thrift.TException;

    public void addKibitzUser(String email, String password) throws org.apache.thrift.TException;

    public boolean checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image) throws org.apache.thrift.TException;

    public boolean checkRatingsColumn(String username, String table, String repository, String ratings_column) throws org.apache.thrift.TException;

    public List<Recommender> getRecommenders(String username) throws org.apache.thrift.TException;

    public String getProfilePicture(String username) throws org.apache.thrift.TException;

    public void saveFBProfilePic(String username, String fbUsername) throws org.apache.thrift.TException;

    public void deleteRecommender(String clientKey) throws org.apache.thrift.TException;

    public void updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Map<String,String> itemTypes, List<String> displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn) throws org.apache.thrift.TException;

    public void configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol) throws org.apache.thrift.TException;

    public List<String> getTables(String username, String repo) throws org.apache.thrift.TException;

    public List<String> getColumns(String username, String repo, String table) throws org.apache.thrift.TException;

    public String getFirstRepo(String username) throws org.apache.thrift.TException;

    public long getNumRepos(String username) throws org.apache.thrift.TException;

    public List<String> getAllRepos(String username) throws org.apache.thrift.TException;

    public void saveCSSData(String path, String data) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createNewIndividualServer(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void terminateSession(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void makeItemBasedRecommendations(String key, long userId, long numRecs, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPageItems(String key, long page, long numPerPage, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getItemCount(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void recordRatings(String key, long userId, long itemId, long rating, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRatings(String key, long userId, long itemId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createNewUser(String key, String username, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkUsername(String key, String username, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkLogin(String key, String username, String password, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void retrieveUserId(String key, String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserRatedItems(String key, long userId, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initiateModel(String key, String table, String username, String database, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchItems(String table, String query, List<String> columnsToSearch, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addKibitzUser(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkRatingsColumn(String username, String table, String repository, String ratings_column, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecommenders(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfilePicture(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveFBProfilePic(String username, String fbUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRecommender(String clientKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Map<String,String> itemTypes, List<String> displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTables(String username, String repo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getColumns(String username, String repo, String table, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFirstRepo(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNumRepos(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllRepos(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveCSSData(String path, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void createNewIndividualServer(String key) throws org.apache.thrift.TException
    {
      send_createNewIndividualServer(key);
      recv_createNewIndividualServer();
    }

    public void send_createNewIndividualServer(String key) throws org.apache.thrift.TException
    {
      createNewIndividualServer_args args = new createNewIndividualServer_args();
      args.setKey(key);
      sendBase("createNewIndividualServer", args);
    }

    public void recv_createNewIndividualServer() throws org.apache.thrift.TException
    {
      createNewIndividualServer_result result = new createNewIndividualServer_result();
      receiveBase(result, "createNewIndividualServer");
      return;
    }

    public void terminateSession(String key) throws org.apache.thrift.TException
    {
      send_terminateSession(key);
      recv_terminateSession();
    }

    public void send_terminateSession(String key) throws org.apache.thrift.TException
    {
      terminateSession_args args = new terminateSession_args();
      args.setKey(key);
      sendBase("terminateSession", args);
    }

    public void recv_terminateSession() throws org.apache.thrift.TException
    {
      terminateSession_result result = new terminateSession_result();
      receiveBase(result, "terminateSession");
      return;
    }

    public List<Item> makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, List<String> displayColumns) throws org.apache.thrift.TException
    {
      send_makeRecommendation(key, userId, numRecs, isBoolean, displayColumns);
      return recv_makeRecommendation();
    }

    public void send_makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, List<String> displayColumns) throws org.apache.thrift.TException
    {
      makeRecommendation_args args = new makeRecommendation_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setNumRecs(numRecs);
      args.setIsBoolean(isBoolean);
      args.setDisplayColumns(displayColumns);
      sendBase("makeRecommendation", args);
    }

    public List<Item> recv_makeRecommendation() throws org.apache.thrift.TException
    {
      makeRecommendation_result result = new makeRecommendation_result();
      receiveBase(result, "makeRecommendation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeRecommendation failed: unknown result");
    }

    public List<Item> makeItemBasedRecommendations(String key, long userId, long numRecs, List<String> displayColumns) throws org.apache.thrift.TException
    {
      send_makeItemBasedRecommendations(key, userId, numRecs, displayColumns);
      return recv_makeItemBasedRecommendations();
    }

    public void send_makeItemBasedRecommendations(String key, long userId, long numRecs, List<String> displayColumns) throws org.apache.thrift.TException
    {
      makeItemBasedRecommendations_args args = new makeItemBasedRecommendations_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setNumRecs(numRecs);
      args.setDisplayColumns(displayColumns);
      sendBase("makeItemBasedRecommendations", args);
    }

    public List<Item> recv_makeItemBasedRecommendations() throws org.apache.thrift.TException
    {
      makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
      receiveBase(result, "makeItemBasedRecommendations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeItemBasedRecommendations failed: unknown result");
    }

    public List<Item> getPageItems(String key, long page, long numPerPage, List<String> displayColumns) throws org.apache.thrift.TException
    {
      send_getPageItems(key, page, numPerPage, displayColumns);
      return recv_getPageItems();
    }

    public void send_getPageItems(String key, long page, long numPerPage, List<String> displayColumns) throws org.apache.thrift.TException
    {
      getPageItems_args args = new getPageItems_args();
      args.setKey(key);
      args.setPage(page);
      args.setNumPerPage(numPerPage);
      args.setDisplayColumns(displayColumns);
      sendBase("getPageItems", args);
    }

    public List<Item> recv_getPageItems() throws org.apache.thrift.TException
    {
      getPageItems_result result = new getPageItems_result();
      receiveBase(result, "getPageItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPageItems failed: unknown result");
    }

    public long getItemCount(String key) throws org.apache.thrift.TException
    {
      send_getItemCount(key);
      return recv_getItemCount();
    }

    public void send_getItemCount(String key) throws org.apache.thrift.TException
    {
      getItemCount_args args = new getItemCount_args();
      args.setKey(key);
      sendBase("getItemCount", args);
    }

    public long recv_getItemCount() throws org.apache.thrift.TException
    {
      getItemCount_result result = new getItemCount_result();
      receiveBase(result, "getItemCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getItemCount failed: unknown result");
    }

    public void recordRatings(String key, long userId, long itemId, long rating) throws org.apache.thrift.TException
    {
      send_recordRatings(key, userId, itemId, rating);
      recv_recordRatings();
    }

    public void send_recordRatings(String key, long userId, long itemId, long rating) throws org.apache.thrift.TException
    {
      recordRatings_args args = new recordRatings_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setItemId(itemId);
      args.setRating(rating);
      sendBase("recordRatings", args);
    }

    public void recv_recordRatings() throws org.apache.thrift.TException
    {
      recordRatings_result result = new recordRatings_result();
      receiveBase(result, "recordRatings");
      return;
    }

    public void deleteRatings(String key, long userId, long itemId) throws org.apache.thrift.TException
    {
      send_deleteRatings(key, userId, itemId);
      recv_deleteRatings();
    }

    public void send_deleteRatings(String key, long userId, long itemId) throws org.apache.thrift.TException
    {
      deleteRatings_args args = new deleteRatings_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setItemId(itemId);
      sendBase("deleteRatings", args);
    }

    public void recv_deleteRatings() throws org.apache.thrift.TException
    {
      deleteRatings_result result = new deleteRatings_result();
      receiveBase(result, "deleteRatings");
      return;
    }

    public String createNewUser(String key, String username, boolean iskibitzuser) throws org.apache.thrift.TException
    {
      send_createNewUser(key, username, iskibitzuser);
      return recv_createNewUser();
    }

    public void send_createNewUser(String key, String username, boolean iskibitzuser) throws org.apache.thrift.TException
    {
      createNewUser_args args = new createNewUser_args();
      args.setKey(key);
      args.setUsername(username);
      args.setIskibitzuser(iskibitzuser);
      sendBase("createNewUser", args);
    }

    public String recv_createNewUser() throws org.apache.thrift.TException
    {
      createNewUser_result result = new createNewUser_result();
      receiveBase(result, "createNewUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createNewUser failed: unknown result");
    }

    public boolean checkUsername(String key, String username, boolean iskibitzuser) throws org.apache.thrift.TException
    {
      send_checkUsername(key, username, iskibitzuser);
      return recv_checkUsername();
    }

    public void send_checkUsername(String key, String username, boolean iskibitzuser) throws org.apache.thrift.TException
    {
      checkUsername_args args = new checkUsername_args();
      args.setKey(key);
      args.setUsername(username);
      args.setIskibitzuser(iskibitzuser);
      sendBase("checkUsername", args);
    }

    public boolean recv_checkUsername() throws org.apache.thrift.TException
    {
      checkUsername_result result = new checkUsername_result();
      receiveBase(result, "checkUsername");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUsername failed: unknown result");
    }

    public boolean checkLogin(String key, String username, String password, boolean iskibitzuser) throws org.apache.thrift.TException
    {
      send_checkLogin(key, username, password, iskibitzuser);
      return recv_checkLogin();
    }

    public void send_checkLogin(String key, String username, String password, boolean iskibitzuser) throws org.apache.thrift.TException
    {
      checkLogin_args args = new checkLogin_args();
      args.setKey(key);
      args.setUsername(username);
      args.setPassword(password);
      args.setIskibitzuser(iskibitzuser);
      sendBase("checkLogin", args);
    }

    public boolean recv_checkLogin() throws org.apache.thrift.TException
    {
      checkLogin_result result = new checkLogin_result();
      receiveBase(result, "checkLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkLogin failed: unknown result");
    }

    public long retrieveUserId(String key, String username) throws org.apache.thrift.TException
    {
      send_retrieveUserId(key, username);
      return recv_retrieveUserId();
    }

    public void send_retrieveUserId(String key, String username) throws org.apache.thrift.TException
    {
      retrieveUserId_args args = new retrieveUserId_args();
      args.setKey(key);
      args.setUsername(username);
      sendBase("retrieveUserId", args);
    }

    public long recv_retrieveUserId() throws org.apache.thrift.TException
    {
      retrieveUserId_result result = new retrieveUserId_result();
      receiveBase(result, "retrieveUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveUserId failed: unknown result");
    }

    public boolean createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey) throws org.apache.thrift.TException
    {
      send_createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey);
      return recv_createNewRecommender();
    }

    public void send_createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey) throws org.apache.thrift.TException
    {
      createNewRecommender_args args = new createNewRecommender_args();
      args.setUsername(username);
      args.setPrimaryKey(primaryKey);
      args.setDatabase(database);
      args.setTable(table);
      args.setTitle(title);
      args.setDescription(description);
      args.setImage(image);
      args.setRatings_column(ratings_column);
      args.setClientKey(clientKey);
      sendBase("createNewRecommender", args);
    }

    public boolean recv_createNewRecommender() throws org.apache.thrift.TException
    {
      createNewRecommender_result result = new createNewRecommender_result();
      receiveBase(result, "createNewRecommender");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createNewRecommender failed: unknown result");
    }

    public List<Item> getUserRatedItems(String key, long userId, List<String> displayColumns) throws org.apache.thrift.TException
    {
      send_getUserRatedItems(key, userId, displayColumns);
      return recv_getUserRatedItems();
    }

    public void send_getUserRatedItems(String key, long userId, List<String> displayColumns) throws org.apache.thrift.TException
    {
      getUserRatedItems_args args = new getUserRatedItems_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setDisplayColumns(displayColumns);
      sendBase("getUserRatedItems", args);
    }

    public List<Item> recv_getUserRatedItems() throws org.apache.thrift.TException
    {
      getUserRatedItems_result result = new getUserRatedItems_result();
      receiveBase(result, "getUserRatedItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserRatedItems failed: unknown result");
    }

    public void initiateModel(String key, String table, String username, String database) throws org.apache.thrift.TException
    {
      send_initiateModel(key, table, username, database);
      recv_initiateModel();
    }

    public void send_initiateModel(String key, String table, String username, String database) throws org.apache.thrift.TException
    {
      initiateModel_args args = new initiateModel_args();
      args.setKey(key);
      args.setTable(table);
      args.setUsername(username);
      args.setDatabase(database);
      sendBase("initiateModel", args);
    }

    public void recv_initiateModel() throws org.apache.thrift.TException
    {
      initiateModel_result result = new initiateModel_result();
      receiveBase(result, "initiateModel");
      return;
    }

    public List<Item> getSearchItems(String table, String query, List<String> columnsToSearch, List<String> displayColumns) throws org.apache.thrift.TException
    {
      send_getSearchItems(table, query, columnsToSearch, displayColumns);
      return recv_getSearchItems();
    }

    public void send_getSearchItems(String table, String query, List<String> columnsToSearch, List<String> displayColumns) throws org.apache.thrift.TException
    {
      getSearchItems_args args = new getSearchItems_args();
      args.setTable(table);
      args.setQuery(query);
      args.setColumnsToSearch(columnsToSearch);
      args.setDisplayColumns(displayColumns);
      sendBase("getSearchItems", args);
    }

    public List<Item> recv_getSearchItems() throws org.apache.thrift.TException
    {
      getSearchItems_result result = new getSearchItems_result();
      receiveBase(result, "getSearchItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchItems failed: unknown result");
    }

    public List<Item> makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, List<String> displayColumns) throws org.apache.thrift.TException
    {
      send_makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns);
      return recv_makeOverallRatingBasedOrRandomRecommendation();
    }

    public void send_makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, List<String> displayColumns) throws org.apache.thrift.TException
    {
      makeOverallRatingBasedOrRandomRecommendation_args args = new makeOverallRatingBasedOrRandomRecommendation_args();
      args.setKey(key);
      args.setRatingColumnName(ratingColumnName);
      args.setNumRecs(numRecs);
      args.setDisplayColumns(displayColumns);
      sendBase("makeOverallRatingBasedOrRandomRecommendation", args);
    }

    public List<Item> recv_makeOverallRatingBasedOrRandomRecommendation() throws org.apache.thrift.TException
    {
      makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
      receiveBase(result, "makeOverallRatingBasedOrRandomRecommendation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeOverallRatingBasedOrRandomRecommendation failed: unknown result");
    }

    public void addKibitzUser(String email, String password) throws org.apache.thrift.TException
    {
      send_addKibitzUser(email, password);
      recv_addKibitzUser();
    }

    public void send_addKibitzUser(String email, String password) throws org.apache.thrift.TException
    {
      addKibitzUser_args args = new addKibitzUser_args();
      args.setEmail(email);
      args.setPassword(password);
      sendBase("addKibitzUser", args);
    }

    public void recv_addKibitzUser() throws org.apache.thrift.TException
    {
      addKibitzUser_result result = new addKibitzUser_result();
      receiveBase(result, "addKibitzUser");
      return;
    }

    public boolean checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image) throws org.apache.thrift.TException
    {
      send_checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image);
      return recv_checkCorrectDatahubLogin();
    }

    public void send_checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image) throws org.apache.thrift.TException
    {
      checkCorrectDatahubLogin_args args = new checkCorrectDatahubLogin_args();
      args.setUsername(username);
      args.setRepository(repository);
      args.setTable(table);
      args.setPrimary_key(primary_key);
      args.setTitle(title);
      args.setDescription(description);
      args.setImage(image);
      sendBase("checkCorrectDatahubLogin", args);
    }

    public boolean recv_checkCorrectDatahubLogin() throws org.apache.thrift.TException
    {
      checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
      receiveBase(result, "checkCorrectDatahubLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkCorrectDatahubLogin failed: unknown result");
    }

    public boolean checkRatingsColumn(String username, String table, String repository, String ratings_column) throws org.apache.thrift.TException
    {
      send_checkRatingsColumn(username, table, repository, ratings_column);
      return recv_checkRatingsColumn();
    }

    public void send_checkRatingsColumn(String username, String table, String repository, String ratings_column) throws org.apache.thrift.TException
    {
      checkRatingsColumn_args args = new checkRatingsColumn_args();
      args.setUsername(username);
      args.setTable(table);
      args.setRepository(repository);
      args.setRatings_column(ratings_column);
      sendBase("checkRatingsColumn", args);
    }

    public boolean recv_checkRatingsColumn() throws org.apache.thrift.TException
    {
      checkRatingsColumn_result result = new checkRatingsColumn_result();
      receiveBase(result, "checkRatingsColumn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkRatingsColumn failed: unknown result");
    }

    public List<Recommender> getRecommenders(String username) throws org.apache.thrift.TException
    {
      send_getRecommenders(username);
      return recv_getRecommenders();
    }

    public void send_getRecommenders(String username) throws org.apache.thrift.TException
    {
      getRecommenders_args args = new getRecommenders_args();
      args.setUsername(username);
      sendBase("getRecommenders", args);
    }

    public List<Recommender> recv_getRecommenders() throws org.apache.thrift.TException
    {
      getRecommenders_result result = new getRecommenders_result();
      receiveBase(result, "getRecommenders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecommenders failed: unknown result");
    }

    public String getProfilePicture(String username) throws org.apache.thrift.TException
    {
      send_getProfilePicture(username);
      return recv_getProfilePicture();
    }

    public void send_getProfilePicture(String username) throws org.apache.thrift.TException
    {
      getProfilePicture_args args = new getProfilePicture_args();
      args.setUsername(username);
      sendBase("getProfilePicture", args);
    }

    public String recv_getProfilePicture() throws org.apache.thrift.TException
    {
      getProfilePicture_result result = new getProfilePicture_result();
      receiveBase(result, "getProfilePicture");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfilePicture failed: unknown result");
    }

    public void saveFBProfilePic(String username, String fbUsername) throws org.apache.thrift.TException
    {
      send_saveFBProfilePic(username, fbUsername);
      recv_saveFBProfilePic();
    }

    public void send_saveFBProfilePic(String username, String fbUsername) throws org.apache.thrift.TException
    {
      saveFBProfilePic_args args = new saveFBProfilePic_args();
      args.setUsername(username);
      args.setFbUsername(fbUsername);
      sendBase("saveFBProfilePic", args);
    }

    public void recv_saveFBProfilePic() throws org.apache.thrift.TException
    {
      saveFBProfilePic_result result = new saveFBProfilePic_result();
      receiveBase(result, "saveFBProfilePic");
      return;
    }

    public void deleteRecommender(String clientKey) throws org.apache.thrift.TException
    {
      send_deleteRecommender(clientKey);
      recv_deleteRecommender();
    }

    public void send_deleteRecommender(String clientKey) throws org.apache.thrift.TException
    {
      deleteRecommender_args args = new deleteRecommender_args();
      args.setClientKey(clientKey);
      sendBase("deleteRecommender", args);
    }

    public void recv_deleteRecommender() throws org.apache.thrift.TException
    {
      deleteRecommender_result result = new deleteRecommender_result();
      receiveBase(result, "deleteRecommender");
      return;
    }

    public void updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Map<String,String> itemTypes, List<String> displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn) throws org.apache.thrift.TException
    {
      send_updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn);
      recv_updateTemplate();
    }

    public void send_updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Map<String,String> itemTypes, List<String> displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn) throws org.apache.thrift.TException
    {
      updateTemplate_args args = new updateTemplate_args();
      args.setUsername(username);
      args.setPrimaryKey(primaryKey);
      args.setTitle(title);
      args.setDescription(description);
      args.setImage(image);
      args.setVideo(video);
      args.setItemTypes(itemTypes);
      args.setDisplayItems(displayItems);
      args.setMaxRatingVal(maxRatingVal);
      args.setNumRecs(numRecs);
      args.setRecommenderName(recommenderName);
      args.setClientKey(clientKey);
      args.setHomepage(homepage);
      args.setCreatorName(creatorName);
      args.setRepoName(repoName);
      args.setTableName(tableName);
      args.setRatingsColumn(ratingsColumn);
      sendBase("updateTemplate", args);
    }

    public void recv_updateTemplate() throws org.apache.thrift.TException
    {
      updateTemplate_result result = new updateTemplate_result();
      receiveBase(result, "updateTemplate");
      return;
    }

    public void configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol) throws org.apache.thrift.TException
    {
      send_configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol);
      recv_configurePrefilledUserRatings();
    }

    public void send_configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol) throws org.apache.thrift.TException
    {
      configurePrefilledUserRatings_args args = new configurePrefilledUserRatings_args();
      args.setUsername(username);
      args.setRepoName(repoName);
      args.setPrimaryKey(primaryKey);
      args.setItemTable(itemTable);
      args.setTableName(tableName);
      args.setUserIdCol(userIdCol);
      args.setItemIdCol(itemIdCol);
      args.setUserRatingCol(userRatingCol);
      sendBase("configurePrefilledUserRatings", args);
    }

    public void recv_configurePrefilledUserRatings() throws org.apache.thrift.TException
    {
      configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
      receiveBase(result, "configurePrefilledUserRatings");
      return;
    }

    public List<String> getTables(String username, String repo) throws org.apache.thrift.TException
    {
      send_getTables(username, repo);
      return recv_getTables();
    }

    public void send_getTables(String username, String repo) throws org.apache.thrift.TException
    {
      getTables_args args = new getTables_args();
      args.setUsername(username);
      args.setRepo(repo);
      sendBase("getTables", args);
    }

    public List<String> recv_getTables() throws org.apache.thrift.TException
    {
      getTables_result result = new getTables_result();
      receiveBase(result, "getTables");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTables failed: unknown result");
    }

    public List<String> getColumns(String username, String repo, String table) throws org.apache.thrift.TException
    {
      send_getColumns(username, repo, table);
      return recv_getColumns();
    }

    public void send_getColumns(String username, String repo, String table) throws org.apache.thrift.TException
    {
      getColumns_args args = new getColumns_args();
      args.setUsername(username);
      args.setRepo(repo);
      args.setTable(table);
      sendBase("getColumns", args);
    }

    public List<String> recv_getColumns() throws org.apache.thrift.TException
    {
      getColumns_result result = new getColumns_result();
      receiveBase(result, "getColumns");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getColumns failed: unknown result");
    }

    public String getFirstRepo(String username) throws org.apache.thrift.TException
    {
      send_getFirstRepo(username);
      return recv_getFirstRepo();
    }

    public void send_getFirstRepo(String username) throws org.apache.thrift.TException
    {
      getFirstRepo_args args = new getFirstRepo_args();
      args.setUsername(username);
      sendBase("getFirstRepo", args);
    }

    public String recv_getFirstRepo() throws org.apache.thrift.TException
    {
      getFirstRepo_result result = new getFirstRepo_result();
      receiveBase(result, "getFirstRepo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFirstRepo failed: unknown result");
    }

    public long getNumRepos(String username) throws org.apache.thrift.TException
    {
      send_getNumRepos(username);
      return recv_getNumRepos();
    }

    public void send_getNumRepos(String username) throws org.apache.thrift.TException
    {
      getNumRepos_args args = new getNumRepos_args();
      args.setUsername(username);
      sendBase("getNumRepos", args);
    }

    public long recv_getNumRepos() throws org.apache.thrift.TException
    {
      getNumRepos_result result = new getNumRepos_result();
      receiveBase(result, "getNumRepos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNumRepos failed: unknown result");
    }

    public List<String> getAllRepos(String username) throws org.apache.thrift.TException
    {
      send_getAllRepos(username);
      return recv_getAllRepos();
    }

    public void send_getAllRepos(String username) throws org.apache.thrift.TException
    {
      getAllRepos_args args = new getAllRepos_args();
      args.setUsername(username);
      sendBase("getAllRepos", args);
    }

    public List<String> recv_getAllRepos() throws org.apache.thrift.TException
    {
      getAllRepos_result result = new getAllRepos_result();
      receiveBase(result, "getAllRepos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllRepos failed: unknown result");
    }

    public void saveCSSData(String path, String data) throws org.apache.thrift.TException
    {
      send_saveCSSData(path, data);
      recv_saveCSSData();
    }

    public void send_saveCSSData(String path, String data) throws org.apache.thrift.TException
    {
      saveCSSData_args args = new saveCSSData_args();
      args.setPath(path);
      args.setData(data);
      sendBase("saveCSSData", args);
    }

    public void recv_saveCSSData() throws org.apache.thrift.TException
    {
      saveCSSData_result result = new saveCSSData_result();
      receiveBase(result, "saveCSSData");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createNewIndividualServer(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createNewIndividualServer_call method_call = new createNewIndividualServer_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createNewIndividualServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      public createNewIndividualServer_call(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createNewIndividualServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createNewIndividualServer_args args = new createNewIndividualServer_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createNewIndividualServer();
      }
    }

    public void terminateSession(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateSession_call method_call = new terminateSession_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      public terminateSession_call(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateSession_args args = new terminateSession_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_terminateSession();
      }
    }

    public void makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeRecommendation_call method_call = new makeRecommendation_call(key, userId, numRecs, isBoolean, displayColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeRecommendation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private long userId;
      private long numRecs;
      private boolean isBoolean;
      private List<String> displayColumns;
      public makeRecommendation_call(String key, long userId, long numRecs, boolean isBoolean, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.userId = userId;
        this.numRecs = numRecs;
        this.isBoolean = isBoolean;
        this.displayColumns = displayColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeRecommendation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeRecommendation_args args = new makeRecommendation_args();
        args.setKey(key);
        args.setUserId(userId);
        args.setNumRecs(numRecs);
        args.setIsBoolean(isBoolean);
        args.setDisplayColumns(displayColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Item> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeRecommendation();
      }
    }

    public void makeItemBasedRecommendations(String key, long userId, long numRecs, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeItemBasedRecommendations_call method_call = new makeItemBasedRecommendations_call(key, userId, numRecs, displayColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeItemBasedRecommendations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private long userId;
      private long numRecs;
      private List<String> displayColumns;
      public makeItemBasedRecommendations_call(String key, long userId, long numRecs, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.userId = userId;
        this.numRecs = numRecs;
        this.displayColumns = displayColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeItemBasedRecommendations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeItemBasedRecommendations_args args = new makeItemBasedRecommendations_args();
        args.setKey(key);
        args.setUserId(userId);
        args.setNumRecs(numRecs);
        args.setDisplayColumns(displayColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Item> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeItemBasedRecommendations();
      }
    }

    public void getPageItems(String key, long page, long numPerPage, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPageItems_call method_call = new getPageItems_call(key, page, numPerPage, displayColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPageItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private long page;
      private long numPerPage;
      private List<String> displayColumns;
      public getPageItems_call(String key, long page, long numPerPage, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.page = page;
        this.numPerPage = numPerPage;
        this.displayColumns = displayColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPageItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPageItems_args args = new getPageItems_args();
        args.setKey(key);
        args.setPage(page);
        args.setNumPerPage(numPerPage);
        args.setDisplayColumns(displayColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Item> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPageItems();
      }
    }

    public void getItemCount(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getItemCount_call method_call = new getItemCount_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getItemCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      public getItemCount_call(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getItemCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getItemCount_args args = new getItemCount_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getItemCount();
      }
    }

    public void recordRatings(String key, long userId, long itemId, long rating, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recordRatings_call method_call = new recordRatings_call(key, userId, itemId, rating, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recordRatings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private long userId;
      private long itemId;
      private long rating;
      public recordRatings_call(String key, long userId, long itemId, long rating, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.userId = userId;
        this.itemId = itemId;
        this.rating = rating;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recordRatings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recordRatings_args args = new recordRatings_args();
        args.setKey(key);
        args.setUserId(userId);
        args.setItemId(itemId);
        args.setRating(rating);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_recordRatings();
      }
    }

    public void deleteRatings(String key, long userId, long itemId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRatings_call method_call = new deleteRatings_call(key, userId, itemId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRatings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private long userId;
      private long itemId;
      public deleteRatings_call(String key, long userId, long itemId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.userId = userId;
        this.itemId = itemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRatings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRatings_args args = new deleteRatings_args();
        args.setKey(key);
        args.setUserId(userId);
        args.setItemId(itemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteRatings();
      }
    }

    public void createNewUser(String key, String username, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createNewUser_call method_call = new createNewUser_call(key, username, iskibitzuser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createNewUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private String username;
      private boolean iskibitzuser;
      public createNewUser_call(String key, String username, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.username = username;
        this.iskibitzuser = iskibitzuser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createNewUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createNewUser_args args = new createNewUser_args();
        args.setKey(key);
        args.setUsername(username);
        args.setIskibitzuser(iskibitzuser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createNewUser();
      }
    }

    public void checkUsername(String key, String username, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkUsername_call method_call = new checkUsername_call(key, username, iskibitzuser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUsername_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private String username;
      private boolean iskibitzuser;
      public checkUsername_call(String key, String username, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.username = username;
        this.iskibitzuser = iskibitzuser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUsername", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUsername_args args = new checkUsername_args();
        args.setKey(key);
        args.setUsername(username);
        args.setIskibitzuser(iskibitzuser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUsername();
      }
    }

    public void checkLogin(String key, String username, String password, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkLogin_call method_call = new checkLogin_call(key, username, password, iskibitzuser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private String username;
      private String password;
      private boolean iskibitzuser;
      public checkLogin_call(String key, String username, String password, boolean iskibitzuser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.username = username;
        this.password = password;
        this.iskibitzuser = iskibitzuser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkLogin_args args = new checkLogin_args();
        args.setKey(key);
        args.setUsername(username);
        args.setPassword(password);
        args.setIskibitzuser(iskibitzuser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkLogin();
      }
    }

    public void retrieveUserId(String key, String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retrieveUserId_call method_call = new retrieveUserId_call(key, username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private String username;
      public retrieveUserId_call(String key, String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveUserId_args args = new retrieveUserId_args();
        args.setKey(key);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveUserId();
      }
    }

    public void createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createNewRecommender_call method_call = new createNewRecommender_call(username, primaryKey, database, table, title, description, image, ratings_column, clientKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createNewRecommender_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String primaryKey;
      private String database;
      private String table;
      private String title;
      private String description;
      private String image;
      private String ratings_column;
      private String clientKey;
      public createNewRecommender_call(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.primaryKey = primaryKey;
        this.database = database;
        this.table = table;
        this.title = title;
        this.description = description;
        this.image = image;
        this.ratings_column = ratings_column;
        this.clientKey = clientKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createNewRecommender", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createNewRecommender_args args = new createNewRecommender_args();
        args.setUsername(username);
        args.setPrimaryKey(primaryKey);
        args.setDatabase(database);
        args.setTable(table);
        args.setTitle(title);
        args.setDescription(description);
        args.setImage(image);
        args.setRatings_column(ratings_column);
        args.setClientKey(clientKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createNewRecommender();
      }
    }

    public void getUserRatedItems(String key, long userId, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserRatedItems_call method_call = new getUserRatedItems_call(key, userId, displayColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserRatedItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private long userId;
      private List<String> displayColumns;
      public getUserRatedItems_call(String key, long userId, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.userId = userId;
        this.displayColumns = displayColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserRatedItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserRatedItems_args args = new getUserRatedItems_args();
        args.setKey(key);
        args.setUserId(userId);
        args.setDisplayColumns(displayColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Item> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserRatedItems();
      }
    }

    public void initiateModel(String key, String table, String username, String database, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initiateModel_call method_call = new initiateModel_call(key, table, username, database, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initiateModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private String table;
      private String username;
      private String database;
      public initiateModel_call(String key, String table, String username, String database, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.table = table;
        this.username = username;
        this.database = database;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initiateModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initiateModel_args args = new initiateModel_args();
        args.setKey(key);
        args.setTable(table);
        args.setUsername(username);
        args.setDatabase(database);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_initiateModel();
      }
    }

    public void getSearchItems(String table, String query, List<String> columnsToSearch, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchItems_call method_call = new getSearchItems_call(table, query, columnsToSearch, displayColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table;
      private String query;
      private List<String> columnsToSearch;
      private List<String> displayColumns;
      public getSearchItems_call(String table, String query, List<String> columnsToSearch, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.query = query;
        this.columnsToSearch = columnsToSearch;
        this.displayColumns = displayColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchItems_args args = new getSearchItems_args();
        args.setTable(table);
        args.setQuery(query);
        args.setColumnsToSearch(columnsToSearch);
        args.setDisplayColumns(displayColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Item> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchItems();
      }
    }

    public void makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeOverallRatingBasedOrRandomRecommendation_call method_call = new makeOverallRatingBasedOrRandomRecommendation_call(key, ratingColumnName, numRecs, displayColumns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeOverallRatingBasedOrRandomRecommendation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      private String ratingColumnName;
      private long numRecs;
      private List<String> displayColumns;
      public makeOverallRatingBasedOrRandomRecommendation_call(String key, String ratingColumnName, long numRecs, List<String> displayColumns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.ratingColumnName = ratingColumnName;
        this.numRecs = numRecs;
        this.displayColumns = displayColumns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeOverallRatingBasedOrRandomRecommendation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeOverallRatingBasedOrRandomRecommendation_args args = new makeOverallRatingBasedOrRandomRecommendation_args();
        args.setKey(key);
        args.setRatingColumnName(ratingColumnName);
        args.setNumRecs(numRecs);
        args.setDisplayColumns(displayColumns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Item> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeOverallRatingBasedOrRandomRecommendation();
      }
    }

    public void addKibitzUser(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addKibitzUser_call method_call = new addKibitzUser_call(email, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addKibitzUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      private String password;
      public addKibitzUser_call(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addKibitzUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addKibitzUser_args args = new addKibitzUser_args();
        args.setEmail(email);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addKibitzUser();
      }
    }

    public void checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkCorrectDatahubLogin_call method_call = new checkCorrectDatahubLogin_call(username, repository, table, primary_key, title, description, image, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkCorrectDatahubLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String repository;
      private String table;
      private String primary_key;
      private String title;
      private String description;
      private String image;
      public checkCorrectDatahubLogin_call(String username, String repository, String table, String primary_key, String title, String description, String image, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.repository = repository;
        this.table = table;
        this.primary_key = primary_key;
        this.title = title;
        this.description = description;
        this.image = image;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCorrectDatahubLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkCorrectDatahubLogin_args args = new checkCorrectDatahubLogin_args();
        args.setUsername(username);
        args.setRepository(repository);
        args.setTable(table);
        args.setPrimary_key(primary_key);
        args.setTitle(title);
        args.setDescription(description);
        args.setImage(image);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkCorrectDatahubLogin();
      }
    }

    public void checkRatingsColumn(String username, String table, String repository, String ratings_column, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkRatingsColumn_call method_call = new checkRatingsColumn_call(username, table, repository, ratings_column, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkRatingsColumn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String table;
      private String repository;
      private String ratings_column;
      public checkRatingsColumn_call(String username, String table, String repository, String ratings_column, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.table = table;
        this.repository = repository;
        this.ratings_column = ratings_column;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkRatingsColumn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkRatingsColumn_args args = new checkRatingsColumn_args();
        args.setUsername(username);
        args.setTable(table);
        args.setRepository(repository);
        args.setRatings_column(ratings_column);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkRatingsColumn();
      }
    }

    public void getRecommenders(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecommenders_call method_call = new getRecommenders_call(username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecommenders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      public getRecommenders_call(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecommenders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecommenders_args args = new getRecommenders_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Recommender> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecommenders();
      }
    }

    public void getProfilePicture(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfilePicture_call method_call = new getProfilePicture_call(username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfilePicture_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      public getProfilePicture_call(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfilePicture", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfilePicture_args args = new getProfilePicture_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfilePicture();
      }
    }

    public void saveFBProfilePic(String username, String fbUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFBProfilePic_call method_call = new saveFBProfilePic_call(username, fbUsername, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFBProfilePic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String fbUsername;
      public saveFBProfilePic_call(String username, String fbUsername, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.fbUsername = fbUsername;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFBProfilePic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFBProfilePic_args args = new saveFBProfilePic_args();
        args.setUsername(username);
        args.setFbUsername(fbUsername);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveFBProfilePic();
      }
    }

    public void deleteRecommender(String clientKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRecommender_call method_call = new deleteRecommender_call(clientKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRecommender_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientKey;
      public deleteRecommender_call(String clientKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientKey = clientKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRecommender", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRecommender_args args = new deleteRecommender_args();
        args.setClientKey(clientKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteRecommender();
      }
    }

    public void updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Map<String,String> itemTypes, List<String> displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTemplate_call method_call = new updateTemplate_call(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String primaryKey;
      private String title;
      private String description;
      private String image;
      private String video;
      private Map<String,String> itemTypes;
      private List<String> displayItems;
      private long maxRatingVal;
      private long numRecs;
      private String recommenderName;
      private String clientKey;
      private String homepage;
      private String creatorName;
      private String repoName;
      private String tableName;
      private String ratingsColumn;
      public updateTemplate_call(String username, String primaryKey, String title, String description, String image, String video, Map<String,String> itemTypes, List<String> displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.primaryKey = primaryKey;
        this.title = title;
        this.description = description;
        this.image = image;
        this.video = video;
        this.itemTypes = itemTypes;
        this.displayItems = displayItems;
        this.maxRatingVal = maxRatingVal;
        this.numRecs = numRecs;
        this.recommenderName = recommenderName;
        this.clientKey = clientKey;
        this.homepage = homepage;
        this.creatorName = creatorName;
        this.repoName = repoName;
        this.tableName = tableName;
        this.ratingsColumn = ratingsColumn;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTemplate_args args = new updateTemplate_args();
        args.setUsername(username);
        args.setPrimaryKey(primaryKey);
        args.setTitle(title);
        args.setDescription(description);
        args.setImage(image);
        args.setVideo(video);
        args.setItemTypes(itemTypes);
        args.setDisplayItems(displayItems);
        args.setMaxRatingVal(maxRatingVal);
        args.setNumRecs(numRecs);
        args.setRecommenderName(recommenderName);
        args.setClientKey(clientKey);
        args.setHomepage(homepage);
        args.setCreatorName(creatorName);
        args.setRepoName(repoName);
        args.setTableName(tableName);
        args.setRatingsColumn(ratingsColumn);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateTemplate();
      }
    }

    public void configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      configurePrefilledUserRatings_call method_call = new configurePrefilledUserRatings_call(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configurePrefilledUserRatings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String repoName;
      private String primaryKey;
      private String itemTable;
      private String tableName;
      private String userIdCol;
      private String itemIdCol;
      private String userRatingCol;
      public configurePrefilledUserRatings_call(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.repoName = repoName;
        this.primaryKey = primaryKey;
        this.itemTable = itemTable;
        this.tableName = tableName;
        this.userIdCol = userIdCol;
        this.itemIdCol = itemIdCol;
        this.userRatingCol = userRatingCol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("configurePrefilledUserRatings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configurePrefilledUserRatings_args args = new configurePrefilledUserRatings_args();
        args.setUsername(username);
        args.setRepoName(repoName);
        args.setPrimaryKey(primaryKey);
        args.setItemTable(itemTable);
        args.setTableName(tableName);
        args.setUserIdCol(userIdCol);
        args.setItemIdCol(itemIdCol);
        args.setUserRatingCol(userRatingCol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_configurePrefilledUserRatings();
      }
    }

    public void getTables(String username, String repo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTables_call method_call = new getTables_call(username, repo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTables_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String repo;
      public getTables_call(String username, String repo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.repo = repo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTables", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTables_args args = new getTables_args();
        args.setUsername(username);
        args.setRepo(repo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTables();
      }
    }

    public void getColumns(String username, String repo, String table, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getColumns_call method_call = new getColumns_call(username, repo, table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getColumns_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String repo;
      private String table;
      public getColumns_call(String username, String repo, String table, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.repo = repo;
        this.table = table;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getColumns", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getColumns_args args = new getColumns_args();
        args.setUsername(username);
        args.setRepo(repo);
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getColumns();
      }
    }

    public void getFirstRepo(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFirstRepo_call method_call = new getFirstRepo_call(username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFirstRepo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      public getFirstRepo_call(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFirstRepo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFirstRepo_args args = new getFirstRepo_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFirstRepo();
      }
    }

    public void getNumRepos(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNumRepos_call method_call = new getNumRepos_call(username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNumRepos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      public getNumRepos_call(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNumRepos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNumRepos_args args = new getNumRepos_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNumRepos();
      }
    }

    public void getAllRepos(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllRepos_call method_call = new getAllRepos_call(username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllRepos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      public getAllRepos_call(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllRepos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllRepos_args args = new getAllRepos_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllRepos();
      }
    }

    public void saveCSSData(String path, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveCSSData_call method_call = new saveCSSData_call(path, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveCSSData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      private String data;
      public saveCSSData_call(String path, String data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCSSData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveCSSData_args args = new saveCSSData_args();
        args.setPath(path);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveCSSData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createNewIndividualServer", new createNewIndividualServer());
      processMap.put("terminateSession", new terminateSession());
      processMap.put("makeRecommendation", new makeRecommendation());
      processMap.put("makeItemBasedRecommendations", new makeItemBasedRecommendations());
      processMap.put("getPageItems", new getPageItems());
      processMap.put("getItemCount", new getItemCount());
      processMap.put("recordRatings", new recordRatings());
      processMap.put("deleteRatings", new deleteRatings());
      processMap.put("createNewUser", new createNewUser());
      processMap.put("checkUsername", new checkUsername());
      processMap.put("checkLogin", new checkLogin());
      processMap.put("retrieveUserId", new retrieveUserId());
      processMap.put("createNewRecommender", new createNewRecommender());
      processMap.put("getUserRatedItems", new getUserRatedItems());
      processMap.put("initiateModel", new initiateModel());
      processMap.put("getSearchItems", new getSearchItems());
      processMap.put("makeOverallRatingBasedOrRandomRecommendation", new makeOverallRatingBasedOrRandomRecommendation());
      processMap.put("addKibitzUser", new addKibitzUser());
      processMap.put("checkCorrectDatahubLogin", new checkCorrectDatahubLogin());
      processMap.put("checkRatingsColumn", new checkRatingsColumn());
      processMap.put("getRecommenders", new getRecommenders());
      processMap.put("getProfilePicture", new getProfilePicture());
      processMap.put("saveFBProfilePic", new saveFBProfilePic());
      processMap.put("deleteRecommender", new deleteRecommender());
      processMap.put("updateTemplate", new updateTemplate());
      processMap.put("configurePrefilledUserRatings", new configurePrefilledUserRatings());
      processMap.put("getTables", new getTables());
      processMap.put("getColumns", new getColumns());
      processMap.put("getFirstRepo", new getFirstRepo());
      processMap.put("getNumRepos", new getNumRepos());
      processMap.put("getAllRepos", new getAllRepos());
      processMap.put("saveCSSData", new saveCSSData());
      return processMap;
    }

    public static class createNewIndividualServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createNewIndividualServer_args> {
      public createNewIndividualServer() {
        super("createNewIndividualServer");
      }

      public createNewIndividualServer_args getEmptyArgsInstance() {
        return new createNewIndividualServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createNewIndividualServer_result getResult(I iface, createNewIndividualServer_args args) throws org.apache.thrift.TException {
        createNewIndividualServer_result result = new createNewIndividualServer_result();
        iface.createNewIndividualServer(args.key);
        return result;
      }
    }

    public static class terminateSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateSession_args> {
      public terminateSession() {
        super("terminateSession");
      }

      public terminateSession_args getEmptyArgsInstance() {
        return new terminateSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public terminateSession_result getResult(I iface, terminateSession_args args) throws org.apache.thrift.TException {
        terminateSession_result result = new terminateSession_result();
        iface.terminateSession(args.key);
        return result;
      }
    }

    public static class makeRecommendation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeRecommendation_args> {
      public makeRecommendation() {
        super("makeRecommendation");
      }

      public makeRecommendation_args getEmptyArgsInstance() {
        return new makeRecommendation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeRecommendation_result getResult(I iface, makeRecommendation_args args) throws org.apache.thrift.TException {
        makeRecommendation_result result = new makeRecommendation_result();
        result.success = iface.makeRecommendation(args.key, args.userId, args.numRecs, args.isBoolean, args.displayColumns);
        return result;
      }
    }

    public static class makeItemBasedRecommendations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeItemBasedRecommendations_args> {
      public makeItemBasedRecommendations() {
        super("makeItemBasedRecommendations");
      }

      public makeItemBasedRecommendations_args getEmptyArgsInstance() {
        return new makeItemBasedRecommendations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeItemBasedRecommendations_result getResult(I iface, makeItemBasedRecommendations_args args) throws org.apache.thrift.TException {
        makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
        result.success = iface.makeItemBasedRecommendations(args.key, args.userId, args.numRecs, args.displayColumns);
        return result;
      }
    }

    public static class getPageItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPageItems_args> {
      public getPageItems() {
        super("getPageItems");
      }

      public getPageItems_args getEmptyArgsInstance() {
        return new getPageItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPageItems_result getResult(I iface, getPageItems_args args) throws org.apache.thrift.TException {
        getPageItems_result result = new getPageItems_result();
        result.success = iface.getPageItems(args.key, args.page, args.numPerPage, args.displayColumns);
        return result;
      }
    }

    public static class getItemCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getItemCount_args> {
      public getItemCount() {
        super("getItemCount");
      }

      public getItemCount_args getEmptyArgsInstance() {
        return new getItemCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getItemCount_result getResult(I iface, getItemCount_args args) throws org.apache.thrift.TException {
        getItemCount_result result = new getItemCount_result();
        result.success = iface.getItemCount(args.key);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class recordRatings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recordRatings_args> {
      public recordRatings() {
        super("recordRatings");
      }

      public recordRatings_args getEmptyArgsInstance() {
        return new recordRatings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recordRatings_result getResult(I iface, recordRatings_args args) throws org.apache.thrift.TException {
        recordRatings_result result = new recordRatings_result();
        iface.recordRatings(args.key, args.userId, args.itemId, args.rating);
        return result;
      }
    }

    public static class deleteRatings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRatings_args> {
      public deleteRatings() {
        super("deleteRatings");
      }

      public deleteRatings_args getEmptyArgsInstance() {
        return new deleteRatings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRatings_result getResult(I iface, deleteRatings_args args) throws org.apache.thrift.TException {
        deleteRatings_result result = new deleteRatings_result();
        iface.deleteRatings(args.key, args.userId, args.itemId);
        return result;
      }
    }

    public static class createNewUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createNewUser_args> {
      public createNewUser() {
        super("createNewUser");
      }

      public createNewUser_args getEmptyArgsInstance() {
        return new createNewUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createNewUser_result getResult(I iface, createNewUser_args args) throws org.apache.thrift.TException {
        createNewUser_result result = new createNewUser_result();
        result.success = iface.createNewUser(args.key, args.username, args.iskibitzuser);
        return result;
      }
    }

    public static class checkUsername<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUsername_args> {
      public checkUsername() {
        super("checkUsername");
      }

      public checkUsername_args getEmptyArgsInstance() {
        return new checkUsername_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkUsername_result getResult(I iface, checkUsername_args args) throws org.apache.thrift.TException {
        checkUsername_result result = new checkUsername_result();
        result.success = iface.checkUsername(args.key, args.username, args.iskibitzuser);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkLogin_args> {
      public checkLogin() {
        super("checkLogin");
      }

      public checkLogin_args getEmptyArgsInstance() {
        return new checkLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkLogin_result getResult(I iface, checkLogin_args args) throws org.apache.thrift.TException {
        checkLogin_result result = new checkLogin_result();
        result.success = iface.checkLogin(args.key, args.username, args.password, args.iskibitzuser);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class retrieveUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveUserId_args> {
      public retrieveUserId() {
        super("retrieveUserId");
      }

      public retrieveUserId_args getEmptyArgsInstance() {
        return new retrieveUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveUserId_result getResult(I iface, retrieveUserId_args args) throws org.apache.thrift.TException {
        retrieveUserId_result result = new retrieveUserId_result();
        result.success = iface.retrieveUserId(args.key, args.username);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createNewRecommender<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createNewRecommender_args> {
      public createNewRecommender() {
        super("createNewRecommender");
      }

      public createNewRecommender_args getEmptyArgsInstance() {
        return new createNewRecommender_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createNewRecommender_result getResult(I iface, createNewRecommender_args args) throws org.apache.thrift.TException {
        createNewRecommender_result result = new createNewRecommender_result();
        result.success = iface.createNewRecommender(args.username, args.primaryKey, args.database, args.table, args.title, args.description, args.image, args.ratings_column, args.clientKey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getUserRatedItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserRatedItems_args> {
      public getUserRatedItems() {
        super("getUserRatedItems");
      }

      public getUserRatedItems_args getEmptyArgsInstance() {
        return new getUserRatedItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserRatedItems_result getResult(I iface, getUserRatedItems_args args) throws org.apache.thrift.TException {
        getUserRatedItems_result result = new getUserRatedItems_result();
        result.success = iface.getUserRatedItems(args.key, args.userId, args.displayColumns);
        return result;
      }
    }

    public static class initiateModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initiateModel_args> {
      public initiateModel() {
        super("initiateModel");
      }

      public initiateModel_args getEmptyArgsInstance() {
        return new initiateModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initiateModel_result getResult(I iface, initiateModel_args args) throws org.apache.thrift.TException {
        initiateModel_result result = new initiateModel_result();
        iface.initiateModel(args.key, args.table, args.username, args.database);
        return result;
      }
    }

    public static class getSearchItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchItems_args> {
      public getSearchItems() {
        super("getSearchItems");
      }

      public getSearchItems_args getEmptyArgsInstance() {
        return new getSearchItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchItems_result getResult(I iface, getSearchItems_args args) throws org.apache.thrift.TException {
        getSearchItems_result result = new getSearchItems_result();
        result.success = iface.getSearchItems(args.table, args.query, args.columnsToSearch, args.displayColumns);
        return result;
      }
    }

    public static class makeOverallRatingBasedOrRandomRecommendation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeOverallRatingBasedOrRandomRecommendation_args> {
      public makeOverallRatingBasedOrRandomRecommendation() {
        super("makeOverallRatingBasedOrRandomRecommendation");
      }

      public makeOverallRatingBasedOrRandomRecommendation_args getEmptyArgsInstance() {
        return new makeOverallRatingBasedOrRandomRecommendation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeOverallRatingBasedOrRandomRecommendation_result getResult(I iface, makeOverallRatingBasedOrRandomRecommendation_args args) throws org.apache.thrift.TException {
        makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
        result.success = iface.makeOverallRatingBasedOrRandomRecommendation(args.key, args.ratingColumnName, args.numRecs, args.displayColumns);
        return result;
      }
    }

    public static class addKibitzUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addKibitzUser_args> {
      public addKibitzUser() {
        super("addKibitzUser");
      }

      public addKibitzUser_args getEmptyArgsInstance() {
        return new addKibitzUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addKibitzUser_result getResult(I iface, addKibitzUser_args args) throws org.apache.thrift.TException {
        addKibitzUser_result result = new addKibitzUser_result();
        iface.addKibitzUser(args.email, args.password);
        return result;
      }
    }

    public static class checkCorrectDatahubLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkCorrectDatahubLogin_args> {
      public checkCorrectDatahubLogin() {
        super("checkCorrectDatahubLogin");
      }

      public checkCorrectDatahubLogin_args getEmptyArgsInstance() {
        return new checkCorrectDatahubLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkCorrectDatahubLogin_result getResult(I iface, checkCorrectDatahubLogin_args args) throws org.apache.thrift.TException {
        checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
        result.success = iface.checkCorrectDatahubLogin(args.username, args.repository, args.table, args.primary_key, args.title, args.description, args.image);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkRatingsColumn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkRatingsColumn_args> {
      public checkRatingsColumn() {
        super("checkRatingsColumn");
      }

      public checkRatingsColumn_args getEmptyArgsInstance() {
        return new checkRatingsColumn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkRatingsColumn_result getResult(I iface, checkRatingsColumn_args args) throws org.apache.thrift.TException {
        checkRatingsColumn_result result = new checkRatingsColumn_result();
        result.success = iface.checkRatingsColumn(args.username, args.table, args.repository, args.ratings_column);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRecommenders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecommenders_args> {
      public getRecommenders() {
        super("getRecommenders");
      }

      public getRecommenders_args getEmptyArgsInstance() {
        return new getRecommenders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecommenders_result getResult(I iface, getRecommenders_args args) throws org.apache.thrift.TException {
        getRecommenders_result result = new getRecommenders_result();
        result.success = iface.getRecommenders(args.username);
        return result;
      }
    }

    public static class getProfilePicture<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfilePicture_args> {
      public getProfilePicture() {
        super("getProfilePicture");
      }

      public getProfilePicture_args getEmptyArgsInstance() {
        return new getProfilePicture_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfilePicture_result getResult(I iface, getProfilePicture_args args) throws org.apache.thrift.TException {
        getProfilePicture_result result = new getProfilePicture_result();
        result.success = iface.getProfilePicture(args.username);
        return result;
      }
    }

    public static class saveFBProfilePic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFBProfilePic_args> {
      public saveFBProfilePic() {
        super("saveFBProfilePic");
      }

      public saveFBProfilePic_args getEmptyArgsInstance() {
        return new saveFBProfilePic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFBProfilePic_result getResult(I iface, saveFBProfilePic_args args) throws org.apache.thrift.TException {
        saveFBProfilePic_result result = new saveFBProfilePic_result();
        iface.saveFBProfilePic(args.username, args.fbUsername);
        return result;
      }
    }

    public static class deleteRecommender<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRecommender_args> {
      public deleteRecommender() {
        super("deleteRecommender");
      }

      public deleteRecommender_args getEmptyArgsInstance() {
        return new deleteRecommender_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRecommender_result getResult(I iface, deleteRecommender_args args) throws org.apache.thrift.TException {
        deleteRecommender_result result = new deleteRecommender_result();
        iface.deleteRecommender(args.clientKey);
        return result;
      }
    }

    public static class updateTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTemplate_args> {
      public updateTemplate() {
        super("updateTemplate");
      }

      public updateTemplate_args getEmptyArgsInstance() {
        return new updateTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTemplate_result getResult(I iface, updateTemplate_args args) throws org.apache.thrift.TException {
        updateTemplate_result result = new updateTemplate_result();
        iface.updateTemplate(args.username, args.primaryKey, args.title, args.description, args.image, args.video, args.itemTypes, args.displayItems, args.maxRatingVal, args.numRecs, args.recommenderName, args.clientKey, args.homepage, args.creatorName, args.repoName, args.tableName, args.ratingsColumn);
        return result;
      }
    }

    public static class configurePrefilledUserRatings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, configurePrefilledUserRatings_args> {
      public configurePrefilledUserRatings() {
        super("configurePrefilledUserRatings");
      }

      public configurePrefilledUserRatings_args getEmptyArgsInstance() {
        return new configurePrefilledUserRatings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configurePrefilledUserRatings_result getResult(I iface, configurePrefilledUserRatings_args args) throws org.apache.thrift.TException {
        configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
        iface.configurePrefilledUserRatings(args.username, args.repoName, args.primaryKey, args.itemTable, args.tableName, args.userIdCol, args.itemIdCol, args.userRatingCol);
        return result;
      }
    }

    public static class getTables<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTables_args> {
      public getTables() {
        super("getTables");
      }

      public getTables_args getEmptyArgsInstance() {
        return new getTables_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTables_result getResult(I iface, getTables_args args) throws org.apache.thrift.TException {
        getTables_result result = new getTables_result();
        result.success = iface.getTables(args.username, args.repo);
        return result;
      }
    }

    public static class getColumns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getColumns_args> {
      public getColumns() {
        super("getColumns");
      }

      public getColumns_args getEmptyArgsInstance() {
        return new getColumns_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getColumns_result getResult(I iface, getColumns_args args) throws org.apache.thrift.TException {
        getColumns_result result = new getColumns_result();
        result.success = iface.getColumns(args.username, args.repo, args.table);
        return result;
      }
    }

    public static class getFirstRepo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFirstRepo_args> {
      public getFirstRepo() {
        super("getFirstRepo");
      }

      public getFirstRepo_args getEmptyArgsInstance() {
        return new getFirstRepo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFirstRepo_result getResult(I iface, getFirstRepo_args args) throws org.apache.thrift.TException {
        getFirstRepo_result result = new getFirstRepo_result();
        result.success = iface.getFirstRepo(args.username);
        return result;
      }
    }

    public static class getNumRepos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNumRepos_args> {
      public getNumRepos() {
        super("getNumRepos");
      }

      public getNumRepos_args getEmptyArgsInstance() {
        return new getNumRepos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNumRepos_result getResult(I iface, getNumRepos_args args) throws org.apache.thrift.TException {
        getNumRepos_result result = new getNumRepos_result();
        result.success = iface.getNumRepos(args.username);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getAllRepos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllRepos_args> {
      public getAllRepos() {
        super("getAllRepos");
      }

      public getAllRepos_args getEmptyArgsInstance() {
        return new getAllRepos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllRepos_result getResult(I iface, getAllRepos_args args) throws org.apache.thrift.TException {
        getAllRepos_result result = new getAllRepos_result();
        result.success = iface.getAllRepos(args.username);
        return result;
      }
    }

    public static class saveCSSData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveCSSData_args> {
      public saveCSSData() {
        super("saveCSSData");
      }

      public saveCSSData_args getEmptyArgsInstance() {
        return new saveCSSData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveCSSData_result getResult(I iface, saveCSSData_args args) throws org.apache.thrift.TException {
        saveCSSData_result result = new saveCSSData_result();
        iface.saveCSSData(args.path, args.data);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createNewIndividualServer", new createNewIndividualServer());
      processMap.put("terminateSession", new terminateSession());
      processMap.put("makeRecommendation", new makeRecommendation());
      processMap.put("makeItemBasedRecommendations", new makeItemBasedRecommendations());
      processMap.put("getPageItems", new getPageItems());
      processMap.put("getItemCount", new getItemCount());
      processMap.put("recordRatings", new recordRatings());
      processMap.put("deleteRatings", new deleteRatings());
      processMap.put("createNewUser", new createNewUser());
      processMap.put("checkUsername", new checkUsername());
      processMap.put("checkLogin", new checkLogin());
      processMap.put("retrieveUserId", new retrieveUserId());
      processMap.put("createNewRecommender", new createNewRecommender());
      processMap.put("getUserRatedItems", new getUserRatedItems());
      processMap.put("initiateModel", new initiateModel());
      processMap.put("getSearchItems", new getSearchItems());
      processMap.put("makeOverallRatingBasedOrRandomRecommendation", new makeOverallRatingBasedOrRandomRecommendation());
      processMap.put("addKibitzUser", new addKibitzUser());
      processMap.put("checkCorrectDatahubLogin", new checkCorrectDatahubLogin());
      processMap.put("checkRatingsColumn", new checkRatingsColumn());
      processMap.put("getRecommenders", new getRecommenders());
      processMap.put("getProfilePicture", new getProfilePicture());
      processMap.put("saveFBProfilePic", new saveFBProfilePic());
      processMap.put("deleteRecommender", new deleteRecommender());
      processMap.put("updateTemplate", new updateTemplate());
      processMap.put("configurePrefilledUserRatings", new configurePrefilledUserRatings());
      processMap.put("getTables", new getTables());
      processMap.put("getColumns", new getColumns());
      processMap.put("getFirstRepo", new getFirstRepo());
      processMap.put("getNumRepos", new getNumRepos());
      processMap.put("getAllRepos", new getAllRepos());
      processMap.put("saveCSSData", new saveCSSData());
      return processMap;
    }

    public static class createNewIndividualServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createNewIndividualServer_args, Void> {
      public createNewIndividualServer() {
        super("createNewIndividualServer");
      }

      public createNewIndividualServer_args getEmptyArgsInstance() {
        return new createNewIndividualServer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createNewIndividualServer_result result = new createNewIndividualServer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createNewIndividualServer_result result = new createNewIndividualServer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createNewIndividualServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.createNewIndividualServer(args.key,resultHandler);
      }
    }

    public static class terminateSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateSession_args, Void> {
      public terminateSession() {
        super("terminateSession");
      }

      public terminateSession_args getEmptyArgsInstance() {
        return new terminateSession_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            terminateSession_result result = new terminateSession_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            terminateSession_result result = new terminateSession_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminateSession_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.terminateSession(args.key,resultHandler);
      }
    }

    public static class makeRecommendation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeRecommendation_args, List<Item>> {
      public makeRecommendation() {
        super("makeRecommendation");
      }

      public makeRecommendation_args getEmptyArgsInstance() {
        return new makeRecommendation_args();
      }

      public AsyncMethodCallback<List<Item>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Item>>() { 
          public void onComplete(List<Item> o) {
            makeRecommendation_result result = new makeRecommendation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeRecommendation_result result = new makeRecommendation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeRecommendation_args args, org.apache.thrift.async.AsyncMethodCallback<List<Item>> resultHandler) throws TException {
        iface.makeRecommendation(args.key, args.userId, args.numRecs, args.isBoolean, args.displayColumns,resultHandler);
      }
    }

    public static class makeItemBasedRecommendations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeItemBasedRecommendations_args, List<Item>> {
      public makeItemBasedRecommendations() {
        super("makeItemBasedRecommendations");
      }

      public makeItemBasedRecommendations_args getEmptyArgsInstance() {
        return new makeItemBasedRecommendations_args();
      }

      public AsyncMethodCallback<List<Item>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Item>>() { 
          public void onComplete(List<Item> o) {
            makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeItemBasedRecommendations_args args, org.apache.thrift.async.AsyncMethodCallback<List<Item>> resultHandler) throws TException {
        iface.makeItemBasedRecommendations(args.key, args.userId, args.numRecs, args.displayColumns,resultHandler);
      }
    }

    public static class getPageItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPageItems_args, List<Item>> {
      public getPageItems() {
        super("getPageItems");
      }

      public getPageItems_args getEmptyArgsInstance() {
        return new getPageItems_args();
      }

      public AsyncMethodCallback<List<Item>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Item>>() { 
          public void onComplete(List<Item> o) {
            getPageItems_result result = new getPageItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPageItems_result result = new getPageItems_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPageItems_args args, org.apache.thrift.async.AsyncMethodCallback<List<Item>> resultHandler) throws TException {
        iface.getPageItems(args.key, args.page, args.numPerPage, args.displayColumns,resultHandler);
      }
    }

    public static class getItemCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getItemCount_args, Long> {
      public getItemCount() {
        super("getItemCount");
      }

      public getItemCount_args getEmptyArgsInstance() {
        return new getItemCount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getItemCount_result result = new getItemCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getItemCount_result result = new getItemCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getItemCount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getItemCount(args.key,resultHandler);
      }
    }

    public static class recordRatings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recordRatings_args, Void> {
      public recordRatings() {
        super("recordRatings");
      }

      public recordRatings_args getEmptyArgsInstance() {
        return new recordRatings_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            recordRatings_result result = new recordRatings_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recordRatings_result result = new recordRatings_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recordRatings_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.recordRatings(args.key, args.userId, args.itemId, args.rating,resultHandler);
      }
    }

    public static class deleteRatings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRatings_args, Void> {
      public deleteRatings() {
        super("deleteRatings");
      }

      public deleteRatings_args getEmptyArgsInstance() {
        return new deleteRatings_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteRatings_result result = new deleteRatings_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRatings_result result = new deleteRatings_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRatings_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteRatings(args.key, args.userId, args.itemId,resultHandler);
      }
    }

    public static class createNewUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createNewUser_args, String> {
      public createNewUser() {
        super("createNewUser");
      }

      public createNewUser_args getEmptyArgsInstance() {
        return new createNewUser_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createNewUser_result result = new createNewUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createNewUser_result result = new createNewUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createNewUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createNewUser(args.key, args.username, args.iskibitzuser,resultHandler);
      }
    }

    public static class checkUsername<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUsername_args, Boolean> {
      public checkUsername() {
        super("checkUsername");
      }

      public checkUsername_args getEmptyArgsInstance() {
        return new checkUsername_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkUsername_result result = new checkUsername_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkUsername_result result = new checkUsername_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUsername_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkUsername(args.key, args.username, args.iskibitzuser,resultHandler);
      }
    }

    public static class checkLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkLogin_args, Boolean> {
      public checkLogin() {
        super("checkLogin");
      }

      public checkLogin_args getEmptyArgsInstance() {
        return new checkLogin_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkLogin_result result = new checkLogin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkLogin_result result = new checkLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkLogin_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkLogin(args.key, args.username, args.password, args.iskibitzuser,resultHandler);
      }
    }

    public static class retrieveUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveUserId_args, Long> {
      public retrieveUserId() {
        super("retrieveUserId");
      }

      public retrieveUserId_args getEmptyArgsInstance() {
        return new retrieveUserId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            retrieveUserId_result result = new retrieveUserId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveUserId_result result = new retrieveUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveUserId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.retrieveUserId(args.key, args.username,resultHandler);
      }
    }

    public static class createNewRecommender<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createNewRecommender_args, Boolean> {
      public createNewRecommender() {
        super("createNewRecommender");
      }

      public createNewRecommender_args getEmptyArgsInstance() {
        return new createNewRecommender_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createNewRecommender_result result = new createNewRecommender_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createNewRecommender_result result = new createNewRecommender_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createNewRecommender_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createNewRecommender(args.username, args.primaryKey, args.database, args.table, args.title, args.description, args.image, args.ratings_column, args.clientKey,resultHandler);
      }
    }

    public static class getUserRatedItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserRatedItems_args, List<Item>> {
      public getUserRatedItems() {
        super("getUserRatedItems");
      }

      public getUserRatedItems_args getEmptyArgsInstance() {
        return new getUserRatedItems_args();
      }

      public AsyncMethodCallback<List<Item>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Item>>() { 
          public void onComplete(List<Item> o) {
            getUserRatedItems_result result = new getUserRatedItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserRatedItems_result result = new getUserRatedItems_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserRatedItems_args args, org.apache.thrift.async.AsyncMethodCallback<List<Item>> resultHandler) throws TException {
        iface.getUserRatedItems(args.key, args.userId, args.displayColumns,resultHandler);
      }
    }

    public static class initiateModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initiateModel_args, Void> {
      public initiateModel() {
        super("initiateModel");
      }

      public initiateModel_args getEmptyArgsInstance() {
        return new initiateModel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initiateModel_result result = new initiateModel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initiateModel_result result = new initiateModel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initiateModel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.initiateModel(args.key, args.table, args.username, args.database,resultHandler);
      }
    }

    public static class getSearchItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchItems_args, List<Item>> {
      public getSearchItems() {
        super("getSearchItems");
      }

      public getSearchItems_args getEmptyArgsInstance() {
        return new getSearchItems_args();
      }

      public AsyncMethodCallback<List<Item>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Item>>() { 
          public void onComplete(List<Item> o) {
            getSearchItems_result result = new getSearchItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchItems_result result = new getSearchItems_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchItems_args args, org.apache.thrift.async.AsyncMethodCallback<List<Item>> resultHandler) throws TException {
        iface.getSearchItems(args.table, args.query, args.columnsToSearch, args.displayColumns,resultHandler);
      }
    }

    public static class makeOverallRatingBasedOrRandomRecommendation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeOverallRatingBasedOrRandomRecommendation_args, List<Item>> {
      public makeOverallRatingBasedOrRandomRecommendation() {
        super("makeOverallRatingBasedOrRandomRecommendation");
      }

      public makeOverallRatingBasedOrRandomRecommendation_args getEmptyArgsInstance() {
        return new makeOverallRatingBasedOrRandomRecommendation_args();
      }

      public AsyncMethodCallback<List<Item>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Item>>() { 
          public void onComplete(List<Item> o) {
            makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeOverallRatingBasedOrRandomRecommendation_args args, org.apache.thrift.async.AsyncMethodCallback<List<Item>> resultHandler) throws TException {
        iface.makeOverallRatingBasedOrRandomRecommendation(args.key, args.ratingColumnName, args.numRecs, args.displayColumns,resultHandler);
      }
    }

    public static class addKibitzUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addKibitzUser_args, Void> {
      public addKibitzUser() {
        super("addKibitzUser");
      }

      public addKibitzUser_args getEmptyArgsInstance() {
        return new addKibitzUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addKibitzUser_result result = new addKibitzUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addKibitzUser_result result = new addKibitzUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addKibitzUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addKibitzUser(args.email, args.password,resultHandler);
      }
    }

    public static class checkCorrectDatahubLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkCorrectDatahubLogin_args, Boolean> {
      public checkCorrectDatahubLogin() {
        super("checkCorrectDatahubLogin");
      }

      public checkCorrectDatahubLogin_args getEmptyArgsInstance() {
        return new checkCorrectDatahubLogin_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkCorrectDatahubLogin_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkCorrectDatahubLogin(args.username, args.repository, args.table, args.primary_key, args.title, args.description, args.image,resultHandler);
      }
    }

    public static class checkRatingsColumn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkRatingsColumn_args, Boolean> {
      public checkRatingsColumn() {
        super("checkRatingsColumn");
      }

      public checkRatingsColumn_args getEmptyArgsInstance() {
        return new checkRatingsColumn_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkRatingsColumn_result result = new checkRatingsColumn_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkRatingsColumn_result result = new checkRatingsColumn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkRatingsColumn_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkRatingsColumn(args.username, args.table, args.repository, args.ratings_column,resultHandler);
      }
    }

    public static class getRecommenders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecommenders_args, List<Recommender>> {
      public getRecommenders() {
        super("getRecommenders");
      }

      public getRecommenders_args getEmptyArgsInstance() {
        return new getRecommenders_args();
      }

      public AsyncMethodCallback<List<Recommender>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Recommender>>() { 
          public void onComplete(List<Recommender> o) {
            getRecommenders_result result = new getRecommenders_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecommenders_result result = new getRecommenders_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecommenders_args args, org.apache.thrift.async.AsyncMethodCallback<List<Recommender>> resultHandler) throws TException {
        iface.getRecommenders(args.username,resultHandler);
      }
    }

    public static class getProfilePicture<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfilePicture_args, String> {
      public getProfilePicture() {
        super("getProfilePicture");
      }

      public getProfilePicture_args getEmptyArgsInstance() {
        return new getProfilePicture_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getProfilePicture_result result = new getProfilePicture_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfilePicture_result result = new getProfilePicture_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfilePicture_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getProfilePicture(args.username,resultHandler);
      }
    }

    public static class saveFBProfilePic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveFBProfilePic_args, Void> {
      public saveFBProfilePic() {
        super("saveFBProfilePic");
      }

      public saveFBProfilePic_args getEmptyArgsInstance() {
        return new saveFBProfilePic_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveFBProfilePic_result result = new saveFBProfilePic_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveFBProfilePic_result result = new saveFBProfilePic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveFBProfilePic_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveFBProfilePic(args.username, args.fbUsername,resultHandler);
      }
    }

    public static class deleteRecommender<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRecommender_args, Void> {
      public deleteRecommender() {
        super("deleteRecommender");
      }

      public deleteRecommender_args getEmptyArgsInstance() {
        return new deleteRecommender_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteRecommender_result result = new deleteRecommender_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRecommender_result result = new deleteRecommender_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRecommender_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteRecommender(args.clientKey,resultHandler);
      }
    }

    public static class updateTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTemplate_args, Void> {
      public updateTemplate() {
        super("updateTemplate");
      }

      public updateTemplate_args getEmptyArgsInstance() {
        return new updateTemplate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateTemplate_result result = new updateTemplate_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTemplate_result result = new updateTemplate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateTemplate(args.username, args.primaryKey, args.title, args.description, args.image, args.video, args.itemTypes, args.displayItems, args.maxRatingVal, args.numRecs, args.recommenderName, args.clientKey, args.homepage, args.creatorName, args.repoName, args.tableName, args.ratingsColumn,resultHandler);
      }
    }

    public static class configurePrefilledUserRatings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, configurePrefilledUserRatings_args, Void> {
      public configurePrefilledUserRatings() {
        super("configurePrefilledUserRatings");
      }

      public configurePrefilledUserRatings_args getEmptyArgsInstance() {
        return new configurePrefilledUserRatings_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, configurePrefilledUserRatings_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.configurePrefilledUserRatings(args.username, args.repoName, args.primaryKey, args.itemTable, args.tableName, args.userIdCol, args.itemIdCol, args.userRatingCol,resultHandler);
      }
    }

    public static class getTables<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTables_args, List<String>> {
      public getTables() {
        super("getTables");
      }

      public getTables_args getEmptyArgsInstance() {
        return new getTables_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getTables_result result = new getTables_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTables_result result = new getTables_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTables_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getTables(args.username, args.repo,resultHandler);
      }
    }

    public static class getColumns<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getColumns_args, List<String>> {
      public getColumns() {
        super("getColumns");
      }

      public getColumns_args getEmptyArgsInstance() {
        return new getColumns_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getColumns_result result = new getColumns_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getColumns_result result = new getColumns_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getColumns_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getColumns(args.username, args.repo, args.table,resultHandler);
      }
    }

    public static class getFirstRepo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFirstRepo_args, String> {
      public getFirstRepo() {
        super("getFirstRepo");
      }

      public getFirstRepo_args getEmptyArgsInstance() {
        return new getFirstRepo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getFirstRepo_result result = new getFirstRepo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFirstRepo_result result = new getFirstRepo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFirstRepo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getFirstRepo(args.username,resultHandler);
      }
    }

    public static class getNumRepos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNumRepos_args, Long> {
      public getNumRepos() {
        super("getNumRepos");
      }

      public getNumRepos_args getEmptyArgsInstance() {
        return new getNumRepos_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getNumRepos_result result = new getNumRepos_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNumRepos_result result = new getNumRepos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNumRepos_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getNumRepos(args.username,resultHandler);
      }
    }

    public static class getAllRepos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllRepos_args, List<String>> {
      public getAllRepos() {
        super("getAllRepos");
      }

      public getAllRepos_args getEmptyArgsInstance() {
        return new getAllRepos_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAllRepos_result result = new getAllRepos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllRepos_result result = new getAllRepos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllRepos_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAllRepos(args.username,resultHandler);
      }
    }

    public static class saveCSSData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveCSSData_args, Void> {
      public saveCSSData() {
        super("saveCSSData");
      }

      public saveCSSData_args getEmptyArgsInstance() {
        return new saveCSSData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveCSSData_result result = new saveCSSData_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveCSSData_result result = new saveCSSData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveCSSData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveCSSData(args.path, args.data,resultHandler);
      }
    }

  }

  public static class createNewIndividualServer_args implements org.apache.thrift.TBase<createNewIndividualServer_args, createNewIndividualServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<createNewIndividualServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewIndividualServer_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewIndividualServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewIndividualServer_argsTupleSchemeFactory());
    }

    public String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewIndividualServer_args.class, metaDataMap);
    }

    public createNewIndividualServer_args() {
    }

    public createNewIndividualServer_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewIndividualServer_args(createNewIndividualServer_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public createNewIndividualServer_args deepCopy() {
      return new createNewIndividualServer_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public createNewIndividualServer_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewIndividualServer_args)
        return this.equals((createNewIndividualServer_args)that);
      return false;
    }

    public boolean equals(createNewIndividualServer_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewIndividualServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewIndividualServer_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewIndividualServer_argsStandardSchemeFactory implements SchemeFactory {
      public createNewIndividualServer_argsStandardScheme getScheme() {
        return new createNewIndividualServer_argsStandardScheme();
      }
    }

    private static class createNewIndividualServer_argsStandardScheme extends StandardScheme<createNewIndividualServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewIndividualServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewIndividualServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewIndividualServer_argsTupleSchemeFactory implements SchemeFactory {
      public createNewIndividualServer_argsTupleScheme getScheme() {
        return new createNewIndividualServer_argsTupleScheme();
      }
    }

    private static class createNewIndividualServer_argsTupleScheme extends TupleScheme<createNewIndividualServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewIndividualServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewIndividualServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class createNewIndividualServer_result implements org.apache.thrift.TBase<createNewIndividualServer_result, createNewIndividualServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<createNewIndividualServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewIndividualServer_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewIndividualServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewIndividualServer_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewIndividualServer_result.class, metaDataMap);
    }

    public createNewIndividualServer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewIndividualServer_result(createNewIndividualServer_result other) {
    }

    public createNewIndividualServer_result deepCopy() {
      return new createNewIndividualServer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewIndividualServer_result)
        return this.equals((createNewIndividualServer_result)that);
      return false;
    }

    public boolean equals(createNewIndividualServer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewIndividualServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewIndividualServer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewIndividualServer_resultStandardSchemeFactory implements SchemeFactory {
      public createNewIndividualServer_resultStandardScheme getScheme() {
        return new createNewIndividualServer_resultStandardScheme();
      }
    }

    private static class createNewIndividualServer_resultStandardScheme extends StandardScheme<createNewIndividualServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewIndividualServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewIndividualServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewIndividualServer_resultTupleSchemeFactory implements SchemeFactory {
      public createNewIndividualServer_resultTupleScheme getScheme() {
        return new createNewIndividualServer_resultTupleScheme();
      }
    }

    private static class createNewIndividualServer_resultTupleScheme extends TupleScheme<createNewIndividualServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewIndividualServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewIndividualServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class terminateSession_args implements org.apache.thrift.TBase<terminateSession_args, terminateSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateSession_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateSession_argsTupleSchemeFactory());
    }

    public String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateSession_args.class, metaDataMap);
    }

    public terminateSession_args() {
    }

    public terminateSession_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateSession_args(terminateSession_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public terminateSession_args deepCopy() {
      return new terminateSession_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public terminateSession_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateSession_args)
        return this.equals((terminateSession_args)that);
      return false;
    }

    public boolean equals(terminateSession_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(terminateSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateSession_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateSession_argsStandardSchemeFactory implements SchemeFactory {
      public terminateSession_argsStandardScheme getScheme() {
        return new terminateSession_argsStandardScheme();
      }
    }

    private static class terminateSession_argsStandardScheme extends StandardScheme<terminateSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateSession_argsTupleSchemeFactory implements SchemeFactory {
      public terminateSession_argsTupleScheme getScheme() {
        return new terminateSession_argsTupleScheme();
      }
    }

    private static class terminateSession_argsTupleScheme extends TupleScheme<terminateSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class terminateSession_result implements org.apache.thrift.TBase<terminateSession_result, terminateSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateSession_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateSession_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateSession_result.class, metaDataMap);
    }

    public terminateSession_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateSession_result(terminateSession_result other) {
    }

    public terminateSession_result deepCopy() {
      return new terminateSession_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateSession_result)
        return this.equals((terminateSession_result)that);
      return false;
    }

    public boolean equals(terminateSession_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(terminateSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateSession_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateSession_resultStandardSchemeFactory implements SchemeFactory {
      public terminateSession_resultStandardScheme getScheme() {
        return new terminateSession_resultStandardScheme();
      }
    }

    private static class terminateSession_resultStandardScheme extends StandardScheme<terminateSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateSession_resultTupleSchemeFactory implements SchemeFactory {
      public terminateSession_resultTupleScheme getScheme() {
        return new terminateSession_resultTupleScheme();
      }
    }

    private static class terminateSession_resultTupleScheme extends TupleScheme<terminateSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class makeRecommendation_args implements org.apache.thrift.TBase<makeRecommendation_args, makeRecommendation_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeRecommendation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeRecommendation_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_RECS_FIELD_DESC = new org.apache.thrift.protocol.TField("numRecs", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField IS_BOOLEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isBoolean", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField DISPLAY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColumns", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeRecommendation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeRecommendation_argsTupleSchemeFactory());
    }

    public String key; // required
    public long userId; // required
    public long numRecs; // required
    public boolean isBoolean; // required
    public List<String> displayColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USER_ID((short)2, "userId"),
      NUM_RECS((short)3, "numRecs"),
      IS_BOOLEAN((short)4, "isBoolean"),
      DISPLAY_COLUMNS((short)5, "displayColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USER_ID
            return USER_ID;
          case 3: // NUM_RECS
            return NUM_RECS;
          case 4: // IS_BOOLEAN
            return IS_BOOLEAN;
          case 5: // DISPLAY_COLUMNS
            return DISPLAY_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __NUMRECS_ISSET_ID = 1;
    private static final int __ISBOOLEAN_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM_RECS, new org.apache.thrift.meta_data.FieldMetaData("numRecs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IS_BOOLEAN, new org.apache.thrift.meta_data.FieldMetaData("isBoolean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.DISPLAY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("displayColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeRecommendation_args.class, metaDataMap);
    }

    public makeRecommendation_args() {
    }

    public makeRecommendation_args(
      String key,
      long userId,
      long numRecs,
      boolean isBoolean,
      List<String> displayColumns)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.isBoolean = isBoolean;
      setIsBooleanIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeRecommendation_args(makeRecommendation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.numRecs = other.numRecs;
      this.isBoolean = other.isBoolean;
      if (other.isSetDisplayColumns()) {
        List<String> __this__displayColumns = new ArrayList<String>(other.displayColumns);
        this.displayColumns = __this__displayColumns;
      }
    }

    public makeRecommendation_args deepCopy() {
      return new makeRecommendation_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      setIsBooleanIsSet(false);
      this.isBoolean = false;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public makeRecommendation_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public makeRecommendation_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public makeRecommendation_args setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      return this;
    }

    public void unsetNumRecs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMRECS_ISSET_ID, value);
    }

    public boolean isIsBoolean() {
      return this.isBoolean;
    }

    public makeRecommendation_args setIsBoolean(boolean isBoolean) {
      this.isBoolean = isBoolean;
      setIsBooleanIsSet(true);
      return this;
    }

    public void unsetIsBoolean() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBOOLEAN_ISSET_ID);
    }

    /** Returns true if field isBoolean is set (has been assigned a value) and false otherwise */
    public boolean isSetIsBoolean() {
      return EncodingUtils.testBit(__isset_bitfield, __ISBOOLEAN_ISSET_ID);
    }

    public void setIsBooleanIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBOOLEAN_ISSET_ID, value);
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public java.util.Iterator<String> getDisplayColumnsIterator() {
      return (this.displayColumns == null) ? null : this.displayColumns.iterator();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new ArrayList<String>();
      }
      this.displayColumns.add(elem);
    }

    public List<String> getDisplayColumns() {
      return this.displayColumns;
    }

    public makeRecommendation_args setDisplayColumns(List<String> displayColumns) {
      this.displayColumns = displayColumns;
      return this;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case NUM_RECS:
        if (value == null) {
          unsetNumRecs();
        } else {
          setNumRecs((Long)value);
        }
        break;

      case IS_BOOLEAN:
        if (value == null) {
          unsetIsBoolean();
        } else {
          setIsBoolean((Boolean)value);
        }
        break;

      case DISPLAY_COLUMNS:
        if (value == null) {
          unsetDisplayColumns();
        } else {
          setDisplayColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USER_ID:
        return Long.valueOf(getUserId());

      case NUM_RECS:
        return Long.valueOf(getNumRecs());

      case IS_BOOLEAN:
        return Boolean.valueOf(isIsBoolean());

      case DISPLAY_COLUMNS:
        return getDisplayColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USER_ID:
        return isSetUserId();
      case NUM_RECS:
        return isSetNumRecs();
      case IS_BOOLEAN:
        return isSetIsBoolean();
      case DISPLAY_COLUMNS:
        return isSetDisplayColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeRecommendation_args)
        return this.equals((makeRecommendation_args)that);
      return false;
    }

    public boolean equals(makeRecommendation_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_isBoolean = true;
      boolean that_present_isBoolean = true;
      if (this_present_isBoolean || that_present_isBoolean) {
        if (!(this_present_isBoolean && that_present_isBoolean))
          return false;
        if (this.isBoolean != that.isBoolean)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_numRecs = true;
      list.add(present_numRecs);
      if (present_numRecs)
        list.add(numRecs);

      boolean present_isBoolean = true;
      list.add(present_isBoolean);
      if (present_isBoolean)
        list.add(isBoolean);

      boolean present_displayColumns = true && (isSetDisplayColumns());
      list.add(present_displayColumns);
      if (present_displayColumns)
        list.add(displayColumns);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeRecommendation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumRecs()).compareTo(other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsBoolean()).compareTo(other.isSetIsBoolean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsBoolean()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBoolean, other.isBoolean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayColumns()).compareTo(other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeRecommendation_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isBoolean:");
      sb.append(this.isBoolean);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeRecommendation_argsStandardSchemeFactory implements SchemeFactory {
      public makeRecommendation_argsStandardScheme getScheme() {
        return new makeRecommendation_argsStandardScheme();
      }
    }

    private static class makeRecommendation_argsStandardScheme extends StandardScheme<makeRecommendation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeRecommendation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_RECS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numRecs = iprot.readI64();
                struct.setNumRecsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_BOOLEAN
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isBoolean = iprot.readBool();
                struct.setIsBooleanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DISPLAY_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.displayColumns = new ArrayList<String>(_list28.size);
                  String _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = iprot.readString();
                    struct.displayColumns.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setDisplayColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeRecommendation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
        oprot.writeI64(struct.numRecs);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_BOOLEAN_FIELD_DESC);
        oprot.writeBool(struct.isBoolean);
        oprot.writeFieldEnd();
        if (struct.displayColumns != null) {
          oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.displayColumns.size()));
            for (String _iter31 : struct.displayColumns)
            {
              oprot.writeString(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeRecommendation_argsTupleSchemeFactory implements SchemeFactory {
      public makeRecommendation_argsTupleScheme getScheme() {
        return new makeRecommendation_argsTupleScheme();
      }
    }

    private static class makeRecommendation_argsTupleScheme extends TupleScheme<makeRecommendation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetNumRecs()) {
          optionals.set(2);
        }
        if (struct.isSetIsBoolean()) {
          optionals.set(3);
        }
        if (struct.isSetDisplayColumns()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetNumRecs()) {
          oprot.writeI64(struct.numRecs);
        }
        if (struct.isSetIsBoolean()) {
          oprot.writeBool(struct.isBoolean);
        }
        if (struct.isSetDisplayColumns()) {
          {
            oprot.writeI32(struct.displayColumns.size());
            for (String _iter32 : struct.displayColumns)
            {
              oprot.writeString(_iter32);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numRecs = iprot.readI64();
          struct.setNumRecsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isBoolean = iprot.readBool();
          struct.setIsBooleanIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.displayColumns = new ArrayList<String>(_list33.size);
            String _elem34;
            for (int _i35 = 0; _i35 < _list33.size; ++_i35)
            {
              _elem34 = iprot.readString();
              struct.displayColumns.add(_elem34);
            }
          }
          struct.setDisplayColumnsIsSet(true);
        }
      }
    }

  }

  public static class makeRecommendation_result implements org.apache.thrift.TBase<makeRecommendation_result, makeRecommendation_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeRecommendation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeRecommendation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeRecommendation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeRecommendation_resultTupleSchemeFactory());
    }

    public List<Item> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeRecommendation_result.class, metaDataMap);
    }

    public makeRecommendation_result() {
    }

    public makeRecommendation_result(
      List<Item> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeRecommendation_result(makeRecommendation_result other) {
      if (other.isSetSuccess()) {
        List<Item> __this__success = new ArrayList<Item>(other.success.size());
        for (Item other_element : other.success) {
          __this__success.add(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public makeRecommendation_result deepCopy() {
      return new makeRecommendation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Item> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new ArrayList<Item>();
      }
      this.success.add(elem);
    }

    public List<Item> getSuccess() {
      return this.success;
    }

    public makeRecommendation_result setSuccess(List<Item> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Item>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeRecommendation_result)
        return this.equals((makeRecommendation_result)that);
      return false;
    }

    public boolean equals(makeRecommendation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeRecommendation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeRecommendation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeRecommendation_resultStandardSchemeFactory implements SchemeFactory {
      public makeRecommendation_resultStandardScheme getScheme() {
        return new makeRecommendation_resultStandardScheme();
      }
    }

    private static class makeRecommendation_resultStandardScheme extends StandardScheme<makeRecommendation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeRecommendation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.success = new ArrayList<Item>(_list36.size);
                  Item _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    _elem37 = new Item();
                    _elem37.read(iprot);
                    struct.success.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeRecommendation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Item _iter39 : struct.success)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeRecommendation_resultTupleSchemeFactory implements SchemeFactory {
      public makeRecommendation_resultTupleScheme getScheme() {
        return new makeRecommendation_resultTupleScheme();
      }
    }

    private static class makeRecommendation_resultTupleScheme extends TupleScheme<makeRecommendation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Item _iter40 : struct.success)
            {
              _iter40.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Item>(_list41.size);
            Item _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = new Item();
              _elem42.read(iprot);
              struct.success.add(_elem42);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class makeItemBasedRecommendations_args implements org.apache.thrift.TBase<makeItemBasedRecommendations_args, makeItemBasedRecommendations_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeItemBasedRecommendations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeItemBasedRecommendations_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_RECS_FIELD_DESC = new org.apache.thrift.protocol.TField("numRecs", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField DISPLAY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColumns", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeItemBasedRecommendations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeItemBasedRecommendations_argsTupleSchemeFactory());
    }

    public String key; // required
    public long userId; // required
    public long numRecs; // required
    public List<String> displayColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USER_ID((short)2, "userId"),
      NUM_RECS((short)3, "numRecs"),
      DISPLAY_COLUMNS((short)4, "displayColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USER_ID
            return USER_ID;
          case 3: // NUM_RECS
            return NUM_RECS;
          case 4: // DISPLAY_COLUMNS
            return DISPLAY_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __NUMRECS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM_RECS, new org.apache.thrift.meta_data.FieldMetaData("numRecs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DISPLAY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("displayColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeItemBasedRecommendations_args.class, metaDataMap);
    }

    public makeItemBasedRecommendations_args() {
    }

    public makeItemBasedRecommendations_args(
      String key,
      long userId,
      long numRecs,
      List<String> displayColumns)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeItemBasedRecommendations_args(makeItemBasedRecommendations_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.numRecs = other.numRecs;
      if (other.isSetDisplayColumns()) {
        List<String> __this__displayColumns = new ArrayList<String>(other.displayColumns);
        this.displayColumns = __this__displayColumns;
      }
    }

    public makeItemBasedRecommendations_args deepCopy() {
      return new makeItemBasedRecommendations_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public makeItemBasedRecommendations_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public makeItemBasedRecommendations_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public makeItemBasedRecommendations_args setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      return this;
    }

    public void unsetNumRecs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMRECS_ISSET_ID, value);
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public java.util.Iterator<String> getDisplayColumnsIterator() {
      return (this.displayColumns == null) ? null : this.displayColumns.iterator();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new ArrayList<String>();
      }
      this.displayColumns.add(elem);
    }

    public List<String> getDisplayColumns() {
      return this.displayColumns;
    }

    public makeItemBasedRecommendations_args setDisplayColumns(List<String> displayColumns) {
      this.displayColumns = displayColumns;
      return this;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case NUM_RECS:
        if (value == null) {
          unsetNumRecs();
        } else {
          setNumRecs((Long)value);
        }
        break;

      case DISPLAY_COLUMNS:
        if (value == null) {
          unsetDisplayColumns();
        } else {
          setDisplayColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USER_ID:
        return Long.valueOf(getUserId());

      case NUM_RECS:
        return Long.valueOf(getNumRecs());

      case DISPLAY_COLUMNS:
        return getDisplayColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USER_ID:
        return isSetUserId();
      case NUM_RECS:
        return isSetNumRecs();
      case DISPLAY_COLUMNS:
        return isSetDisplayColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeItemBasedRecommendations_args)
        return this.equals((makeItemBasedRecommendations_args)that);
      return false;
    }

    public boolean equals(makeItemBasedRecommendations_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_numRecs = true;
      list.add(present_numRecs);
      if (present_numRecs)
        list.add(numRecs);

      boolean present_displayColumns = true && (isSetDisplayColumns());
      list.add(present_displayColumns);
      if (present_displayColumns)
        list.add(displayColumns);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeItemBasedRecommendations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumRecs()).compareTo(other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayColumns()).compareTo(other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeItemBasedRecommendations_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeItemBasedRecommendations_argsStandardSchemeFactory implements SchemeFactory {
      public makeItemBasedRecommendations_argsStandardScheme getScheme() {
        return new makeItemBasedRecommendations_argsStandardScheme();
      }
    }

    private static class makeItemBasedRecommendations_argsStandardScheme extends StandardScheme<makeItemBasedRecommendations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeItemBasedRecommendations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_RECS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numRecs = iprot.readI64();
                struct.setNumRecsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DISPLAY_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.displayColumns = new ArrayList<String>(_list44.size);
                  String _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = iprot.readString();
                    struct.displayColumns.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setDisplayColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeItemBasedRecommendations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
        oprot.writeI64(struct.numRecs);
        oprot.writeFieldEnd();
        if (struct.displayColumns != null) {
          oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.displayColumns.size()));
            for (String _iter47 : struct.displayColumns)
            {
              oprot.writeString(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeItemBasedRecommendations_argsTupleSchemeFactory implements SchemeFactory {
      public makeItemBasedRecommendations_argsTupleScheme getScheme() {
        return new makeItemBasedRecommendations_argsTupleScheme();
      }
    }

    private static class makeItemBasedRecommendations_argsTupleScheme extends TupleScheme<makeItemBasedRecommendations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeItemBasedRecommendations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetNumRecs()) {
          optionals.set(2);
        }
        if (struct.isSetDisplayColumns()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetNumRecs()) {
          oprot.writeI64(struct.numRecs);
        }
        if (struct.isSetDisplayColumns()) {
          {
            oprot.writeI32(struct.displayColumns.size());
            for (String _iter48 : struct.displayColumns)
            {
              oprot.writeString(_iter48);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeItemBasedRecommendations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numRecs = iprot.readI64();
          struct.setNumRecsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.displayColumns = new ArrayList<String>(_list49.size);
            String _elem50;
            for (int _i51 = 0; _i51 < _list49.size; ++_i51)
            {
              _elem50 = iprot.readString();
              struct.displayColumns.add(_elem50);
            }
          }
          struct.setDisplayColumnsIsSet(true);
        }
      }
    }

  }

  public static class makeItemBasedRecommendations_result implements org.apache.thrift.TBase<makeItemBasedRecommendations_result, makeItemBasedRecommendations_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeItemBasedRecommendations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeItemBasedRecommendations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeItemBasedRecommendations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeItemBasedRecommendations_resultTupleSchemeFactory());
    }

    public List<Item> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeItemBasedRecommendations_result.class, metaDataMap);
    }

    public makeItemBasedRecommendations_result() {
    }

    public makeItemBasedRecommendations_result(
      List<Item> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeItemBasedRecommendations_result(makeItemBasedRecommendations_result other) {
      if (other.isSetSuccess()) {
        List<Item> __this__success = new ArrayList<Item>(other.success.size());
        for (Item other_element : other.success) {
          __this__success.add(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public makeItemBasedRecommendations_result deepCopy() {
      return new makeItemBasedRecommendations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Item> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new ArrayList<Item>();
      }
      this.success.add(elem);
    }

    public List<Item> getSuccess() {
      return this.success;
    }

    public makeItemBasedRecommendations_result setSuccess(List<Item> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Item>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeItemBasedRecommendations_result)
        return this.equals((makeItemBasedRecommendations_result)that);
      return false;
    }

    public boolean equals(makeItemBasedRecommendations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeItemBasedRecommendations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeItemBasedRecommendations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeItemBasedRecommendations_resultStandardSchemeFactory implements SchemeFactory {
      public makeItemBasedRecommendations_resultStandardScheme getScheme() {
        return new makeItemBasedRecommendations_resultStandardScheme();
      }
    }

    private static class makeItemBasedRecommendations_resultStandardScheme extends StandardScheme<makeItemBasedRecommendations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeItemBasedRecommendations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                  struct.success = new ArrayList<Item>(_list52.size);
                  Item _elem53;
                  for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                  {
                    _elem53 = new Item();
                    _elem53.read(iprot);
                    struct.success.add(_elem53);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeItemBasedRecommendations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Item _iter55 : struct.success)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeItemBasedRecommendations_resultTupleSchemeFactory implements SchemeFactory {
      public makeItemBasedRecommendations_resultTupleScheme getScheme() {
        return new makeItemBasedRecommendations_resultTupleScheme();
      }
    }

    private static class makeItemBasedRecommendations_resultTupleScheme extends TupleScheme<makeItemBasedRecommendations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeItemBasedRecommendations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Item _iter56 : struct.success)
            {
              _iter56.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeItemBasedRecommendations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Item>(_list57.size);
            Item _elem58;
            for (int _i59 = 0; _i59 < _list57.size; ++_i59)
            {
              _elem58 = new Item();
              _elem58.read(iprot);
              struct.success.add(_elem58);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPageItems_args implements org.apache.thrift.TBase<getPageItems_args, getPageItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPageItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPageItems_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("numPerPage", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField DISPLAY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColumns", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPageItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPageItems_argsTupleSchemeFactory());
    }

    public String key; // required
    public long page; // required
    public long numPerPage; // required
    public List<String> displayColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      PAGE((short)2, "page"),
      NUM_PER_PAGE((short)3, "numPerPage"),
      DISPLAY_COLUMNS((short)4, "displayColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // PAGE
            return PAGE;
          case 3: // NUM_PER_PAGE
            return NUM_PER_PAGE;
          case 4: // DISPLAY_COLUMNS
            return DISPLAY_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __NUMPERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("numPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DISPLAY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("displayColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPageItems_args.class, metaDataMap);
    }

    public getPageItems_args() {
    }

    public getPageItems_args(
      String key,
      long page,
      long numPerPage,
      List<String> displayColumns)
    {
      this();
      this.key = key;
      this.page = page;
      setPageIsSet(true);
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPageItems_args(getPageItems_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.page = other.page;
      this.numPerPage = other.numPerPage;
      if (other.isSetDisplayColumns()) {
        List<String> __this__displayColumns = new ArrayList<String>(other.displayColumns);
        this.displayColumns = __this__displayColumns;
      }
    }

    public getPageItems_args deepCopy() {
      return new getPageItems_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setPageIsSet(false);
      this.page = 0;
      setNumPerPageIsSet(false);
      this.numPerPage = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public getPageItems_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getPage() {
      return this.page;
    }

    public getPageItems_args setPage(long page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public long getNumPerPage() {
      return this.numPerPage;
    }

    public getPageItems_args setNumPerPage(long numPerPage) {
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
      return this;
    }

    public void unsetNumPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    public void setNumPerPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID, value);
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public java.util.Iterator<String> getDisplayColumnsIterator() {
      return (this.displayColumns == null) ? null : this.displayColumns.iterator();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new ArrayList<String>();
      }
      this.displayColumns.add(elem);
    }

    public List<String> getDisplayColumns() {
      return this.displayColumns;
    }

    public getPageItems_args setDisplayColumns(List<String> displayColumns) {
      this.displayColumns = displayColumns;
      return this;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Long)value);
        }
        break;

      case NUM_PER_PAGE:
        if (value == null) {
          unsetNumPerPage();
        } else {
          setNumPerPage((Long)value);
        }
        break;

      case DISPLAY_COLUMNS:
        if (value == null) {
          unsetDisplayColumns();
        } else {
          setDisplayColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case PAGE:
        return Long.valueOf(getPage());

      case NUM_PER_PAGE:
        return Long.valueOf(getNumPerPage());

      case DISPLAY_COLUMNS:
        return getDisplayColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case PAGE:
        return isSetPage();
      case NUM_PER_PAGE:
        return isSetNumPerPage();
      case DISPLAY_COLUMNS:
        return isSetDisplayColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPageItems_args)
        return this.equals((getPageItems_args)that);
      return false;
    }

    public boolean equals(getPageItems_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_page = true;
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_numPerPage = true;
      list.add(present_numPerPage);
      if (present_numPerPage)
        list.add(numPerPage);

      boolean present_displayColumns = true && (isSetDisplayColumns());
      list.add(present_displayColumns);
      if (present_displayColumns)
        list.add(displayColumns);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPageItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumPerPage()).compareTo(other.isSetNumPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayColumns()).compareTo(other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPageItems_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPageItems_argsStandardSchemeFactory implements SchemeFactory {
      public getPageItems_argsStandardScheme getScheme() {
        return new getPageItems_argsStandardScheme();
      }
    }

    private static class getPageItems_argsStandardScheme extends StandardScheme<getPageItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPageItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.page = iprot.readI64();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numPerPage = iprot.readI64();
                struct.setNumPerPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DISPLAY_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.displayColumns = new ArrayList<String>(_list60.size);
                  String _elem61;
                  for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                  {
                    _elem61 = iprot.readString();
                    struct.displayColumns.add(_elem61);
                  }
                  iprot.readListEnd();
                }
                struct.setDisplayColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPageItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI64(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
        oprot.writeI64(struct.numPerPage);
        oprot.writeFieldEnd();
        if (struct.displayColumns != null) {
          oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.displayColumns.size()));
            for (String _iter63 : struct.displayColumns)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPageItems_argsTupleSchemeFactory implements SchemeFactory {
      public getPageItems_argsTupleScheme getScheme() {
        return new getPageItems_argsTupleScheme();
      }
    }

    private static class getPageItems_argsTupleScheme extends TupleScheme<getPageItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPageItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetNumPerPage()) {
          optionals.set(2);
        }
        if (struct.isSetDisplayColumns()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetPage()) {
          oprot.writeI64(struct.page);
        }
        if (struct.isSetNumPerPage()) {
          oprot.writeI64(struct.numPerPage);
        }
        if (struct.isSetDisplayColumns()) {
          {
            oprot.writeI32(struct.displayColumns.size());
            for (String _iter64 : struct.displayColumns)
            {
              oprot.writeString(_iter64);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPageItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI64();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numPerPage = iprot.readI64();
          struct.setNumPerPageIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.displayColumns = new ArrayList<String>(_list65.size);
            String _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = iprot.readString();
              struct.displayColumns.add(_elem66);
            }
          }
          struct.setDisplayColumnsIsSet(true);
        }
      }
    }

  }

  public static class getPageItems_result implements org.apache.thrift.TBase<getPageItems_result, getPageItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPageItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPageItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPageItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPageItems_resultTupleSchemeFactory());
    }

    public List<Item> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPageItems_result.class, metaDataMap);
    }

    public getPageItems_result() {
    }

    public getPageItems_result(
      List<Item> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPageItems_result(getPageItems_result other) {
      if (other.isSetSuccess()) {
        List<Item> __this__success = new ArrayList<Item>(other.success.size());
        for (Item other_element : other.success) {
          __this__success.add(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPageItems_result deepCopy() {
      return new getPageItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Item> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new ArrayList<Item>();
      }
      this.success.add(elem);
    }

    public List<Item> getSuccess() {
      return this.success;
    }

    public getPageItems_result setSuccess(List<Item> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Item>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPageItems_result)
        return this.equals((getPageItems_result)that);
      return false;
    }

    public boolean equals(getPageItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPageItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPageItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPageItems_resultStandardSchemeFactory implements SchemeFactory {
      public getPageItems_resultStandardScheme getScheme() {
        return new getPageItems_resultStandardScheme();
      }
    }

    private static class getPageItems_resultStandardScheme extends StandardScheme<getPageItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPageItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.success = new ArrayList<Item>(_list68.size);
                  Item _elem69;
                  for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                  {
                    _elem69 = new Item();
                    _elem69.read(iprot);
                    struct.success.add(_elem69);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPageItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Item _iter71 : struct.success)
            {
              _iter71.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPageItems_resultTupleSchemeFactory implements SchemeFactory {
      public getPageItems_resultTupleScheme getScheme() {
        return new getPageItems_resultTupleScheme();
      }
    }

    private static class getPageItems_resultTupleScheme extends TupleScheme<getPageItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPageItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Item _iter72 : struct.success)
            {
              _iter72.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPageItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Item>(_list73.size);
            Item _elem74;
            for (int _i75 = 0; _i75 < _list73.size; ++_i75)
            {
              _elem74 = new Item();
              _elem74.read(iprot);
              struct.success.add(_elem74);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getItemCount_args implements org.apache.thrift.TBase<getItemCount_args, getItemCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getItemCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItemCount_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getItemCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getItemCount_argsTupleSchemeFactory());
    }

    public String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemCount_args.class, metaDataMap);
    }

    public getItemCount_args() {
    }

    public getItemCount_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemCount_args(getItemCount_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public getItemCount_args deepCopy() {
      return new getItemCount_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public getItemCount_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemCount_args)
        return this.equals((getItemCount_args)that);
      return false;
    }

    public boolean equals(getItemCount_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(getItemCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getItemCount_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItemCount_argsStandardSchemeFactory implements SchemeFactory {
      public getItemCount_argsStandardScheme getScheme() {
        return new getItemCount_argsStandardScheme();
      }
    }

    private static class getItemCount_argsStandardScheme extends StandardScheme<getItemCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItemCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItemCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItemCount_argsTupleSchemeFactory implements SchemeFactory {
      public getItemCount_argsTupleScheme getScheme() {
        return new getItemCount_argsTupleScheme();
      }
    }

    private static class getItemCount_argsTupleScheme extends TupleScheme<getItemCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItemCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItemCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class getItemCount_result implements org.apache.thrift.TBase<getItemCount_result, getItemCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getItemCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItemCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getItemCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getItemCount_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemCount_result.class, metaDataMap);
    }

    public getItemCount_result() {
    }

    public getItemCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemCount_result(getItemCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getItemCount_result deepCopy() {
      return new getItemCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getItemCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemCount_result)
        return this.equals((getItemCount_result)that);
      return false;
    }

    public boolean equals(getItemCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getItemCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getItemCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItemCount_resultStandardSchemeFactory implements SchemeFactory {
      public getItemCount_resultStandardScheme getScheme() {
        return new getItemCount_resultStandardScheme();
      }
    }

    private static class getItemCount_resultStandardScheme extends StandardScheme<getItemCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItemCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItemCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItemCount_resultTupleSchemeFactory implements SchemeFactory {
      public getItemCount_resultTupleScheme getScheme() {
        return new getItemCount_resultTupleScheme();
      }
    }

    private static class getItemCount_resultTupleScheme extends TupleScheme<getItemCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItemCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItemCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class recordRatings_args implements org.apache.thrift.TBase<recordRatings_args, recordRatings_args._Fields>, java.io.Serializable, Cloneable, Comparable<recordRatings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recordRatings_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recordRatings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recordRatings_argsTupleSchemeFactory());
    }

    public String key; // required
    public long userId; // required
    public long itemId; // required
    public long rating; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USER_ID((short)2, "userId"),
      ITEM_ID((short)3, "itemId"),
      RATING((short)4, "rating");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USER_ID
            return USER_ID;
          case 3: // ITEM_ID
            return ITEM_ID;
          case 4: // RATING
            return RATING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ITEMID_ISSET_ID = 1;
    private static final int __RATING_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recordRatings_args.class, metaDataMap);
    }

    public recordRatings_args() {
    }

    public recordRatings_args(
      String key,
      long userId,
      long itemId,
      long rating)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.itemId = itemId;
      setItemIdIsSet(true);
      this.rating = rating;
      setRatingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordRatings_args(recordRatings_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.itemId = other.itemId;
      this.rating = other.rating;
    }

    public recordRatings_args deepCopy() {
      return new recordRatings_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setItemIdIsSet(false);
      this.itemId = 0;
      setRatingIsSet(false);
      this.rating = 0;
    }

    public String getKey() {
      return this.key;
    }

    public recordRatings_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public recordRatings_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public long getItemId() {
      return this.itemId;
    }

    public recordRatings_args setItemId(long itemId) {
      this.itemId = itemId;
      setItemIdIsSet(true);
      return this;
    }

    public void unsetItemId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
    }

    public void setItemIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
    }

    public long getRating() {
      return this.rating;
    }

    public recordRatings_args setRating(long rating) {
      this.rating = rating;
      setRatingIsSet(true);
      return this;
    }

    public void unsetRating() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATING_ISSET_ID);
    }

    /** Returns true if field rating is set (has been assigned a value) and false otherwise */
    public boolean isSetRating() {
      return EncodingUtils.testBit(__isset_bitfield, __RATING_ISSET_ID);
    }

    public void setRatingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((Long)value);
        }
        break;

      case RATING:
        if (value == null) {
          unsetRating();
        } else {
          setRating((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USER_ID:
        return Long.valueOf(getUserId());

      case ITEM_ID:
        return Long.valueOf(getItemId());

      case RATING:
        return Long.valueOf(getRating());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USER_ID:
        return isSetUserId();
      case ITEM_ID:
        return isSetItemId();
      case RATING:
        return isSetRating();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordRatings_args)
        return this.equals((recordRatings_args)that);
      return false;
    }

    public boolean equals(recordRatings_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_itemId = true;
      boolean that_present_itemId = true;
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (this.itemId != that.itemId)
          return false;
      }

      boolean this_present_rating = true;
      boolean that_present_rating = true;
      if (this_present_rating || that_present_rating) {
        if (!(this_present_rating && that_present_rating))
          return false;
        if (this.rating != that.rating)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_itemId = true;
      list.add(present_itemId);
      if (present_itemId)
        list.add(itemId);

      boolean present_rating = true;
      list.add(present_rating);
      if (present_rating)
        list.add(rating);

      return list.hashCode();
    }

    @Override
    public int compareTo(recordRatings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRating()).compareTo(other.isSetRating());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRating()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, other.rating);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recordRatings_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rating:");
      sb.append(this.rating);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recordRatings_argsStandardSchemeFactory implements SchemeFactory {
      public recordRatings_argsStandardScheme getScheme() {
        return new recordRatings_argsStandardScheme();
      }
    }

    private static class recordRatings_argsStandardScheme extends StandardScheme<recordRatings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recordRatings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.itemId = iprot.readI64();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RATING
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rating = iprot.readI64();
                struct.setRatingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recordRatings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.itemId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RATING_FIELD_DESC);
        oprot.writeI64(struct.rating);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recordRatings_argsTupleSchemeFactory implements SchemeFactory {
      public recordRatings_argsTupleScheme getScheme() {
        return new recordRatings_argsTupleScheme();
      }
    }

    private static class recordRatings_argsTupleScheme extends TupleScheme<recordRatings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recordRatings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetItemId()) {
          optionals.set(2);
        }
        if (struct.isSetRating()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetItemId()) {
          oprot.writeI64(struct.itemId);
        }
        if (struct.isSetRating()) {
          oprot.writeI64(struct.rating);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recordRatings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemId = iprot.readI64();
          struct.setItemIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.rating = iprot.readI64();
          struct.setRatingIsSet(true);
        }
      }
    }

  }

  public static class recordRatings_result implements org.apache.thrift.TBase<recordRatings_result, recordRatings_result._Fields>, java.io.Serializable, Cloneable, Comparable<recordRatings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recordRatings_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recordRatings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recordRatings_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recordRatings_result.class, metaDataMap);
    }

    public recordRatings_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordRatings_result(recordRatings_result other) {
    }

    public recordRatings_result deepCopy() {
      return new recordRatings_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordRatings_result)
        return this.equals((recordRatings_result)that);
      return false;
    }

    public boolean equals(recordRatings_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(recordRatings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recordRatings_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recordRatings_resultStandardSchemeFactory implements SchemeFactory {
      public recordRatings_resultStandardScheme getScheme() {
        return new recordRatings_resultStandardScheme();
      }
    }

    private static class recordRatings_resultStandardScheme extends StandardScheme<recordRatings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recordRatings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recordRatings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recordRatings_resultTupleSchemeFactory implements SchemeFactory {
      public recordRatings_resultTupleScheme getScheme() {
        return new recordRatings_resultTupleScheme();
      }
    }

    private static class recordRatings_resultTupleScheme extends TupleScheme<recordRatings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recordRatings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recordRatings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteRatings_args implements org.apache.thrift.TBase<deleteRatings_args, deleteRatings_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRatings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRatings_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRatings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRatings_argsTupleSchemeFactory());
    }

    public String key; // required
    public long userId; // required
    public long itemId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USER_ID((short)2, "userId"),
      ITEM_ID((short)3, "itemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USER_ID
            return USER_ID;
          case 3: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ITEMID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRatings_args.class, metaDataMap);
    }

    public deleteRatings_args() {
    }

    public deleteRatings_args(
      String key,
      long userId,
      long itemId)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.itemId = itemId;
      setItemIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRatings_args(deleteRatings_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.itemId = other.itemId;
    }

    public deleteRatings_args deepCopy() {
      return new deleteRatings_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setItemIdIsSet(false);
      this.itemId = 0;
    }

    public String getKey() {
      return this.key;
    }

    public deleteRatings_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public deleteRatings_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public long getItemId() {
      return this.itemId;
    }

    public deleteRatings_args setItemId(long itemId) {
      this.itemId = itemId;
      setItemIdIsSet(true);
      return this;
    }

    public void unsetItemId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
    }

    public void setItemIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USER_ID:
        return Long.valueOf(getUserId());

      case ITEM_ID:
        return Long.valueOf(getItemId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USER_ID:
        return isSetUserId();
      case ITEM_ID:
        return isSetItemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRatings_args)
        return this.equals((deleteRatings_args)that);
      return false;
    }

    public boolean equals(deleteRatings_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_itemId = true;
      boolean that_present_itemId = true;
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (this.itemId != that.itemId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_itemId = true;
      list.add(present_itemId);
      if (present_itemId)
        list.add(itemId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRatings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRatings_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRatings_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRatings_argsStandardScheme getScheme() {
        return new deleteRatings_argsStandardScheme();
      }
    }

    private static class deleteRatings_argsStandardScheme extends StandardScheme<deleteRatings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRatings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.itemId = iprot.readI64();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRatings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.itemId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRatings_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRatings_argsTupleScheme getScheme() {
        return new deleteRatings_argsTupleScheme();
      }
    }

    private static class deleteRatings_argsTupleScheme extends TupleScheme<deleteRatings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRatings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetItemId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetItemId()) {
          oprot.writeI64(struct.itemId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRatings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemId = iprot.readI64();
          struct.setItemIdIsSet(true);
        }
      }
    }

  }

  public static class deleteRatings_result implements org.apache.thrift.TBase<deleteRatings_result, deleteRatings_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRatings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRatings_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRatings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRatings_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRatings_result.class, metaDataMap);
    }

    public deleteRatings_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRatings_result(deleteRatings_result other) {
    }

    public deleteRatings_result deepCopy() {
      return new deleteRatings_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRatings_result)
        return this.equals((deleteRatings_result)that);
      return false;
    }

    public boolean equals(deleteRatings_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRatings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRatings_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRatings_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRatings_resultStandardScheme getScheme() {
        return new deleteRatings_resultStandardScheme();
      }
    }

    private static class deleteRatings_resultStandardScheme extends StandardScheme<deleteRatings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRatings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRatings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRatings_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRatings_resultTupleScheme getScheme() {
        return new deleteRatings_resultTupleScheme();
      }
    }

    private static class deleteRatings_resultTupleScheme extends TupleScheme<deleteRatings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRatings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRatings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class createNewUser_args implements org.apache.thrift.TBase<createNewUser_args, createNewUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createNewUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewUser_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ISKIBITZUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("iskibitzuser", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewUser_argsTupleSchemeFactory());
    }

    public String key; // required
    public String username; // required
    public boolean iskibitzuser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USERNAME((short)2, "username"),
      ISKIBITZUSER((short)3, "iskibitzuser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USERNAME
            return USERNAME;
          case 3: // ISKIBITZUSER
            return ISKIBITZUSER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISKIBITZUSER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISKIBITZUSER, new org.apache.thrift.meta_data.FieldMetaData("iskibitzuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewUser_args.class, metaDataMap);
    }

    public createNewUser_args() {
    }

    public createNewUser_args(
      String key,
      String username,
      boolean iskibitzuser)
    {
      this();
      this.key = key;
      this.username = username;
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_args(createNewUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      this.iskibitzuser = other.iskibitzuser;
    }

    public createNewUser_args deepCopy() {
      return new createNewUser_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.username = null;
      setIskibitzuserIsSet(false);
      this.iskibitzuser = false;
    }

    public String getKey() {
      return this.key;
    }

    public createNewUser_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public createNewUser_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean isIskibitzuser() {
      return this.iskibitzuser;
    }

    public createNewUser_args setIskibitzuser(boolean iskibitzuser) {
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
      return this;
    }

    public void unsetIskibitzuser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID);
    }

    /** Returns true if field iskibitzuser is set (has been assigned a value) and false otherwise */
    public boolean isSetIskibitzuser() {
      return EncodingUtils.testBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID);
    }

    public void setIskibitzuserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case ISKIBITZUSER:
        if (value == null) {
          unsetIskibitzuser();
        } else {
          setIskibitzuser((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USERNAME:
        return getUsername();

      case ISKIBITZUSER:
        return Boolean.valueOf(isIskibitzuser());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USERNAME:
        return isSetUsername();
      case ISKIBITZUSER:
        return isSetIskibitzuser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_args)
        return this.equals((createNewUser_args)that);
      return false;
    }

    public boolean equals(createNewUser_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_iskibitzuser = true;
      boolean that_present_iskibitzuser = true;
      if (this_present_iskibitzuser || that_present_iskibitzuser) {
        if (!(this_present_iskibitzuser && that_present_iskibitzuser))
          return false;
        if (this.iskibitzuser != that.iskibitzuser)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_iskibitzuser = true;
      list.add(present_iskibitzuser);
      if (present_iskibitzuser)
        list.add(iskibitzuser);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIskibitzuser()).compareTo(other.isSetIskibitzuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIskibitzuser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iskibitzuser, other.iskibitzuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewUser_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iskibitzuser:");
      sb.append(this.iskibitzuser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewUser_argsStandardSchemeFactory implements SchemeFactory {
      public createNewUser_argsStandardScheme getScheme() {
        return new createNewUser_argsStandardScheme();
      }
    }

    private static class createNewUser_argsStandardScheme extends StandardScheme<createNewUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISKIBITZUSER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.iskibitzuser = iprot.readBool();
                struct.setIskibitzuserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISKIBITZUSER_FIELD_DESC);
        oprot.writeBool(struct.iskibitzuser);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewUser_argsTupleSchemeFactory implements SchemeFactory {
      public createNewUser_argsTupleScheme getScheme() {
        return new createNewUser_argsTupleScheme();
      }
    }

    private static class createNewUser_argsTupleScheme extends TupleScheme<createNewUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetIskibitzuser()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetIskibitzuser()) {
          oprot.writeBool(struct.iskibitzuser);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iskibitzuser = iprot.readBool();
          struct.setIskibitzuserIsSet(true);
        }
      }
    }

  }

  public static class createNewUser_result implements org.apache.thrift.TBase<createNewUser_result, createNewUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createNewUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewUser_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewUser_result.class, metaDataMap);
    }

    public createNewUser_result() {
    }

    public createNewUser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_result(createNewUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createNewUser_result deepCopy() {
      return new createNewUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createNewUser_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_result)
        return this.equals((createNewUser_result)that);
      return false;
    }

    public boolean equals(createNewUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewUser_resultStandardSchemeFactory implements SchemeFactory {
      public createNewUser_resultStandardScheme getScheme() {
        return new createNewUser_resultStandardScheme();
      }
    }

    private static class createNewUser_resultStandardScheme extends StandardScheme<createNewUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewUser_resultTupleSchemeFactory implements SchemeFactory {
      public createNewUser_resultTupleScheme getScheme() {
        return new createNewUser_resultTupleScheme();
      }
    }

    private static class createNewUser_resultTupleScheme extends TupleScheme<createNewUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkUsername_args implements org.apache.thrift.TBase<checkUsername_args, checkUsername_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUsername_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUsername_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ISKIBITZUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("iskibitzuser", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUsername_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUsername_argsTupleSchemeFactory());
    }

    public String key; // required
    public String username; // required
    public boolean iskibitzuser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USERNAME((short)2, "username"),
      ISKIBITZUSER((short)3, "iskibitzuser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USERNAME
            return USERNAME;
          case 3: // ISKIBITZUSER
            return ISKIBITZUSER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISKIBITZUSER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISKIBITZUSER, new org.apache.thrift.meta_data.FieldMetaData("iskibitzuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUsername_args.class, metaDataMap);
    }

    public checkUsername_args() {
    }

    public checkUsername_args(
      String key,
      String username,
      boolean iskibitzuser)
    {
      this();
      this.key = key;
      this.username = username;
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsername_args(checkUsername_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      this.iskibitzuser = other.iskibitzuser;
    }

    public checkUsername_args deepCopy() {
      return new checkUsername_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.username = null;
      setIskibitzuserIsSet(false);
      this.iskibitzuser = false;
    }

    public String getKey() {
      return this.key;
    }

    public checkUsername_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public checkUsername_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean isIskibitzuser() {
      return this.iskibitzuser;
    }

    public checkUsername_args setIskibitzuser(boolean iskibitzuser) {
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
      return this;
    }

    public void unsetIskibitzuser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID);
    }

    /** Returns true if field iskibitzuser is set (has been assigned a value) and false otherwise */
    public boolean isSetIskibitzuser() {
      return EncodingUtils.testBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID);
    }

    public void setIskibitzuserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case ISKIBITZUSER:
        if (value == null) {
          unsetIskibitzuser();
        } else {
          setIskibitzuser((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USERNAME:
        return getUsername();

      case ISKIBITZUSER:
        return Boolean.valueOf(isIskibitzuser());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USERNAME:
        return isSetUsername();
      case ISKIBITZUSER:
        return isSetIskibitzuser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsername_args)
        return this.equals((checkUsername_args)that);
      return false;
    }

    public boolean equals(checkUsername_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_iskibitzuser = true;
      boolean that_present_iskibitzuser = true;
      if (this_present_iskibitzuser || that_present_iskibitzuser) {
        if (!(this_present_iskibitzuser && that_present_iskibitzuser))
          return false;
        if (this.iskibitzuser != that.iskibitzuser)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_iskibitzuser = true;
      list.add(present_iskibitzuser);
      if (present_iskibitzuser)
        list.add(iskibitzuser);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkUsername_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIskibitzuser()).compareTo(other.isSetIskibitzuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIskibitzuser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iskibitzuser, other.iskibitzuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUsername_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iskibitzuser:");
      sb.append(this.iskibitzuser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUsername_argsStandardSchemeFactory implements SchemeFactory {
      public checkUsername_argsStandardScheme getScheme() {
        return new checkUsername_argsStandardScheme();
      }
    }

    private static class checkUsername_argsStandardScheme extends StandardScheme<checkUsername_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUsername_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISKIBITZUSER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.iskibitzuser = iprot.readBool();
                struct.setIskibitzuserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUsername_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISKIBITZUSER_FIELD_DESC);
        oprot.writeBool(struct.iskibitzuser);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUsername_argsTupleSchemeFactory implements SchemeFactory {
      public checkUsername_argsTupleScheme getScheme() {
        return new checkUsername_argsTupleScheme();
      }
    }

    private static class checkUsername_argsTupleScheme extends TupleScheme<checkUsername_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUsername_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetIskibitzuser()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetIskibitzuser()) {
          oprot.writeBool(struct.iskibitzuser);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUsername_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iskibitzuser = iprot.readBool();
          struct.setIskibitzuserIsSet(true);
        }
      }
    }

  }

  public static class checkUsername_result implements org.apache.thrift.TBase<checkUsername_result, checkUsername_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUsername_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUsername_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUsername_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUsername_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUsername_result.class, metaDataMap);
    }

    public checkUsername_result() {
    }

    public checkUsername_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsername_result(checkUsername_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkUsername_result deepCopy() {
      return new checkUsername_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkUsername_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsername_result)
        return this.equals((checkUsername_result)that);
      return false;
    }

    public boolean equals(checkUsername_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkUsername_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUsername_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUsername_resultStandardSchemeFactory implements SchemeFactory {
      public checkUsername_resultStandardScheme getScheme() {
        return new checkUsername_resultStandardScheme();
      }
    }

    private static class checkUsername_resultStandardScheme extends StandardScheme<checkUsername_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUsername_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUsername_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUsername_resultTupleSchemeFactory implements SchemeFactory {
      public checkUsername_resultTupleScheme getScheme() {
        return new checkUsername_resultTupleScheme();
      }
    }

    private static class checkUsername_resultTupleScheme extends TupleScheme<checkUsername_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUsername_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUsername_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkLogin_args implements org.apache.thrift.TBase<checkLogin_args, checkLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkLogin_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ISKIBITZUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("iskibitzuser", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkLogin_argsTupleSchemeFactory());
    }

    public String key; // required
    public String username; // required
    public String password; // required
    public boolean iskibitzuser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      ISKIBITZUSER((short)4, "iskibitzuser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // ISKIBITZUSER
            return ISKIBITZUSER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISKIBITZUSER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISKIBITZUSER, new org.apache.thrift.meta_data.FieldMetaData("iskibitzuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkLogin_args.class, metaDataMap);
    }

    public checkLogin_args() {
    }

    public checkLogin_args(
      String key,
      String username,
      String password,
      boolean iskibitzuser)
    {
      this();
      this.key = key;
      this.username = username;
      this.password = password;
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLogin_args(checkLogin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.iskibitzuser = other.iskibitzuser;
    }

    public checkLogin_args deepCopy() {
      return new checkLogin_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.username = null;
      this.password = null;
      setIskibitzuserIsSet(false);
      this.iskibitzuser = false;
    }

    public String getKey() {
      return this.key;
    }

    public checkLogin_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public checkLogin_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public checkLogin_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public boolean isIskibitzuser() {
      return this.iskibitzuser;
    }

    public checkLogin_args setIskibitzuser(boolean iskibitzuser) {
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
      return this;
    }

    public void unsetIskibitzuser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID);
    }

    /** Returns true if field iskibitzuser is set (has been assigned a value) and false otherwise */
    public boolean isSetIskibitzuser() {
      return EncodingUtils.testBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID);
    }

    public void setIskibitzuserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISKIBITZUSER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case ISKIBITZUSER:
        if (value == null) {
          unsetIskibitzuser();
        } else {
          setIskibitzuser((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case ISKIBITZUSER:
        return Boolean.valueOf(isIskibitzuser());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case ISKIBITZUSER:
        return isSetIskibitzuser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLogin_args)
        return this.equals((checkLogin_args)that);
      return false;
    }

    public boolean equals(checkLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_iskibitzuser = true;
      boolean that_present_iskibitzuser = true;
      if (this_present_iskibitzuser || that_present_iskibitzuser) {
        if (!(this_present_iskibitzuser && that_present_iskibitzuser))
          return false;
        if (this.iskibitzuser != that.iskibitzuser)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      boolean present_iskibitzuser = true;
      list.add(present_iskibitzuser);
      if (present_iskibitzuser)
        list.add(iskibitzuser);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIskibitzuser()).compareTo(other.isSetIskibitzuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIskibitzuser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iskibitzuser, other.iskibitzuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkLogin_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iskibitzuser:");
      sb.append(this.iskibitzuser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkLogin_argsStandardSchemeFactory implements SchemeFactory {
      public checkLogin_argsStandardScheme getScheme() {
        return new checkLogin_argsStandardScheme();
      }
    }

    private static class checkLogin_argsStandardScheme extends StandardScheme<checkLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ISKIBITZUSER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.iskibitzuser = iprot.readBool();
                struct.setIskibitzuserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISKIBITZUSER_FIELD_DESC);
        oprot.writeBool(struct.iskibitzuser);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkLogin_argsTupleSchemeFactory implements SchemeFactory {
      public checkLogin_argsTupleScheme getScheme() {
        return new checkLogin_argsTupleScheme();
      }
    }

    private static class checkLogin_argsTupleScheme extends TupleScheme<checkLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetIskibitzuser()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetIskibitzuser()) {
          oprot.writeBool(struct.iskibitzuser);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.iskibitzuser = iprot.readBool();
          struct.setIskibitzuserIsSet(true);
        }
      }
    }

  }

  public static class checkLogin_result implements org.apache.thrift.TBase<checkLogin_result, checkLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkLogin_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkLogin_result.class, metaDataMap);
    }

    public checkLogin_result() {
    }

    public checkLogin_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLogin_result(checkLogin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkLogin_result deepCopy() {
      return new checkLogin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkLogin_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLogin_result)
        return this.equals((checkLogin_result)that);
      return false;
    }

    public boolean equals(checkLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkLogin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkLogin_resultStandardSchemeFactory implements SchemeFactory {
      public checkLogin_resultStandardScheme getScheme() {
        return new checkLogin_resultStandardScheme();
      }
    }

    private static class checkLogin_resultStandardScheme extends StandardScheme<checkLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkLogin_resultTupleSchemeFactory implements SchemeFactory {
      public checkLogin_resultTupleScheme getScheme() {
        return new checkLogin_resultTupleScheme();
      }
    }

    private static class checkLogin_resultTupleScheme extends TupleScheme<checkLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveUserId_args implements org.apache.thrift.TBase<retrieveUserId_args, retrieveUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveUserId_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveUserId_argsTupleSchemeFactory());
    }

    public String key; // required
    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USERNAME((short)2, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveUserId_args.class, metaDataMap);
    }

    public retrieveUserId_args() {
    }

    public retrieveUserId_args(
      String key,
      String username)
    {
      this();
      this.key = key;
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveUserId_args(retrieveUserId_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public retrieveUserId_args deepCopy() {
      return new retrieveUserId_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.username = null;
    }

    public String getKey() {
      return this.key;
    }

    public retrieveUserId_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public retrieveUserId_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveUserId_args)
        return this.equals((retrieveUserId_args)that);
      return false;
    }

    public boolean equals(retrieveUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveUserId_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveUserId_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveUserId_argsStandardScheme getScheme() {
        return new retrieveUserId_argsStandardScheme();
      }
    }

    private static class retrieveUserId_argsStandardScheme extends StandardScheme<retrieveUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveUserId_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveUserId_argsTupleScheme getScheme() {
        return new retrieveUserId_argsTupleScheme();
      }
    }

    private static class retrieveUserId_argsTupleScheme extends TupleScheme<retrieveUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class retrieveUserId_result implements org.apache.thrift.TBase<retrieveUserId_result, retrieveUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveUserId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveUserId_result.class, metaDataMap);
    }

    public retrieveUserId_result() {
    }

    public retrieveUserId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveUserId_result(retrieveUserId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public retrieveUserId_result deepCopy() {
      return new retrieveUserId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public retrieveUserId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveUserId_result)
        return this.equals((retrieveUserId_result)that);
      return false;
    }

    public boolean equals(retrieveUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveUserId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveUserId_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveUserId_resultStandardScheme getScheme() {
        return new retrieveUserId_resultStandardScheme();
      }
    }

    private static class retrieveUserId_resultStandardScheme extends StandardScheme<retrieveUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveUserId_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveUserId_resultTupleScheme getScheme() {
        return new retrieveUserId_resultTupleScheme();
      }
    }

    private static class retrieveUserId_resultTupleScheme extends TupleScheme<retrieveUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createNewRecommender_args implements org.apache.thrift.TBase<createNewRecommender_args, createNewRecommender_args._Fields>, java.io.Serializable, Cloneable, Comparable<createNewRecommender_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewRecommender_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField RATINGS_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("ratings_column", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField CLIENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("clientKey", org.apache.thrift.protocol.TType.STRING, (short)10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewRecommender_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewRecommender_argsTupleSchemeFactory());
    }

    public String username; // required
    public String primaryKey; // required
    public String database; // required
    public String table; // required
    public String title; // required
    public String description; // required
    public String image; // required
    public String ratings_column; // required
    public String clientKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PRIMARY_KEY((short)2, "primaryKey"),
      DATABASE((short)3, "database"),
      TABLE((short)5, "table"),
      TITLE((short)6, "title"),
      DESCRIPTION((short)7, "description"),
      IMAGE((short)8, "image"),
      RATINGS_COLUMN((short)9, "ratings_column"),
      CLIENT_KEY((short)10, "clientKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PRIMARY_KEY
            return PRIMARY_KEY;
          case 3: // DATABASE
            return DATABASE;
          case 5: // TABLE
            return TABLE;
          case 6: // TITLE
            return TITLE;
          case 7: // DESCRIPTION
            return DESCRIPTION;
          case 8: // IMAGE
            return IMAGE;
          case 9: // RATINGS_COLUMN
            return RATINGS_COLUMN;
          case 10: // CLIENT_KEY
            return CLIENT_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primaryKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RATINGS_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("ratings_column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("clientKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewRecommender_args.class, metaDataMap);
    }

    public createNewRecommender_args() {
    }

    public createNewRecommender_args(
      String username,
      String primaryKey,
      String database,
      String table,
      String title,
      String description,
      String image,
      String ratings_column,
      String clientKey)
    {
      this();
      this.username = username;
      this.primaryKey = primaryKey;
      this.database = database;
      this.table = table;
      this.title = title;
      this.description = description;
      this.image = image;
      this.ratings_column = ratings_column;
      this.clientKey = clientKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewRecommender_args(createNewRecommender_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPrimaryKey()) {
        this.primaryKey = other.primaryKey;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetImage()) {
        this.image = other.image;
      }
      if (other.isSetRatings_column()) {
        this.ratings_column = other.ratings_column;
      }
      if (other.isSetClientKey()) {
        this.clientKey = other.clientKey;
      }
    }

    public createNewRecommender_args deepCopy() {
      return new createNewRecommender_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.primaryKey = null;
      this.database = null;
      this.table = null;
      this.title = null;
      this.description = null;
      this.image = null;
      this.ratings_column = null;
      this.clientKey = null;
    }

    public String getUsername() {
      return this.username;
    }

    public createNewRecommender_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPrimaryKey() {
      return this.primaryKey;
    }

    public createNewRecommender_args setPrimaryKey(String primaryKey) {
      this.primaryKey = primaryKey;
      return this;
    }

    public void unsetPrimaryKey() {
      this.primaryKey = null;
    }

    /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryKey() {
      return this.primaryKey != null;
    }

    public void setPrimaryKeyIsSet(boolean value) {
      if (!value) {
        this.primaryKey = null;
      }
    }

    public String getDatabase() {
      return this.database;
    }

    public createNewRecommender_args setDatabase(String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public createNewRecommender_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public createNewRecommender_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public createNewRecommender_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public String getImage() {
      return this.image;
    }

    public createNewRecommender_args setImage(String image) {
      this.image = image;
      return this;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public String getRatings_column() {
      return this.ratings_column;
    }

    public createNewRecommender_args setRatings_column(String ratings_column) {
      this.ratings_column = ratings_column;
      return this;
    }

    public void unsetRatings_column() {
      this.ratings_column = null;
    }

    /** Returns true if field ratings_column is set (has been assigned a value) and false otherwise */
    public boolean isSetRatings_column() {
      return this.ratings_column != null;
    }

    public void setRatings_columnIsSet(boolean value) {
      if (!value) {
        this.ratings_column = null;
      }
    }

    public String getClientKey() {
      return this.clientKey;
    }

    public createNewRecommender_args setClientKey(String clientKey) {
      this.clientKey = clientKey;
      return this;
    }

    public void unsetClientKey() {
      this.clientKey = null;
    }

    /** Returns true if field clientKey is set (has been assigned a value) and false otherwise */
    public boolean isSetClientKey() {
      return this.clientKey != null;
    }

    public void setClientKeyIsSet(boolean value) {
      if (!value) {
        this.clientKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PRIMARY_KEY:
        if (value == null) {
          unsetPrimaryKey();
        } else {
          setPrimaryKey((String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case IMAGE:
        if (value == null) {
          unsetImage();
        } else {
          setImage((String)value);
        }
        break;

      case RATINGS_COLUMN:
        if (value == null) {
          unsetRatings_column();
        } else {
          setRatings_column((String)value);
        }
        break;

      case CLIENT_KEY:
        if (value == null) {
          unsetClientKey();
        } else {
          setClientKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PRIMARY_KEY:
        return getPrimaryKey();

      case DATABASE:
        return getDatabase();

      case TABLE:
        return getTable();

      case TITLE:
        return getTitle();

      case DESCRIPTION:
        return getDescription();

      case IMAGE:
        return getImage();

      case RATINGS_COLUMN:
        return getRatings_column();

      case CLIENT_KEY:
        return getClientKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PRIMARY_KEY:
        return isSetPrimaryKey();
      case DATABASE:
        return isSetDatabase();
      case TABLE:
        return isSetTable();
      case TITLE:
        return isSetTitle();
      case DESCRIPTION:
        return isSetDescription();
      case IMAGE:
        return isSetImage();
      case RATINGS_COLUMN:
        return isSetRatings_column();
      case CLIENT_KEY:
        return isSetClientKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewRecommender_args)
        return this.equals((createNewRecommender_args)that);
      return false;
    }

    public boolean equals(createNewRecommender_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_primaryKey = true && this.isSetPrimaryKey();
      boolean that_present_primaryKey = true && that.isSetPrimaryKey();
      if (this_present_primaryKey || that_present_primaryKey) {
        if (!(this_present_primaryKey && that_present_primaryKey))
          return false;
        if (!this.primaryKey.equals(that.primaryKey))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (!this.image.equals(that.image))
          return false;
      }

      boolean this_present_ratings_column = true && this.isSetRatings_column();
      boolean that_present_ratings_column = true && that.isSetRatings_column();
      if (this_present_ratings_column || that_present_ratings_column) {
        if (!(this_present_ratings_column && that_present_ratings_column))
          return false;
        if (!this.ratings_column.equals(that.ratings_column))
          return false;
      }

      boolean this_present_clientKey = true && this.isSetClientKey();
      boolean that_present_clientKey = true && that.isSetClientKey();
      if (this_present_clientKey || that_present_clientKey) {
        if (!(this_present_clientKey && that_present_clientKey))
          return false;
        if (!this.clientKey.equals(that.clientKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_primaryKey = true && (isSetPrimaryKey());
      list.add(present_primaryKey);
      if (present_primaryKey)
        list.add(primaryKey);

      boolean present_database = true && (isSetDatabase());
      list.add(present_database);
      if (present_database)
        list.add(database);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_image = true && (isSetImage());
      list.add(present_image);
      if (present_image)
        list.add(image);

      boolean present_ratings_column = true && (isSetRatings_column());
      list.add(present_ratings_column);
      if (present_ratings_column)
        list.add(ratings_column);

      boolean present_clientKey = true && (isSetClientKey());
      list.add(present_clientKey);
      if (present_clientKey)
        list.add(clientKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewRecommender_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrimaryKey()).compareTo(other.isSetPrimaryKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRatings_column()).compareTo(other.isSetRatings_column());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatings_column()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratings_column, other.ratings_column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientKey()).compareTo(other.isSetClientKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientKey, other.clientKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewRecommender_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryKey:");
      if (this.primaryKey == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        sb.append(this.image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratings_column:");
      if (this.ratings_column == null) {
        sb.append("null");
      } else {
        sb.append(this.ratings_column);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientKey:");
      if (this.clientKey == null) {
        sb.append("null");
      } else {
        sb.append(this.clientKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewRecommender_argsStandardSchemeFactory implements SchemeFactory {
      public createNewRecommender_argsStandardScheme getScheme() {
        return new createNewRecommender_argsStandardScheme();
      }
    }

    private static class createNewRecommender_argsStandardScheme extends StandardScheme<createNewRecommender_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewRecommender_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIMARY_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.primaryKey = iprot.readString();
                struct.setPrimaryKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.image = iprot.readString();
                struct.setImageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // RATINGS_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ratings_column = iprot.readString();
                struct.setRatings_columnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // CLIENT_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientKey = iprot.readString();
                struct.setClientKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewRecommender_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.primaryKey != null) {
          oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
          oprot.writeString(struct.primaryKey);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.image != null) {
          oprot.writeFieldBegin(IMAGE_FIELD_DESC);
          oprot.writeString(struct.image);
          oprot.writeFieldEnd();
        }
        if (struct.ratings_column != null) {
          oprot.writeFieldBegin(RATINGS_COLUMN_FIELD_DESC);
          oprot.writeString(struct.ratings_column);
          oprot.writeFieldEnd();
        }
        if (struct.clientKey != null) {
          oprot.writeFieldBegin(CLIENT_KEY_FIELD_DESC);
          oprot.writeString(struct.clientKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewRecommender_argsTupleSchemeFactory implements SchemeFactory {
      public createNewRecommender_argsTupleScheme getScheme() {
        return new createNewRecommender_argsTupleScheme();
      }
    }

    private static class createNewRecommender_argsTupleScheme extends TupleScheme<createNewRecommender_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewRecommender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPrimaryKey()) {
          optionals.set(1);
        }
        if (struct.isSetDatabase()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetTitle()) {
          optionals.set(4);
        }
        if (struct.isSetDescription()) {
          optionals.set(5);
        }
        if (struct.isSetImage()) {
          optionals.set(6);
        }
        if (struct.isSetRatings_column()) {
          optionals.set(7);
        }
        if (struct.isSetClientKey()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPrimaryKey()) {
          oprot.writeString(struct.primaryKey);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetImage()) {
          oprot.writeString(struct.image);
        }
        if (struct.isSetRatings_column()) {
          oprot.writeString(struct.ratings_column);
        }
        if (struct.isSetClientKey()) {
          oprot.writeString(struct.clientKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewRecommender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.primaryKey = iprot.readString();
          struct.setPrimaryKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(5)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.image = iprot.readString();
          struct.setImageIsSet(true);
        }
        if (incoming.get(7)) {
          struct.ratings_column = iprot.readString();
          struct.setRatings_columnIsSet(true);
        }
        if (incoming.get(8)) {
          struct.clientKey = iprot.readString();
          struct.setClientKeyIsSet(true);
        }
      }
    }

  }

  public static class createNewRecommender_result implements org.apache.thrift.TBase<createNewRecommender_result, createNewRecommender_result._Fields>, java.io.Serializable, Cloneable, Comparable<createNewRecommender_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewRecommender_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewRecommender_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewRecommender_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewRecommender_result.class, metaDataMap);
    }

    public createNewRecommender_result() {
    }

    public createNewRecommender_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewRecommender_result(createNewRecommender_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createNewRecommender_result deepCopy() {
      return new createNewRecommender_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createNewRecommender_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewRecommender_result)
        return this.equals((createNewRecommender_result)that);
      return false;
    }

    public boolean equals(createNewRecommender_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewRecommender_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewRecommender_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewRecommender_resultStandardSchemeFactory implements SchemeFactory {
      public createNewRecommender_resultStandardScheme getScheme() {
        return new createNewRecommender_resultStandardScheme();
      }
    }

    private static class createNewRecommender_resultStandardScheme extends StandardScheme<createNewRecommender_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewRecommender_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewRecommender_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewRecommender_resultTupleSchemeFactory implements SchemeFactory {
      public createNewRecommender_resultTupleScheme getScheme() {
        return new createNewRecommender_resultTupleScheme();
      }
    }

    private static class createNewRecommender_resultTupleScheme extends TupleScheme<createNewRecommender_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewRecommender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewRecommender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserRatedItems_args implements org.apache.thrift.TBase<getUserRatedItems_args, getUserRatedItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserRatedItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserRatedItems_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DISPLAY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColumns", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserRatedItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserRatedItems_argsTupleSchemeFactory());
    }

    public String key; // required
    public long userId; // required
    public List<String> displayColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      USER_ID((short)2, "userId"),
      DISPLAY_COLUMNS((short)3, "displayColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // USER_ID
            return USER_ID;
          case 3: // DISPLAY_COLUMNS
            return DISPLAY_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DISPLAY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("displayColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserRatedItems_args.class, metaDataMap);
    }

    public getUserRatedItems_args() {
    }

    public getUserRatedItems_args(
      String key,
      long userId,
      List<String> displayColumns)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRatedItems_args(getUserRatedItems_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      if (other.isSetDisplayColumns()) {
        List<String> __this__displayColumns = new ArrayList<String>(other.displayColumns);
        this.displayColumns = __this__displayColumns;
      }
    }

    public getUserRatedItems_args deepCopy() {
      return new getUserRatedItems_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public getUserRatedItems_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public getUserRatedItems_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public java.util.Iterator<String> getDisplayColumnsIterator() {
      return (this.displayColumns == null) ? null : this.displayColumns.iterator();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new ArrayList<String>();
      }
      this.displayColumns.add(elem);
    }

    public List<String> getDisplayColumns() {
      return this.displayColumns;
    }

    public getUserRatedItems_args setDisplayColumns(List<String> displayColumns) {
      this.displayColumns = displayColumns;
      return this;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case DISPLAY_COLUMNS:
        if (value == null) {
          unsetDisplayColumns();
        } else {
          setDisplayColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case USER_ID:
        return Long.valueOf(getUserId());

      case DISPLAY_COLUMNS:
        return getDisplayColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case USER_ID:
        return isSetUserId();
      case DISPLAY_COLUMNS:
        return isSetDisplayColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRatedItems_args)
        return this.equals((getUserRatedItems_args)that);
      return false;
    }

    public boolean equals(getUserRatedItems_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_displayColumns = true && (isSetDisplayColumns());
      list.add(present_displayColumns);
      if (present_displayColumns)
        list.add(displayColumns);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserRatedItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayColumns()).compareTo(other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserRatedItems_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserRatedItems_argsStandardSchemeFactory implements SchemeFactory {
      public getUserRatedItems_argsStandardScheme getScheme() {
        return new getUserRatedItems_argsStandardScheme();
      }
    }

    private static class getUserRatedItems_argsStandardScheme extends StandardScheme<getUserRatedItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserRatedItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DISPLAY_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                  struct.displayColumns = new ArrayList<String>(_list76.size);
                  String _elem77;
                  for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                  {
                    _elem77 = iprot.readString();
                    struct.displayColumns.add(_elem77);
                  }
                  iprot.readListEnd();
                }
                struct.setDisplayColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserRatedItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.displayColumns != null) {
          oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.displayColumns.size()));
            for (String _iter79 : struct.displayColumns)
            {
              oprot.writeString(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserRatedItems_argsTupleSchemeFactory implements SchemeFactory {
      public getUserRatedItems_argsTupleScheme getScheme() {
        return new getUserRatedItems_argsTupleScheme();
      }
    }

    private static class getUserRatedItems_argsTupleScheme extends TupleScheme<getUserRatedItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserRatedItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetDisplayColumns()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetDisplayColumns()) {
          {
            oprot.writeI32(struct.displayColumns.size());
            for (String _iter80 : struct.displayColumns)
            {
              oprot.writeString(_iter80);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserRatedItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.displayColumns = new ArrayList<String>(_list81.size);
            String _elem82;
            for (int _i83 = 0; _i83 < _list81.size; ++_i83)
            {
              _elem82 = iprot.readString();
              struct.displayColumns.add(_elem82);
            }
          }
          struct.setDisplayColumnsIsSet(true);
        }
      }
    }

  }

  public static class getUserRatedItems_result implements org.apache.thrift.TBase<getUserRatedItems_result, getUserRatedItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserRatedItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserRatedItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserRatedItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserRatedItems_resultTupleSchemeFactory());
    }

    public List<Item> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserRatedItems_result.class, metaDataMap);
    }

    public getUserRatedItems_result() {
    }

    public getUserRatedItems_result(
      List<Item> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRatedItems_result(getUserRatedItems_result other) {
      if (other.isSetSuccess()) {
        List<Item> __this__success = new ArrayList<Item>(other.success.size());
        for (Item other_element : other.success) {
          __this__success.add(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public getUserRatedItems_result deepCopy() {
      return new getUserRatedItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Item> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new ArrayList<Item>();
      }
      this.success.add(elem);
    }

    public List<Item> getSuccess() {
      return this.success;
    }

    public getUserRatedItems_result setSuccess(List<Item> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Item>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRatedItems_result)
        return this.equals((getUserRatedItems_result)that);
      return false;
    }

    public boolean equals(getUserRatedItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserRatedItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserRatedItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserRatedItems_resultStandardSchemeFactory implements SchemeFactory {
      public getUserRatedItems_resultStandardScheme getScheme() {
        return new getUserRatedItems_resultStandardScheme();
      }
    }

    private static class getUserRatedItems_resultStandardScheme extends StandardScheme<getUserRatedItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserRatedItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                  struct.success = new ArrayList<Item>(_list84.size);
                  Item _elem85;
                  for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                  {
                    _elem85 = new Item();
                    _elem85.read(iprot);
                    struct.success.add(_elem85);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserRatedItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Item _iter87 : struct.success)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserRatedItems_resultTupleSchemeFactory implements SchemeFactory {
      public getUserRatedItems_resultTupleScheme getScheme() {
        return new getUserRatedItems_resultTupleScheme();
      }
    }

    private static class getUserRatedItems_resultTupleScheme extends TupleScheme<getUserRatedItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserRatedItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Item _iter88 : struct.success)
            {
              _iter88.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserRatedItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Item>(_list89.size);
            Item _elem90;
            for (int _i91 = 0; _i91 < _list89.size; ++_i91)
            {
              _elem90 = new Item();
              _elem90.read(iprot);
              struct.success.add(_elem90);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class initiateModel_args implements org.apache.thrift.TBase<initiateModel_args, initiateModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<initiateModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initiateModel_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initiateModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initiateModel_argsTupleSchemeFactory());
    }

    public String key; // required
    public String table; // required
    public String username; // required
    public String database; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      TABLE((short)2, "table"),
      USERNAME((short)3, "username"),
      DATABASE((short)4, "database");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // TABLE
            return TABLE;
          case 3: // USERNAME
            return USERNAME;
          case 4: // DATABASE
            return DATABASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initiateModel_args.class, metaDataMap);
    }

    public initiateModel_args() {
    }

    public initiateModel_args(
      String key,
      String table,
      String username,
      String database)
    {
      this();
      this.key = key;
      this.table = table;
      this.username = username;
      this.database = database;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiateModel_args(initiateModel_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
    }

    public initiateModel_args deepCopy() {
      return new initiateModel_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.table = null;
      this.username = null;
      this.database = null;
    }

    public String getKey() {
      return this.key;
    }

    public initiateModel_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public initiateModel_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public initiateModel_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getDatabase() {
      return this.database;
    }

    public initiateModel_args setDatabase(String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case TABLE:
        return getTable();

      case USERNAME:
        return getUsername();

      case DATABASE:
        return getDatabase();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case TABLE:
        return isSetTable();
      case USERNAME:
        return isSetUsername();
      case DATABASE:
        return isSetDatabase();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initiateModel_args)
        return this.equals((initiateModel_args)that);
      return false;
    }

    public boolean equals(initiateModel_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_database = true && (isSetDatabase());
      list.add(present_database);
      if (present_database)
        list.add(database);

      return list.hashCode();
    }

    @Override
    public int compareTo(initiateModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initiateModel_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initiateModel_argsStandardSchemeFactory implements SchemeFactory {
      public initiateModel_argsStandardScheme getScheme() {
        return new initiateModel_argsStandardScheme();
      }
    }

    private static class initiateModel_argsStandardScheme extends StandardScheme<initiateModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initiateModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initiateModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initiateModel_argsTupleSchemeFactory implements SchemeFactory {
      public initiateModel_argsTupleScheme getScheme() {
        return new initiateModel_argsTupleScheme();
      }
    }

    private static class initiateModel_argsTupleScheme extends TupleScheme<initiateModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initiateModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetTable()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        if (struct.isSetDatabase()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initiateModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
      }
    }

  }

  public static class initiateModel_result implements org.apache.thrift.TBase<initiateModel_result, initiateModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<initiateModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initiateModel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initiateModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initiateModel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initiateModel_result.class, metaDataMap);
    }

    public initiateModel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiateModel_result(initiateModel_result other) {
    }

    public initiateModel_result deepCopy() {
      return new initiateModel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initiateModel_result)
        return this.equals((initiateModel_result)that);
      return false;
    }

    public boolean equals(initiateModel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(initiateModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initiateModel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initiateModel_resultStandardSchemeFactory implements SchemeFactory {
      public initiateModel_resultStandardScheme getScheme() {
        return new initiateModel_resultStandardScheme();
      }
    }

    private static class initiateModel_resultStandardScheme extends StandardScheme<initiateModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initiateModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initiateModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initiateModel_resultTupleSchemeFactory implements SchemeFactory {
      public initiateModel_resultTupleScheme getScheme() {
        return new initiateModel_resultTupleScheme();
      }
    }

    private static class initiateModel_resultTupleScheme extends TupleScheme<initiateModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initiateModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initiateModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSearchItems_args implements org.apache.thrift.TBase<getSearchItems_args, getSearchItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchItems_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMNS_TO_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("columnsToSearch", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField DISPLAY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColumns", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchItems_argsTupleSchemeFactory());
    }

    public String table; // required
    public String query; // required
    public List<String> columnsToSearch; // required
    public List<String> displayColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      QUERY((short)2, "query"),
      COLUMNS_TO_SEARCH((short)3, "columnsToSearch"),
      DISPLAY_COLUMNS((short)4, "displayColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // QUERY
            return QUERY;
          case 3: // COLUMNS_TO_SEARCH
            return COLUMNS_TO_SEARCH;
          case 4: // DISPLAY_COLUMNS
            return DISPLAY_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMNS_TO_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("columnsToSearch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DISPLAY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("displayColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchItems_args.class, metaDataMap);
    }

    public getSearchItems_args() {
    }

    public getSearchItems_args(
      String table,
      String query,
      List<String> columnsToSearch,
      List<String> displayColumns)
    {
      this();
      this.table = table;
      this.query = query;
      this.columnsToSearch = columnsToSearch;
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchItems_args(getSearchItems_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      if (other.isSetColumnsToSearch()) {
        List<String> __this__columnsToSearch = new ArrayList<String>(other.columnsToSearch);
        this.columnsToSearch = __this__columnsToSearch;
      }
      if (other.isSetDisplayColumns()) {
        List<String> __this__displayColumns = new ArrayList<String>(other.displayColumns);
        this.displayColumns = __this__displayColumns;
      }
    }

    public getSearchItems_args deepCopy() {
      return new getSearchItems_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.query = null;
      this.columnsToSearch = null;
      this.displayColumns = null;
    }

    public String getTable() {
      return this.table;
    }

    public getSearchItems_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getQuery() {
      return this.query;
    }

    public getSearchItems_args setQuery(String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public int getColumnsToSearchSize() {
      return (this.columnsToSearch == null) ? 0 : this.columnsToSearch.size();
    }

    public java.util.Iterator<String> getColumnsToSearchIterator() {
      return (this.columnsToSearch == null) ? null : this.columnsToSearch.iterator();
    }

    public void addToColumnsToSearch(String elem) {
      if (this.columnsToSearch == null) {
        this.columnsToSearch = new ArrayList<String>();
      }
      this.columnsToSearch.add(elem);
    }

    public List<String> getColumnsToSearch() {
      return this.columnsToSearch;
    }

    public getSearchItems_args setColumnsToSearch(List<String> columnsToSearch) {
      this.columnsToSearch = columnsToSearch;
      return this;
    }

    public void unsetColumnsToSearch() {
      this.columnsToSearch = null;
    }

    /** Returns true if field columnsToSearch is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnsToSearch() {
      return this.columnsToSearch != null;
    }

    public void setColumnsToSearchIsSet(boolean value) {
      if (!value) {
        this.columnsToSearch = null;
      }
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public java.util.Iterator<String> getDisplayColumnsIterator() {
      return (this.displayColumns == null) ? null : this.displayColumns.iterator();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new ArrayList<String>();
      }
      this.displayColumns.add(elem);
    }

    public List<String> getDisplayColumns() {
      return this.displayColumns;
    }

    public getSearchItems_args setDisplayColumns(List<String> displayColumns) {
      this.displayColumns = displayColumns;
      return this;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String)value);
        }
        break;

      case COLUMNS_TO_SEARCH:
        if (value == null) {
          unsetColumnsToSearch();
        } else {
          setColumnsToSearch((List<String>)value);
        }
        break;

      case DISPLAY_COLUMNS:
        if (value == null) {
          unsetDisplayColumns();
        } else {
          setDisplayColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case QUERY:
        return getQuery();

      case COLUMNS_TO_SEARCH:
        return getColumnsToSearch();

      case DISPLAY_COLUMNS:
        return getDisplayColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case QUERY:
        return isSetQuery();
      case COLUMNS_TO_SEARCH:
        return isSetColumnsToSearch();
      case DISPLAY_COLUMNS:
        return isSetDisplayColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchItems_args)
        return this.equals((getSearchItems_args)that);
      return false;
    }

    public boolean equals(getSearchItems_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_columnsToSearch = true && this.isSetColumnsToSearch();
      boolean that_present_columnsToSearch = true && that.isSetColumnsToSearch();
      if (this_present_columnsToSearch || that_present_columnsToSearch) {
        if (!(this_present_columnsToSearch && that_present_columnsToSearch))
          return false;
        if (!this.columnsToSearch.equals(that.columnsToSearch))
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_columnsToSearch = true && (isSetColumnsToSearch());
      list.add(present_columnsToSearch);
      if (present_columnsToSearch)
        list.add(columnsToSearch);

      boolean present_displayColumns = true && (isSetDisplayColumns());
      list.add(present_displayColumns);
      if (present_displayColumns)
        list.add(displayColumns);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumnsToSearch()).compareTo(other.isSetColumnsToSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnsToSearch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnsToSearch, other.columnsToSearch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayColumns()).compareTo(other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchItems_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnsToSearch:");
      if (this.columnsToSearch == null) {
        sb.append("null");
      } else {
        sb.append(this.columnsToSearch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchItems_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchItems_argsStandardScheme getScheme() {
        return new getSearchItems_argsStandardScheme();
      }
    }

    private static class getSearchItems_argsStandardScheme extends StandardScheme<getSearchItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMNS_TO_SEARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                  struct.columnsToSearch = new ArrayList<String>(_list92.size);
                  String _elem93;
                  for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                  {
                    _elem93 = iprot.readString();
                    struct.columnsToSearch.add(_elem93);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnsToSearchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DISPLAY_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list95 = iprot.readListBegin();
                  struct.displayColumns = new ArrayList<String>(_list95.size);
                  String _elem96;
                  for (int _i97 = 0; _i97 < _list95.size; ++_i97)
                  {
                    _elem96 = iprot.readString();
                    struct.displayColumns.add(_elem96);
                  }
                  iprot.readListEnd();
                }
                struct.setDisplayColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.columnsToSearch != null) {
          oprot.writeFieldBegin(COLUMNS_TO_SEARCH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnsToSearch.size()));
            for (String _iter98 : struct.columnsToSearch)
            {
              oprot.writeString(_iter98);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.displayColumns != null) {
          oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.displayColumns.size()));
            for (String _iter99 : struct.displayColumns)
            {
              oprot.writeString(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchItems_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchItems_argsTupleScheme getScheme() {
        return new getSearchItems_argsTupleScheme();
      }
    }

    private static class getSearchItems_argsTupleScheme extends TupleScheme<getSearchItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        if (struct.isSetColumnsToSearch()) {
          optionals.set(2);
        }
        if (struct.isSetDisplayColumns()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
        if (struct.isSetColumnsToSearch()) {
          {
            oprot.writeI32(struct.columnsToSearch.size());
            for (String _iter100 : struct.columnsToSearch)
            {
              oprot.writeString(_iter100);
            }
          }
        }
        if (struct.isSetDisplayColumns()) {
          {
            oprot.writeI32(struct.displayColumns.size());
            for (String _iter101 : struct.displayColumns)
            {
              oprot.writeString(_iter101);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list102 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columnsToSearch = new ArrayList<String>(_list102.size);
            String _elem103;
            for (int _i104 = 0; _i104 < _list102.size; ++_i104)
            {
              _elem103 = iprot.readString();
              struct.columnsToSearch.add(_elem103);
            }
          }
          struct.setColumnsToSearchIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.displayColumns = new ArrayList<String>(_list105.size);
            String _elem106;
            for (int _i107 = 0; _i107 < _list105.size; ++_i107)
            {
              _elem106 = iprot.readString();
              struct.displayColumns.add(_elem106);
            }
          }
          struct.setDisplayColumnsIsSet(true);
        }
      }
    }

  }

  public static class getSearchItems_result implements org.apache.thrift.TBase<getSearchItems_result, getSearchItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchItems_resultTupleSchemeFactory());
    }

    public List<Item> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchItems_result.class, metaDataMap);
    }

    public getSearchItems_result() {
    }

    public getSearchItems_result(
      List<Item> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchItems_result(getSearchItems_result other) {
      if (other.isSetSuccess()) {
        List<Item> __this__success = new ArrayList<Item>(other.success.size());
        for (Item other_element : other.success) {
          __this__success.add(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSearchItems_result deepCopy() {
      return new getSearchItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Item> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new ArrayList<Item>();
      }
      this.success.add(elem);
    }

    public List<Item> getSuccess() {
      return this.success;
    }

    public getSearchItems_result setSuccess(List<Item> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Item>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchItems_result)
        return this.equals((getSearchItems_result)that);
      return false;
    }

    public boolean equals(getSearchItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchItems_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchItems_resultStandardScheme getScheme() {
        return new getSearchItems_resultStandardScheme();
      }
    }

    private static class getSearchItems_resultStandardScheme extends StandardScheme<getSearchItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                  struct.success = new ArrayList<Item>(_list108.size);
                  Item _elem109;
                  for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                  {
                    _elem109 = new Item();
                    _elem109.read(iprot);
                    struct.success.add(_elem109);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Item _iter111 : struct.success)
            {
              _iter111.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchItems_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchItems_resultTupleScheme getScheme() {
        return new getSearchItems_resultTupleScheme();
      }
    }

    private static class getSearchItems_resultTupleScheme extends TupleScheme<getSearchItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Item _iter112 : struct.success)
            {
              _iter112.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Item>(_list113.size);
            Item _elem114;
            for (int _i115 = 0; _i115 < _list113.size; ++_i115)
            {
              _elem114 = new Item();
              _elem114.read(iprot);
              struct.success.add(_elem114);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class makeOverallRatingBasedOrRandomRecommendation_args implements org.apache.thrift.TBase<makeOverallRatingBasedOrRandomRecommendation_args, makeOverallRatingBasedOrRandomRecommendation_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeOverallRatingBasedOrRandomRecommendation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeOverallRatingBasedOrRandomRecommendation_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RATING_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ratingColumnName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_RECS_FIELD_DESC = new org.apache.thrift.protocol.TField("numRecs", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField DISPLAY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColumns", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeOverallRatingBasedOrRandomRecommendation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeOverallRatingBasedOrRandomRecommendation_argsTupleSchemeFactory());
    }

    public String key; // required
    public String ratingColumnName; // required
    public long numRecs; // required
    public List<String> displayColumns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      RATING_COLUMN_NAME((short)2, "ratingColumnName"),
      NUM_RECS((short)3, "numRecs"),
      DISPLAY_COLUMNS((short)4, "displayColumns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // RATING_COLUMN_NAME
            return RATING_COLUMN_NAME;
          case 3: // NUM_RECS
            return NUM_RECS;
          case 4: // DISPLAY_COLUMNS
            return DISPLAY_COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMRECS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RATING_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("ratingColumnName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_RECS, new org.apache.thrift.meta_data.FieldMetaData("numRecs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DISPLAY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("displayColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeOverallRatingBasedOrRandomRecommendation_args.class, metaDataMap);
    }

    public makeOverallRatingBasedOrRandomRecommendation_args() {
    }

    public makeOverallRatingBasedOrRandomRecommendation_args(
      String key,
      String ratingColumnName,
      long numRecs,
      List<String> displayColumns)
    {
      this();
      this.key = key;
      this.ratingColumnName = ratingColumnName;
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeOverallRatingBasedOrRandomRecommendation_args(makeOverallRatingBasedOrRandomRecommendation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetRatingColumnName()) {
        this.ratingColumnName = other.ratingColumnName;
      }
      this.numRecs = other.numRecs;
      if (other.isSetDisplayColumns()) {
        List<String> __this__displayColumns = new ArrayList<String>(other.displayColumns);
        this.displayColumns = __this__displayColumns;
      }
    }

    public makeOverallRatingBasedOrRandomRecommendation_args deepCopy() {
      return new makeOverallRatingBasedOrRandomRecommendation_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      this.ratingColumnName = null;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public makeOverallRatingBasedOrRandomRecommendation_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getRatingColumnName() {
      return this.ratingColumnName;
    }

    public makeOverallRatingBasedOrRandomRecommendation_args setRatingColumnName(String ratingColumnName) {
      this.ratingColumnName = ratingColumnName;
      return this;
    }

    public void unsetRatingColumnName() {
      this.ratingColumnName = null;
    }

    /** Returns true if field ratingColumnName is set (has been assigned a value) and false otherwise */
    public boolean isSetRatingColumnName() {
      return this.ratingColumnName != null;
    }

    public void setRatingColumnNameIsSet(boolean value) {
      if (!value) {
        this.ratingColumnName = null;
      }
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public makeOverallRatingBasedOrRandomRecommendation_args setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      return this;
    }

    public void unsetNumRecs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMRECS_ISSET_ID, value);
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public java.util.Iterator<String> getDisplayColumnsIterator() {
      return (this.displayColumns == null) ? null : this.displayColumns.iterator();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new ArrayList<String>();
      }
      this.displayColumns.add(elem);
    }

    public List<String> getDisplayColumns() {
      return this.displayColumns;
    }

    public makeOverallRatingBasedOrRandomRecommendation_args setDisplayColumns(List<String> displayColumns) {
      this.displayColumns = displayColumns;
      return this;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case RATING_COLUMN_NAME:
        if (value == null) {
          unsetRatingColumnName();
        } else {
          setRatingColumnName((String)value);
        }
        break;

      case NUM_RECS:
        if (value == null) {
          unsetNumRecs();
        } else {
          setNumRecs((Long)value);
        }
        break;

      case DISPLAY_COLUMNS:
        if (value == null) {
          unsetDisplayColumns();
        } else {
          setDisplayColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case RATING_COLUMN_NAME:
        return getRatingColumnName();

      case NUM_RECS:
        return Long.valueOf(getNumRecs());

      case DISPLAY_COLUMNS:
        return getDisplayColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case RATING_COLUMN_NAME:
        return isSetRatingColumnName();
      case NUM_RECS:
        return isSetNumRecs();
      case DISPLAY_COLUMNS:
        return isSetDisplayColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeOverallRatingBasedOrRandomRecommendation_args)
        return this.equals((makeOverallRatingBasedOrRandomRecommendation_args)that);
      return false;
    }

    public boolean equals(makeOverallRatingBasedOrRandomRecommendation_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ratingColumnName = true && this.isSetRatingColumnName();
      boolean that_present_ratingColumnName = true && that.isSetRatingColumnName();
      if (this_present_ratingColumnName || that_present_ratingColumnName) {
        if (!(this_present_ratingColumnName && that_present_ratingColumnName))
          return false;
        if (!this.ratingColumnName.equals(that.ratingColumnName))
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_ratingColumnName = true && (isSetRatingColumnName());
      list.add(present_ratingColumnName);
      if (present_ratingColumnName)
        list.add(ratingColumnName);

      boolean present_numRecs = true;
      list.add(present_numRecs);
      if (present_numRecs)
        list.add(numRecs);

      boolean present_displayColumns = true && (isSetDisplayColumns());
      list.add(present_displayColumns);
      if (present_displayColumns)
        list.add(displayColumns);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeOverallRatingBasedOrRandomRecommendation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRatingColumnName()).compareTo(other.isSetRatingColumnName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatingColumnName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratingColumnName, other.ratingColumnName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumRecs()).compareTo(other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayColumns()).compareTo(other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeOverallRatingBasedOrRandomRecommendation_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratingColumnName:");
      if (this.ratingColumnName == null) {
        sb.append("null");
      } else {
        sb.append(this.ratingColumnName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeOverallRatingBasedOrRandomRecommendation_argsStandardSchemeFactory implements SchemeFactory {
      public makeOverallRatingBasedOrRandomRecommendation_argsStandardScheme getScheme() {
        return new makeOverallRatingBasedOrRandomRecommendation_argsStandardScheme();
      }
    }

    private static class makeOverallRatingBasedOrRandomRecommendation_argsStandardScheme extends StandardScheme<makeOverallRatingBasedOrRandomRecommendation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeOverallRatingBasedOrRandomRecommendation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RATING_COLUMN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ratingColumnName = iprot.readString();
                struct.setRatingColumnNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_RECS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numRecs = iprot.readI64();
                struct.setNumRecsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DISPLAY_COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                  struct.displayColumns = new ArrayList<String>(_list116.size);
                  String _elem117;
                  for (int _i118 = 0; _i118 < _list116.size; ++_i118)
                  {
                    _elem117 = iprot.readString();
                    struct.displayColumns.add(_elem117);
                  }
                  iprot.readListEnd();
                }
                struct.setDisplayColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeOverallRatingBasedOrRandomRecommendation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.ratingColumnName != null) {
          oprot.writeFieldBegin(RATING_COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.ratingColumnName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
        oprot.writeI64(struct.numRecs);
        oprot.writeFieldEnd();
        if (struct.displayColumns != null) {
          oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.displayColumns.size()));
            for (String _iter119 : struct.displayColumns)
            {
              oprot.writeString(_iter119);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeOverallRatingBasedOrRandomRecommendation_argsTupleSchemeFactory implements SchemeFactory {
      public makeOverallRatingBasedOrRandomRecommendation_argsTupleScheme getScheme() {
        return new makeOverallRatingBasedOrRandomRecommendation_argsTupleScheme();
      }
    }

    private static class makeOverallRatingBasedOrRandomRecommendation_argsTupleScheme extends TupleScheme<makeOverallRatingBasedOrRandomRecommendation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeOverallRatingBasedOrRandomRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetRatingColumnName()) {
          optionals.set(1);
        }
        if (struct.isSetNumRecs()) {
          optionals.set(2);
        }
        if (struct.isSetDisplayColumns()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetRatingColumnName()) {
          oprot.writeString(struct.ratingColumnName);
        }
        if (struct.isSetNumRecs()) {
          oprot.writeI64(struct.numRecs);
        }
        if (struct.isSetDisplayColumns()) {
          {
            oprot.writeI32(struct.displayColumns.size());
            for (String _iter120 : struct.displayColumns)
            {
              oprot.writeString(_iter120);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeOverallRatingBasedOrRandomRecommendation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ratingColumnName = iprot.readString();
          struct.setRatingColumnNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numRecs = iprot.readI64();
          struct.setNumRecsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.displayColumns = new ArrayList<String>(_list121.size);
            String _elem122;
            for (int _i123 = 0; _i123 < _list121.size; ++_i123)
            {
              _elem122 = iprot.readString();
              struct.displayColumns.add(_elem122);
            }
          }
          struct.setDisplayColumnsIsSet(true);
        }
      }
    }

  }

  public static class makeOverallRatingBasedOrRandomRecommendation_result implements org.apache.thrift.TBase<makeOverallRatingBasedOrRandomRecommendation_result, makeOverallRatingBasedOrRandomRecommendation_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeOverallRatingBasedOrRandomRecommendation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeOverallRatingBasedOrRandomRecommendation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeOverallRatingBasedOrRandomRecommendation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeOverallRatingBasedOrRandomRecommendation_resultTupleSchemeFactory());
    }

    public List<Item> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeOverallRatingBasedOrRandomRecommendation_result.class, metaDataMap);
    }

    public makeOverallRatingBasedOrRandomRecommendation_result() {
    }

    public makeOverallRatingBasedOrRandomRecommendation_result(
      List<Item> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeOverallRatingBasedOrRandomRecommendation_result(makeOverallRatingBasedOrRandomRecommendation_result other) {
      if (other.isSetSuccess()) {
        List<Item> __this__success = new ArrayList<Item>(other.success.size());
        for (Item other_element : other.success) {
          __this__success.add(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public makeOverallRatingBasedOrRandomRecommendation_result deepCopy() {
      return new makeOverallRatingBasedOrRandomRecommendation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Item> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new ArrayList<Item>();
      }
      this.success.add(elem);
    }

    public List<Item> getSuccess() {
      return this.success;
    }

    public makeOverallRatingBasedOrRandomRecommendation_result setSuccess(List<Item> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Item>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeOverallRatingBasedOrRandomRecommendation_result)
        return this.equals((makeOverallRatingBasedOrRandomRecommendation_result)that);
      return false;
    }

    public boolean equals(makeOverallRatingBasedOrRandomRecommendation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeOverallRatingBasedOrRandomRecommendation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeOverallRatingBasedOrRandomRecommendation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeOverallRatingBasedOrRandomRecommendation_resultStandardSchemeFactory implements SchemeFactory {
      public makeOverallRatingBasedOrRandomRecommendation_resultStandardScheme getScheme() {
        return new makeOverallRatingBasedOrRandomRecommendation_resultStandardScheme();
      }
    }

    private static class makeOverallRatingBasedOrRandomRecommendation_resultStandardScheme extends StandardScheme<makeOverallRatingBasedOrRandomRecommendation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeOverallRatingBasedOrRandomRecommendation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                  struct.success = new ArrayList<Item>(_list124.size);
                  Item _elem125;
                  for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                  {
                    _elem125 = new Item();
                    _elem125.read(iprot);
                    struct.success.add(_elem125);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeOverallRatingBasedOrRandomRecommendation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Item _iter127 : struct.success)
            {
              _iter127.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeOverallRatingBasedOrRandomRecommendation_resultTupleSchemeFactory implements SchemeFactory {
      public makeOverallRatingBasedOrRandomRecommendation_resultTupleScheme getScheme() {
        return new makeOverallRatingBasedOrRandomRecommendation_resultTupleScheme();
      }
    }

    private static class makeOverallRatingBasedOrRandomRecommendation_resultTupleScheme extends TupleScheme<makeOverallRatingBasedOrRandomRecommendation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeOverallRatingBasedOrRandomRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Item _iter128 : struct.success)
            {
              _iter128.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeOverallRatingBasedOrRandomRecommendation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list129 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Item>(_list129.size);
            Item _elem130;
            for (int _i131 = 0; _i131 < _list129.size; ++_i131)
            {
              _elem130 = new Item();
              _elem130.read(iprot);
              struct.success.add(_elem130);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addKibitzUser_args implements org.apache.thrift.TBase<addKibitzUser_args, addKibitzUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<addKibitzUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addKibitzUser_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addKibitzUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addKibitzUser_argsTupleSchemeFactory());
    }

    public String email; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addKibitzUser_args.class, metaDataMap);
    }

    public addKibitzUser_args() {
    }

    public addKibitzUser_args(
      String email,
      String password)
    {
      this();
      this.email = email;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addKibitzUser_args(addKibitzUser_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public addKibitzUser_args deepCopy() {
      return new addKibitzUser_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
      this.password = null;
    }

    public String getEmail() {
      return this.email;
    }

    public addKibitzUser_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public addKibitzUser_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addKibitzUser_args)
        return this.equals((addKibitzUser_args)that);
      return false;
    }

    public boolean equals(addKibitzUser_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_email = true && (isSetEmail());
      list.add(present_email);
      if (present_email)
        list.add(email);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(addKibitzUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addKibitzUser_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addKibitzUser_argsStandardSchemeFactory implements SchemeFactory {
      public addKibitzUser_argsStandardScheme getScheme() {
        return new addKibitzUser_argsStandardScheme();
      }
    }

    private static class addKibitzUser_argsStandardScheme extends StandardScheme<addKibitzUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addKibitzUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addKibitzUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addKibitzUser_argsTupleSchemeFactory implements SchemeFactory {
      public addKibitzUser_argsTupleScheme getScheme() {
        return new addKibitzUser_argsTupleScheme();
      }
    }

    private static class addKibitzUser_argsTupleScheme extends TupleScheme<addKibitzUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addKibitzUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addKibitzUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class addKibitzUser_result implements org.apache.thrift.TBase<addKibitzUser_result, addKibitzUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<addKibitzUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addKibitzUser_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addKibitzUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addKibitzUser_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addKibitzUser_result.class, metaDataMap);
    }

    public addKibitzUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addKibitzUser_result(addKibitzUser_result other) {
    }

    public addKibitzUser_result deepCopy() {
      return new addKibitzUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addKibitzUser_result)
        return this.equals((addKibitzUser_result)that);
      return false;
    }

    public boolean equals(addKibitzUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(addKibitzUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addKibitzUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addKibitzUser_resultStandardSchemeFactory implements SchemeFactory {
      public addKibitzUser_resultStandardScheme getScheme() {
        return new addKibitzUser_resultStandardScheme();
      }
    }

    private static class addKibitzUser_resultStandardScheme extends StandardScheme<addKibitzUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addKibitzUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addKibitzUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addKibitzUser_resultTupleSchemeFactory implements SchemeFactory {
      public addKibitzUser_resultTupleScheme getScheme() {
        return new addKibitzUser_resultTupleScheme();
      }
    }

    private static class addKibitzUser_resultTupleScheme extends TupleScheme<addKibitzUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addKibitzUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addKibitzUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class checkCorrectDatahubLogin_args implements org.apache.thrift.TBase<checkCorrectDatahubLogin_args, checkCorrectDatahubLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkCorrectDatahubLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkCorrectDatahubLogin_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPOSITORY_FIELD_DESC = new org.apache.thrift.protocol.TField("repository", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primary_key", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkCorrectDatahubLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkCorrectDatahubLogin_argsTupleSchemeFactory());
    }

    public String username; // required
    public String repository; // required
    public String table; // required
    public String primary_key; // required
    public String title; // required
    public String description; // required
    public String image; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      REPOSITORY((short)2, "repository"),
      TABLE((short)3, "table"),
      PRIMARY_KEY((short)4, "primary_key"),
      TITLE((short)5, "title"),
      DESCRIPTION((short)6, "description"),
      IMAGE((short)7, "image");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // REPOSITORY
            return REPOSITORY;
          case 3: // TABLE
            return TABLE;
          case 4: // PRIMARY_KEY
            return PRIMARY_KEY;
          case 5: // TITLE
            return TITLE;
          case 6: // DESCRIPTION
            return DESCRIPTION;
          case 7: // IMAGE
            return IMAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPOSITORY, new org.apache.thrift.meta_data.FieldMetaData("repository", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primary_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCorrectDatahubLogin_args.class, metaDataMap);
    }

    public checkCorrectDatahubLogin_args() {
    }

    public checkCorrectDatahubLogin_args(
      String username,
      String repository,
      String table,
      String primary_key,
      String title,
      String description,
      String image)
    {
      this();
      this.username = username;
      this.repository = repository;
      this.table = table;
      this.primary_key = primary_key;
      this.title = title;
      this.description = description;
      this.image = image;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCorrectDatahubLogin_args(checkCorrectDatahubLogin_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepository()) {
        this.repository = other.repository;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetPrimary_key()) {
        this.primary_key = other.primary_key;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetImage()) {
        this.image = other.image;
      }
    }

    public checkCorrectDatahubLogin_args deepCopy() {
      return new checkCorrectDatahubLogin_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.repository = null;
      this.table = null;
      this.primary_key = null;
      this.title = null;
      this.description = null;
      this.image = null;
    }

    public String getUsername() {
      return this.username;
    }

    public checkCorrectDatahubLogin_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepository() {
      return this.repository;
    }

    public checkCorrectDatahubLogin_args setRepository(String repository) {
      this.repository = repository;
      return this;
    }

    public void unsetRepository() {
      this.repository = null;
    }

    /** Returns true if field repository is set (has been assigned a value) and false otherwise */
    public boolean isSetRepository() {
      return this.repository != null;
    }

    public void setRepositoryIsSet(boolean value) {
      if (!value) {
        this.repository = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public checkCorrectDatahubLogin_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getPrimary_key() {
      return this.primary_key;
    }

    public checkCorrectDatahubLogin_args setPrimary_key(String primary_key) {
      this.primary_key = primary_key;
      return this;
    }

    public void unsetPrimary_key() {
      this.primary_key = null;
    }

    /** Returns true if field primary_key is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimary_key() {
      return this.primary_key != null;
    }

    public void setPrimary_keyIsSet(boolean value) {
      if (!value) {
        this.primary_key = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public checkCorrectDatahubLogin_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public checkCorrectDatahubLogin_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public String getImage() {
      return this.image;
    }

    public checkCorrectDatahubLogin_args setImage(String image) {
      this.image = image;
      return this;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case REPOSITORY:
        if (value == null) {
          unsetRepository();
        } else {
          setRepository((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case PRIMARY_KEY:
        if (value == null) {
          unsetPrimary_key();
        } else {
          setPrimary_key((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case IMAGE:
        if (value == null) {
          unsetImage();
        } else {
          setImage((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case REPOSITORY:
        return getRepository();

      case TABLE:
        return getTable();

      case PRIMARY_KEY:
        return getPrimary_key();

      case TITLE:
        return getTitle();

      case DESCRIPTION:
        return getDescription();

      case IMAGE:
        return getImage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case REPOSITORY:
        return isSetRepository();
      case TABLE:
        return isSetTable();
      case PRIMARY_KEY:
        return isSetPrimary_key();
      case TITLE:
        return isSetTitle();
      case DESCRIPTION:
        return isSetDescription();
      case IMAGE:
        return isSetImage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCorrectDatahubLogin_args)
        return this.equals((checkCorrectDatahubLogin_args)that);
      return false;
    }

    public boolean equals(checkCorrectDatahubLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repository = true && this.isSetRepository();
      boolean that_present_repository = true && that.isSetRepository();
      if (this_present_repository || that_present_repository) {
        if (!(this_present_repository && that_present_repository))
          return false;
        if (!this.repository.equals(that.repository))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_primary_key = true && this.isSetPrimary_key();
      boolean that_present_primary_key = true && that.isSetPrimary_key();
      if (this_present_primary_key || that_present_primary_key) {
        if (!(this_present_primary_key && that_present_primary_key))
          return false;
        if (!this.primary_key.equals(that.primary_key))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (!this.image.equals(that.image))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_repository = true && (isSetRepository());
      list.add(present_repository);
      if (present_repository)
        list.add(repository);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      boolean present_primary_key = true && (isSetPrimary_key());
      list.add(present_primary_key);
      if (present_primary_key)
        list.add(primary_key);

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_image = true && (isSetImage());
      list.add(present_image);
      if (present_image)
        list.add(image);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkCorrectDatahubLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepository()).compareTo(other.isSetRepository());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepository()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repository, other.repository);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrimary_key()).compareTo(other.isSetPrimary_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimary_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary_key, other.primary_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkCorrectDatahubLogin_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repository:");
      if (this.repository == null) {
        sb.append("null");
      } else {
        sb.append(this.repository);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primary_key:");
      if (this.primary_key == null) {
        sb.append("null");
      } else {
        sb.append(this.primary_key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        sb.append(this.image);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkCorrectDatahubLogin_argsStandardSchemeFactory implements SchemeFactory {
      public checkCorrectDatahubLogin_argsStandardScheme getScheme() {
        return new checkCorrectDatahubLogin_argsStandardScheme();
      }
    }

    private static class checkCorrectDatahubLogin_argsStandardScheme extends StandardScheme<checkCorrectDatahubLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkCorrectDatahubLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPOSITORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repository = iprot.readString();
                struct.setRepositoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PRIMARY_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.primary_key = iprot.readString();
                struct.setPrimary_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.image = iprot.readString();
                struct.setImageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkCorrectDatahubLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.repository != null) {
          oprot.writeFieldBegin(REPOSITORY_FIELD_DESC);
          oprot.writeString(struct.repository);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.primary_key != null) {
          oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
          oprot.writeString(struct.primary_key);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.image != null) {
          oprot.writeFieldBegin(IMAGE_FIELD_DESC);
          oprot.writeString(struct.image);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkCorrectDatahubLogin_argsTupleSchemeFactory implements SchemeFactory {
      public checkCorrectDatahubLogin_argsTupleScheme getScheme() {
        return new checkCorrectDatahubLogin_argsTupleScheme();
      }
    }

    private static class checkCorrectDatahubLogin_argsTupleScheme extends TupleScheme<checkCorrectDatahubLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkCorrectDatahubLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetRepository()) {
          optionals.set(1);
        }
        if (struct.isSetTable()) {
          optionals.set(2);
        }
        if (struct.isSetPrimary_key()) {
          optionals.set(3);
        }
        if (struct.isSetTitle()) {
          optionals.set(4);
        }
        if (struct.isSetDescription()) {
          optionals.set(5);
        }
        if (struct.isSetImage()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetRepository()) {
          oprot.writeString(struct.repository);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetPrimary_key()) {
          oprot.writeString(struct.primary_key);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetImage()) {
          oprot.writeString(struct.image);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkCorrectDatahubLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.repository = iprot.readString();
          struct.setRepositoryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.primary_key = iprot.readString();
          struct.setPrimary_keyIsSet(true);
        }
        if (incoming.get(4)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(5)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.image = iprot.readString();
          struct.setImageIsSet(true);
        }
      }
    }

  }

  public static class checkCorrectDatahubLogin_result implements org.apache.thrift.TBase<checkCorrectDatahubLogin_result, checkCorrectDatahubLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkCorrectDatahubLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkCorrectDatahubLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkCorrectDatahubLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkCorrectDatahubLogin_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCorrectDatahubLogin_result.class, metaDataMap);
    }

    public checkCorrectDatahubLogin_result() {
    }

    public checkCorrectDatahubLogin_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCorrectDatahubLogin_result(checkCorrectDatahubLogin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkCorrectDatahubLogin_result deepCopy() {
      return new checkCorrectDatahubLogin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkCorrectDatahubLogin_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCorrectDatahubLogin_result)
        return this.equals((checkCorrectDatahubLogin_result)that);
      return false;
    }

    public boolean equals(checkCorrectDatahubLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkCorrectDatahubLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkCorrectDatahubLogin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkCorrectDatahubLogin_resultStandardSchemeFactory implements SchemeFactory {
      public checkCorrectDatahubLogin_resultStandardScheme getScheme() {
        return new checkCorrectDatahubLogin_resultStandardScheme();
      }
    }

    private static class checkCorrectDatahubLogin_resultStandardScheme extends StandardScheme<checkCorrectDatahubLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkCorrectDatahubLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkCorrectDatahubLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkCorrectDatahubLogin_resultTupleSchemeFactory implements SchemeFactory {
      public checkCorrectDatahubLogin_resultTupleScheme getScheme() {
        return new checkCorrectDatahubLogin_resultTupleScheme();
      }
    }

    private static class checkCorrectDatahubLogin_resultTupleScheme extends TupleScheme<checkCorrectDatahubLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkCorrectDatahubLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkCorrectDatahubLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkRatingsColumn_args implements org.apache.thrift.TBase<checkRatingsColumn_args, checkRatingsColumn_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkRatingsColumn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRatingsColumn_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REPOSITORY_FIELD_DESC = new org.apache.thrift.protocol.TField("repository", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField RATINGS_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("ratings_column", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkRatingsColumn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkRatingsColumn_argsTupleSchemeFactory());
    }

    public String username; // required
    public String table; // required
    public String repository; // required
    public String ratings_column; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      TABLE((short)2, "table"),
      REPOSITORY((short)3, "repository"),
      RATINGS_COLUMN((short)4, "ratings_column");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // TABLE
            return TABLE;
          case 3: // REPOSITORY
            return REPOSITORY;
          case 4: // RATINGS_COLUMN
            return RATINGS_COLUMN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPOSITORY, new org.apache.thrift.meta_data.FieldMetaData("repository", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RATINGS_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("ratings_column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRatingsColumn_args.class, metaDataMap);
    }

    public checkRatingsColumn_args() {
    }

    public checkRatingsColumn_args(
      String username,
      String table,
      String repository,
      String ratings_column)
    {
      this();
      this.username = username;
      this.table = table;
      this.repository = repository;
      this.ratings_column = ratings_column;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRatingsColumn_args(checkRatingsColumn_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetRepository()) {
        this.repository = other.repository;
      }
      if (other.isSetRatings_column()) {
        this.ratings_column = other.ratings_column;
      }
    }

    public checkRatingsColumn_args deepCopy() {
      return new checkRatingsColumn_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.table = null;
      this.repository = null;
      this.ratings_column = null;
    }

    public String getUsername() {
      return this.username;
    }

    public checkRatingsColumn_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public checkRatingsColumn_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getRepository() {
      return this.repository;
    }

    public checkRatingsColumn_args setRepository(String repository) {
      this.repository = repository;
      return this;
    }

    public void unsetRepository() {
      this.repository = null;
    }

    /** Returns true if field repository is set (has been assigned a value) and false otherwise */
    public boolean isSetRepository() {
      return this.repository != null;
    }

    public void setRepositoryIsSet(boolean value) {
      if (!value) {
        this.repository = null;
      }
    }

    public String getRatings_column() {
      return this.ratings_column;
    }

    public checkRatingsColumn_args setRatings_column(String ratings_column) {
      this.ratings_column = ratings_column;
      return this;
    }

    public void unsetRatings_column() {
      this.ratings_column = null;
    }

    /** Returns true if field ratings_column is set (has been assigned a value) and false otherwise */
    public boolean isSetRatings_column() {
      return this.ratings_column != null;
    }

    public void setRatings_columnIsSet(boolean value) {
      if (!value) {
        this.ratings_column = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case REPOSITORY:
        if (value == null) {
          unsetRepository();
        } else {
          setRepository((String)value);
        }
        break;

      case RATINGS_COLUMN:
        if (value == null) {
          unsetRatings_column();
        } else {
          setRatings_column((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case TABLE:
        return getTable();

      case REPOSITORY:
        return getRepository();

      case RATINGS_COLUMN:
        return getRatings_column();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case TABLE:
        return isSetTable();
      case REPOSITORY:
        return isSetRepository();
      case RATINGS_COLUMN:
        return isSetRatings_column();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkRatingsColumn_args)
        return this.equals((checkRatingsColumn_args)that);
      return false;
    }

    public boolean equals(checkRatingsColumn_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_repository = true && this.isSetRepository();
      boolean that_present_repository = true && that.isSetRepository();
      if (this_present_repository || that_present_repository) {
        if (!(this_present_repository && that_present_repository))
          return false;
        if (!this.repository.equals(that.repository))
          return false;
      }

      boolean this_present_ratings_column = true && this.isSetRatings_column();
      boolean that_present_ratings_column = true && that.isSetRatings_column();
      if (this_present_ratings_column || that_present_ratings_column) {
        if (!(this_present_ratings_column && that_present_ratings_column))
          return false;
        if (!this.ratings_column.equals(that.ratings_column))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      boolean present_repository = true && (isSetRepository());
      list.add(present_repository);
      if (present_repository)
        list.add(repository);

      boolean present_ratings_column = true && (isSetRatings_column());
      list.add(present_ratings_column);
      if (present_ratings_column)
        list.add(ratings_column);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkRatingsColumn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepository()).compareTo(other.isSetRepository());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepository()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repository, other.repository);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRatings_column()).compareTo(other.isSetRatings_column());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatings_column()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratings_column, other.ratings_column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkRatingsColumn_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repository:");
      if (this.repository == null) {
        sb.append("null");
      } else {
        sb.append(this.repository);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratings_column:");
      if (this.ratings_column == null) {
        sb.append("null");
      } else {
        sb.append(this.ratings_column);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRatingsColumn_argsStandardSchemeFactory implements SchemeFactory {
      public checkRatingsColumn_argsStandardScheme getScheme() {
        return new checkRatingsColumn_argsStandardScheme();
      }
    }

    private static class checkRatingsColumn_argsStandardScheme extends StandardScheme<checkRatingsColumn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRatingsColumn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REPOSITORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repository = iprot.readString();
                struct.setRepositoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RATINGS_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ratings_column = iprot.readString();
                struct.setRatings_columnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRatingsColumn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.repository != null) {
          oprot.writeFieldBegin(REPOSITORY_FIELD_DESC);
          oprot.writeString(struct.repository);
          oprot.writeFieldEnd();
        }
        if (struct.ratings_column != null) {
          oprot.writeFieldBegin(RATINGS_COLUMN_FIELD_DESC);
          oprot.writeString(struct.ratings_column);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRatingsColumn_argsTupleSchemeFactory implements SchemeFactory {
      public checkRatingsColumn_argsTupleScheme getScheme() {
        return new checkRatingsColumn_argsTupleScheme();
      }
    }

    private static class checkRatingsColumn_argsTupleScheme extends TupleScheme<checkRatingsColumn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRatingsColumn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetTable()) {
          optionals.set(1);
        }
        if (struct.isSetRepository()) {
          optionals.set(2);
        }
        if (struct.isSetRatings_column()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetRepository()) {
          oprot.writeString(struct.repository);
        }
        if (struct.isSetRatings_column()) {
          oprot.writeString(struct.ratings_column);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRatingsColumn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(2)) {
          struct.repository = iprot.readString();
          struct.setRepositoryIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ratings_column = iprot.readString();
          struct.setRatings_columnIsSet(true);
        }
      }
    }

  }

  public static class checkRatingsColumn_result implements org.apache.thrift.TBase<checkRatingsColumn_result, checkRatingsColumn_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkRatingsColumn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRatingsColumn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkRatingsColumn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkRatingsColumn_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRatingsColumn_result.class, metaDataMap);
    }

    public checkRatingsColumn_result() {
    }

    public checkRatingsColumn_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRatingsColumn_result(checkRatingsColumn_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkRatingsColumn_result deepCopy() {
      return new checkRatingsColumn_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkRatingsColumn_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkRatingsColumn_result)
        return this.equals((checkRatingsColumn_result)that);
      return false;
    }

    public boolean equals(checkRatingsColumn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkRatingsColumn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkRatingsColumn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRatingsColumn_resultStandardSchemeFactory implements SchemeFactory {
      public checkRatingsColumn_resultStandardScheme getScheme() {
        return new checkRatingsColumn_resultStandardScheme();
      }
    }

    private static class checkRatingsColumn_resultStandardScheme extends StandardScheme<checkRatingsColumn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRatingsColumn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRatingsColumn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRatingsColumn_resultTupleSchemeFactory implements SchemeFactory {
      public checkRatingsColumn_resultTupleScheme getScheme() {
        return new checkRatingsColumn_resultTupleScheme();
      }
    }

    private static class checkRatingsColumn_resultTupleScheme extends TupleScheme<checkRatingsColumn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRatingsColumn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRatingsColumn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecommenders_args implements org.apache.thrift.TBase<getRecommenders_args, getRecommenders_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommenders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommenders_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecommenders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecommenders_argsTupleSchemeFactory());
    }

    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommenders_args.class, metaDataMap);
    }

    public getRecommenders_args() {
    }

    public getRecommenders_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommenders_args(getRecommenders_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getRecommenders_args deepCopy() {
      return new getRecommenders_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getRecommenders_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommenders_args)
        return this.equals((getRecommenders_args)that);
      return false;
    }

    public boolean equals(getRecommenders_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecommenders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecommenders_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecommenders_argsStandardSchemeFactory implements SchemeFactory {
      public getRecommenders_argsStandardScheme getScheme() {
        return new getRecommenders_argsStandardScheme();
      }
    }

    private static class getRecommenders_argsStandardScheme extends StandardScheme<getRecommenders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommenders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommenders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecommenders_argsTupleSchemeFactory implements SchemeFactory {
      public getRecommenders_argsTupleScheme getScheme() {
        return new getRecommenders_argsTupleScheme();
      }
    }

    private static class getRecommenders_argsTupleScheme extends TupleScheme<getRecommenders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecommenders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecommenders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class getRecommenders_result implements org.apache.thrift.TBase<getRecommenders_result, getRecommenders_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecommenders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecommenders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecommenders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecommenders_resultTupleSchemeFactory());
    }

    public List<Recommender> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Recommender.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecommenders_result.class, metaDataMap);
    }

    public getRecommenders_result() {
    }

    public getRecommenders_result(
      List<Recommender> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommenders_result(getRecommenders_result other) {
      if (other.isSetSuccess()) {
        List<Recommender> __this__success = new ArrayList<Recommender>(other.success.size());
        for (Recommender other_element : other.success) {
          __this__success.add(new Recommender(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRecommenders_result deepCopy() {
      return new getRecommenders_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Recommender> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Recommender elem) {
      if (this.success == null) {
        this.success = new ArrayList<Recommender>();
      }
      this.success.add(elem);
    }

    public List<Recommender> getSuccess() {
      return this.success;
    }

    public getRecommenders_result setSuccess(List<Recommender> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Recommender>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommenders_result)
        return this.equals((getRecommenders_result)that);
      return false;
    }

    public boolean equals(getRecommenders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecommenders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecommenders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecommenders_resultStandardSchemeFactory implements SchemeFactory {
      public getRecommenders_resultStandardScheme getScheme() {
        return new getRecommenders_resultStandardScheme();
      }
    }

    private static class getRecommenders_resultStandardScheme extends StandardScheme<getRecommenders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecommenders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                  struct.success = new ArrayList<Recommender>(_list132.size);
                  Recommender _elem133;
                  for (int _i134 = 0; _i134 < _list132.size; ++_i134)
                  {
                    _elem133 = new Recommender();
                    _elem133.read(iprot);
                    struct.success.add(_elem133);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecommenders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Recommender _iter135 : struct.success)
            {
              _iter135.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecommenders_resultTupleSchemeFactory implements SchemeFactory {
      public getRecommenders_resultTupleScheme getScheme() {
        return new getRecommenders_resultTupleScheme();
      }
    }

    private static class getRecommenders_resultTupleScheme extends TupleScheme<getRecommenders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecommenders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Recommender _iter136 : struct.success)
            {
              _iter136.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecommenders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Recommender>(_list137.size);
            Recommender _elem138;
            for (int _i139 = 0; _i139 < _list137.size; ++_i139)
            {
              _elem138 = new Recommender();
              _elem138.read(iprot);
              struct.success.add(_elem138);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProfilePicture_args implements org.apache.thrift.TBase<getProfilePicture_args, getProfilePicture_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfilePicture_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfilePicture_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfilePicture_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfilePicture_argsTupleSchemeFactory());
    }

    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfilePicture_args.class, metaDataMap);
    }

    public getProfilePicture_args() {
    }

    public getProfilePicture_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfilePicture_args(getProfilePicture_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getProfilePicture_args deepCopy() {
      return new getProfilePicture_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getProfilePicture_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfilePicture_args)
        return this.equals((getProfilePicture_args)that);
      return false;
    }

    public boolean equals(getProfilePicture_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfilePicture_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfilePicture_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfilePicture_argsStandardSchemeFactory implements SchemeFactory {
      public getProfilePicture_argsStandardScheme getScheme() {
        return new getProfilePicture_argsStandardScheme();
      }
    }

    private static class getProfilePicture_argsStandardScheme extends StandardScheme<getProfilePicture_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfilePicture_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfilePicture_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfilePicture_argsTupleSchemeFactory implements SchemeFactory {
      public getProfilePicture_argsTupleScheme getScheme() {
        return new getProfilePicture_argsTupleScheme();
      }
    }

    private static class getProfilePicture_argsTupleScheme extends TupleScheme<getProfilePicture_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfilePicture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfilePicture_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class getProfilePicture_result implements org.apache.thrift.TBase<getProfilePicture_result, getProfilePicture_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfilePicture_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfilePicture_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfilePicture_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfilePicture_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfilePicture_result.class, metaDataMap);
    }

    public getProfilePicture_result() {
    }

    public getProfilePicture_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfilePicture_result(getProfilePicture_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProfilePicture_result deepCopy() {
      return new getProfilePicture_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProfilePicture_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfilePicture_result)
        return this.equals((getProfilePicture_result)that);
      return false;
    }

    public boolean equals(getProfilePicture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfilePicture_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfilePicture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfilePicture_resultStandardSchemeFactory implements SchemeFactory {
      public getProfilePicture_resultStandardScheme getScheme() {
        return new getProfilePicture_resultStandardScheme();
      }
    }

    private static class getProfilePicture_resultStandardScheme extends StandardScheme<getProfilePicture_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfilePicture_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfilePicture_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfilePicture_resultTupleSchemeFactory implements SchemeFactory {
      public getProfilePicture_resultTupleScheme getScheme() {
        return new getProfilePicture_resultTupleScheme();
      }
    }

    private static class getProfilePicture_resultTupleScheme extends TupleScheme<getProfilePicture_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfilePicture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfilePicture_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveFBProfilePic_args implements org.apache.thrift.TBase<saveFBProfilePic_args, saveFBProfilePic_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveFBProfilePic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFBProfilePic_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FB_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fbUsername", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFBProfilePic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFBProfilePic_argsTupleSchemeFactory());
    }

    public String username; // required
    public String fbUsername; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      FB_USERNAME((short)2, "fbUsername");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // FB_USERNAME
            return FB_USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FB_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("fbUsername", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFBProfilePic_args.class, metaDataMap);
    }

    public saveFBProfilePic_args() {
    }

    public saveFBProfilePic_args(
      String username,
      String fbUsername)
    {
      this();
      this.username = username;
      this.fbUsername = fbUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFBProfilePic_args(saveFBProfilePic_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetFbUsername()) {
        this.fbUsername = other.fbUsername;
      }
    }

    public saveFBProfilePic_args deepCopy() {
      return new saveFBProfilePic_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.fbUsername = null;
    }

    public String getUsername() {
      return this.username;
    }

    public saveFBProfilePic_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getFbUsername() {
      return this.fbUsername;
    }

    public saveFBProfilePic_args setFbUsername(String fbUsername) {
      this.fbUsername = fbUsername;
      return this;
    }

    public void unsetFbUsername() {
      this.fbUsername = null;
    }

    /** Returns true if field fbUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetFbUsername() {
      return this.fbUsername != null;
    }

    public void setFbUsernameIsSet(boolean value) {
      if (!value) {
        this.fbUsername = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case FB_USERNAME:
        if (value == null) {
          unsetFbUsername();
        } else {
          setFbUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case FB_USERNAME:
        return getFbUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case FB_USERNAME:
        return isSetFbUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFBProfilePic_args)
        return this.equals((saveFBProfilePic_args)that);
      return false;
    }

    public boolean equals(saveFBProfilePic_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_fbUsername = true && this.isSetFbUsername();
      boolean that_present_fbUsername = true && that.isSetFbUsername();
      if (this_present_fbUsername || that_present_fbUsername) {
        if (!(this_present_fbUsername && that_present_fbUsername))
          return false;
        if (!this.fbUsername.equals(that.fbUsername))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_fbUsername = true && (isSetFbUsername());
      list.add(present_fbUsername);
      if (present_fbUsername)
        list.add(fbUsername);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveFBProfilePic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFbUsername()).compareTo(other.isSetFbUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFbUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fbUsername, other.fbUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFBProfilePic_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fbUsername:");
      if (this.fbUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.fbUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFBProfilePic_argsStandardSchemeFactory implements SchemeFactory {
      public saveFBProfilePic_argsStandardScheme getScheme() {
        return new saveFBProfilePic_argsStandardScheme();
      }
    }

    private static class saveFBProfilePic_argsStandardScheme extends StandardScheme<saveFBProfilePic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFBProfilePic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FB_USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fbUsername = iprot.readString();
                struct.setFbUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFBProfilePic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.fbUsername != null) {
          oprot.writeFieldBegin(FB_USERNAME_FIELD_DESC);
          oprot.writeString(struct.fbUsername);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFBProfilePic_argsTupleSchemeFactory implements SchemeFactory {
      public saveFBProfilePic_argsTupleScheme getScheme() {
        return new saveFBProfilePic_argsTupleScheme();
      }
    }

    private static class saveFBProfilePic_argsTupleScheme extends TupleScheme<saveFBProfilePic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFBProfilePic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetFbUsername()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetFbUsername()) {
          oprot.writeString(struct.fbUsername);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFBProfilePic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fbUsername = iprot.readString();
          struct.setFbUsernameIsSet(true);
        }
      }
    }

  }

  public static class saveFBProfilePic_result implements org.apache.thrift.TBase<saveFBProfilePic_result, saveFBProfilePic_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveFBProfilePic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFBProfilePic_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFBProfilePic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFBProfilePic_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFBProfilePic_result.class, metaDataMap);
    }

    public saveFBProfilePic_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFBProfilePic_result(saveFBProfilePic_result other) {
    }

    public saveFBProfilePic_result deepCopy() {
      return new saveFBProfilePic_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFBProfilePic_result)
        return this.equals((saveFBProfilePic_result)that);
      return false;
    }

    public boolean equals(saveFBProfilePic_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveFBProfilePic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFBProfilePic_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFBProfilePic_resultStandardSchemeFactory implements SchemeFactory {
      public saveFBProfilePic_resultStandardScheme getScheme() {
        return new saveFBProfilePic_resultStandardScheme();
      }
    }

    private static class saveFBProfilePic_resultStandardScheme extends StandardScheme<saveFBProfilePic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFBProfilePic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFBProfilePic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFBProfilePic_resultTupleSchemeFactory implements SchemeFactory {
      public saveFBProfilePic_resultTupleScheme getScheme() {
        return new saveFBProfilePic_resultTupleScheme();
      }
    }

    private static class saveFBProfilePic_resultTupleScheme extends TupleScheme<saveFBProfilePic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFBProfilePic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFBProfilePic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteRecommender_args implements org.apache.thrift.TBase<deleteRecommender_args, deleteRecommender_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRecommender_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRecommender_args");

    private static final org.apache.thrift.protocol.TField CLIENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("clientKey", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRecommender_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRecommender_argsTupleSchemeFactory());
    }

    public String clientKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_KEY((short)1, "clientKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_KEY
            return CLIENT_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("clientKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRecommender_args.class, metaDataMap);
    }

    public deleteRecommender_args() {
    }

    public deleteRecommender_args(
      String clientKey)
    {
      this();
      this.clientKey = clientKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRecommender_args(deleteRecommender_args other) {
      if (other.isSetClientKey()) {
        this.clientKey = other.clientKey;
      }
    }

    public deleteRecommender_args deepCopy() {
      return new deleteRecommender_args(this);
    }

    @Override
    public void clear() {
      this.clientKey = null;
    }

    public String getClientKey() {
      return this.clientKey;
    }

    public deleteRecommender_args setClientKey(String clientKey) {
      this.clientKey = clientKey;
      return this;
    }

    public void unsetClientKey() {
      this.clientKey = null;
    }

    /** Returns true if field clientKey is set (has been assigned a value) and false otherwise */
    public boolean isSetClientKey() {
      return this.clientKey != null;
    }

    public void setClientKeyIsSet(boolean value) {
      if (!value) {
        this.clientKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_KEY:
        if (value == null) {
          unsetClientKey();
        } else {
          setClientKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_KEY:
        return getClientKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_KEY:
        return isSetClientKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRecommender_args)
        return this.equals((deleteRecommender_args)that);
      return false;
    }

    public boolean equals(deleteRecommender_args that) {
      if (that == null)
        return false;

      boolean this_present_clientKey = true && this.isSetClientKey();
      boolean that_present_clientKey = true && that.isSetClientKey();
      if (this_present_clientKey || that_present_clientKey) {
        if (!(this_present_clientKey && that_present_clientKey))
          return false;
        if (!this.clientKey.equals(that.clientKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientKey = true && (isSetClientKey());
      list.add(present_clientKey);
      if (present_clientKey)
        list.add(clientKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRecommender_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientKey()).compareTo(other.isSetClientKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientKey, other.clientKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRecommender_args(");
      boolean first = true;

      sb.append("clientKey:");
      if (this.clientKey == null) {
        sb.append("null");
      } else {
        sb.append(this.clientKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRecommender_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRecommender_argsStandardScheme getScheme() {
        return new deleteRecommender_argsStandardScheme();
      }
    }

    private static class deleteRecommender_argsStandardScheme extends StandardScheme<deleteRecommender_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRecommender_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientKey = iprot.readString();
                struct.setClientKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRecommender_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientKey != null) {
          oprot.writeFieldBegin(CLIENT_KEY_FIELD_DESC);
          oprot.writeString(struct.clientKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRecommender_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRecommender_argsTupleScheme getScheme() {
        return new deleteRecommender_argsTupleScheme();
      }
    }

    private static class deleteRecommender_argsTupleScheme extends TupleScheme<deleteRecommender_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRecommender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientKey()) {
          oprot.writeString(struct.clientKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRecommender_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientKey = iprot.readString();
          struct.setClientKeyIsSet(true);
        }
      }
    }

  }

  public static class deleteRecommender_result implements org.apache.thrift.TBase<deleteRecommender_result, deleteRecommender_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRecommender_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRecommender_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRecommender_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRecommender_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRecommender_result.class, metaDataMap);
    }

    public deleteRecommender_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRecommender_result(deleteRecommender_result other) {
    }

    public deleteRecommender_result deepCopy() {
      return new deleteRecommender_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRecommender_result)
        return this.equals((deleteRecommender_result)that);
      return false;
    }

    public boolean equals(deleteRecommender_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRecommender_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRecommender_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRecommender_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRecommender_resultStandardScheme getScheme() {
        return new deleteRecommender_resultStandardScheme();
      }
    }

    private static class deleteRecommender_resultStandardScheme extends StandardScheme<deleteRecommender_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRecommender_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRecommender_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRecommender_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRecommender_resultTupleScheme getScheme() {
        return new deleteRecommender_resultTupleScheme();
      }
    }

    private static class deleteRecommender_resultTupleScheme extends TupleScheme<deleteRecommender_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRecommender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRecommender_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateTemplate_args implements org.apache.thrift.TBase<updateTemplate_args, updateTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTemplate_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("video", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ITEM_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("itemTypes", org.apache.thrift.protocol.TType.MAP, (short)7);
    private static final org.apache.thrift.protocol.TField DISPLAY_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("displayItems", org.apache.thrift.protocol.TType.LIST, (short)8);
    private static final org.apache.thrift.protocol.TField MAX_RATING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRatingVal", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NUM_RECS_FIELD_DESC = new org.apache.thrift.protocol.TField("numRecs", org.apache.thrift.protocol.TType.I64, (short)10);
    private static final org.apache.thrift.protocol.TField RECOMMENDER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recommenderName", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField CLIENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("clientKey", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField HOMEPAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("homepage", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField CREATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorName", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField REPO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repoName", org.apache.thrift.protocol.TType.STRING, (short)15);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)16);
    private static final org.apache.thrift.protocol.TField RATINGS_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("ratingsColumn", org.apache.thrift.protocol.TType.STRING, (short)17);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTemplate_argsTupleSchemeFactory());
    }

    public String username; // required
    public String primaryKey; // required
    public String title; // required
    public String description; // required
    public String image; // required
    public String video; // required
    public Map<String,String> itemTypes; // required
    public List<String> displayItems; // required
    public long maxRatingVal; // required
    public long numRecs; // required
    public String recommenderName; // required
    public String clientKey; // required
    public String homepage; // required
    public String creatorName; // required
    public String repoName; // required
    public String tableName; // required
    public String ratingsColumn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PRIMARY_KEY((short)2, "primaryKey"),
      TITLE((short)3, "title"),
      DESCRIPTION((short)4, "description"),
      IMAGE((short)5, "image"),
      VIDEO((short)6, "video"),
      ITEM_TYPES((short)7, "itemTypes"),
      DISPLAY_ITEMS((short)8, "displayItems"),
      MAX_RATING_VAL((short)9, "maxRatingVal"),
      NUM_RECS((short)10, "numRecs"),
      RECOMMENDER_NAME((short)11, "recommenderName"),
      CLIENT_KEY((short)12, "clientKey"),
      HOMEPAGE((short)13, "homepage"),
      CREATOR_NAME((short)14, "creatorName"),
      REPO_NAME((short)15, "repoName"),
      TABLE_NAME((short)16, "tableName"),
      RATINGS_COLUMN((short)17, "ratingsColumn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PRIMARY_KEY
            return PRIMARY_KEY;
          case 3: // TITLE
            return TITLE;
          case 4: // DESCRIPTION
            return DESCRIPTION;
          case 5: // IMAGE
            return IMAGE;
          case 6: // VIDEO
            return VIDEO;
          case 7: // ITEM_TYPES
            return ITEM_TYPES;
          case 8: // DISPLAY_ITEMS
            return DISPLAY_ITEMS;
          case 9: // MAX_RATING_VAL
            return MAX_RATING_VAL;
          case 10: // NUM_RECS
            return NUM_RECS;
          case 11: // RECOMMENDER_NAME
            return RECOMMENDER_NAME;
          case 12: // CLIENT_KEY
            return CLIENT_KEY;
          case 13: // HOMEPAGE
            return HOMEPAGE;
          case 14: // CREATOR_NAME
            return CREATOR_NAME;
          case 15: // REPO_NAME
            return REPO_NAME;
          case 16: // TABLE_NAME
            return TABLE_NAME;
          case 17: // RATINGS_COLUMN
            return RATINGS_COLUMN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXRATINGVAL_ISSET_ID = 0;
    private static final int __NUMRECS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primaryKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VIDEO, new org.apache.thrift.meta_data.FieldMetaData("video", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPES, new org.apache.thrift.meta_data.FieldMetaData("itemTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DISPLAY_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("displayItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MAX_RATING_VAL, new org.apache.thrift.meta_data.FieldMetaData("maxRatingVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM_RECS, new org.apache.thrift.meta_data.FieldMetaData("numRecs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RECOMMENDER_NAME, new org.apache.thrift.meta_data.FieldMetaData("recommenderName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("clientKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOMEPAGE, new org.apache.thrift.meta_data.FieldMetaData("homepage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("creatorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPO_NAME, new org.apache.thrift.meta_data.FieldMetaData("repoName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RATINGS_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("ratingsColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTemplate_args.class, metaDataMap);
    }

    public updateTemplate_args() {
    }

    public updateTemplate_args(
      String username,
      String primaryKey,
      String title,
      String description,
      String image,
      String video,
      Map<String,String> itemTypes,
      List<String> displayItems,
      long maxRatingVal,
      long numRecs,
      String recommenderName,
      String clientKey,
      String homepage,
      String creatorName,
      String repoName,
      String tableName,
      String ratingsColumn)
    {
      this();
      this.username = username;
      this.primaryKey = primaryKey;
      this.title = title;
      this.description = description;
      this.image = image;
      this.video = video;
      this.itemTypes = itemTypes;
      this.displayItems = displayItems;
      this.maxRatingVal = maxRatingVal;
      setMaxRatingValIsSet(true);
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.recommenderName = recommenderName;
      this.clientKey = clientKey;
      this.homepage = homepage;
      this.creatorName = creatorName;
      this.repoName = repoName;
      this.tableName = tableName;
      this.ratingsColumn = ratingsColumn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTemplate_args(updateTemplate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPrimaryKey()) {
        this.primaryKey = other.primaryKey;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetImage()) {
        this.image = other.image;
      }
      if (other.isSetVideo()) {
        this.video = other.video;
      }
      if (other.isSetItemTypes()) {
        Map<String,String> __this__itemTypes = new HashMap<String,String>(other.itemTypes);
        this.itemTypes = __this__itemTypes;
      }
      if (other.isSetDisplayItems()) {
        List<String> __this__displayItems = new ArrayList<String>(other.displayItems);
        this.displayItems = __this__displayItems;
      }
      this.maxRatingVal = other.maxRatingVal;
      this.numRecs = other.numRecs;
      if (other.isSetRecommenderName()) {
        this.recommenderName = other.recommenderName;
      }
      if (other.isSetClientKey()) {
        this.clientKey = other.clientKey;
      }
      if (other.isSetHomepage()) {
        this.homepage = other.homepage;
      }
      if (other.isSetCreatorName()) {
        this.creatorName = other.creatorName;
      }
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetRatingsColumn()) {
        this.ratingsColumn = other.ratingsColumn;
      }
    }

    public updateTemplate_args deepCopy() {
      return new updateTemplate_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.primaryKey = null;
      this.title = null;
      this.description = null;
      this.image = null;
      this.video = null;
      this.itemTypes = null;
      this.displayItems = null;
      setMaxRatingValIsSet(false);
      this.maxRatingVal = 0;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      this.recommenderName = null;
      this.clientKey = null;
      this.homepage = null;
      this.creatorName = null;
      this.repoName = null;
      this.tableName = null;
      this.ratingsColumn = null;
    }

    public String getUsername() {
      return this.username;
    }

    public updateTemplate_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPrimaryKey() {
      return this.primaryKey;
    }

    public updateTemplate_args setPrimaryKey(String primaryKey) {
      this.primaryKey = primaryKey;
      return this;
    }

    public void unsetPrimaryKey() {
      this.primaryKey = null;
    }

    /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryKey() {
      return this.primaryKey != null;
    }

    public void setPrimaryKeyIsSet(boolean value) {
      if (!value) {
        this.primaryKey = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public updateTemplate_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public updateTemplate_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public String getImage() {
      return this.image;
    }

    public updateTemplate_args setImage(String image) {
      this.image = image;
      return this;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public String getVideo() {
      return this.video;
    }

    public updateTemplate_args setVideo(String video) {
      this.video = video;
      return this;
    }

    public void unsetVideo() {
      this.video = null;
    }

    /** Returns true if field video is set (has been assigned a value) and false otherwise */
    public boolean isSetVideo() {
      return this.video != null;
    }

    public void setVideoIsSet(boolean value) {
      if (!value) {
        this.video = null;
      }
    }

    public int getItemTypesSize() {
      return (this.itemTypes == null) ? 0 : this.itemTypes.size();
    }

    public void putToItemTypes(String key, String val) {
      if (this.itemTypes == null) {
        this.itemTypes = new HashMap<String,String>();
      }
      this.itemTypes.put(key, val);
    }

    public Map<String,String> getItemTypes() {
      return this.itemTypes;
    }

    public updateTemplate_args setItemTypes(Map<String,String> itemTypes) {
      this.itemTypes = itemTypes;
      return this;
    }

    public void unsetItemTypes() {
      this.itemTypes = null;
    }

    /** Returns true if field itemTypes is set (has been assigned a value) and false otherwise */
    public boolean isSetItemTypes() {
      return this.itemTypes != null;
    }

    public void setItemTypesIsSet(boolean value) {
      if (!value) {
        this.itemTypes = null;
      }
    }

    public int getDisplayItemsSize() {
      return (this.displayItems == null) ? 0 : this.displayItems.size();
    }

    public java.util.Iterator<String> getDisplayItemsIterator() {
      return (this.displayItems == null) ? null : this.displayItems.iterator();
    }

    public void addToDisplayItems(String elem) {
      if (this.displayItems == null) {
        this.displayItems = new ArrayList<String>();
      }
      this.displayItems.add(elem);
    }

    public List<String> getDisplayItems() {
      return this.displayItems;
    }

    public updateTemplate_args setDisplayItems(List<String> displayItems) {
      this.displayItems = displayItems;
      return this;
    }

    public void unsetDisplayItems() {
      this.displayItems = null;
    }

    /** Returns true if field displayItems is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayItems() {
      return this.displayItems != null;
    }

    public void setDisplayItemsIsSet(boolean value) {
      if (!value) {
        this.displayItems = null;
      }
    }

    public long getMaxRatingVal() {
      return this.maxRatingVal;
    }

    public updateTemplate_args setMaxRatingVal(long maxRatingVal) {
      this.maxRatingVal = maxRatingVal;
      setMaxRatingValIsSet(true);
      return this;
    }

    public void unsetMaxRatingVal() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRATINGVAL_ISSET_ID);
    }

    /** Returns true if field maxRatingVal is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxRatingVal() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXRATINGVAL_ISSET_ID);
    }

    public void setMaxRatingValIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRATINGVAL_ISSET_ID, value);
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public updateTemplate_args setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      return this;
    }

    public void unsetNumRecs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMRECS_ISSET_ID);
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMRECS_ISSET_ID, value);
    }

    public String getRecommenderName() {
      return this.recommenderName;
    }

    public updateTemplate_args setRecommenderName(String recommenderName) {
      this.recommenderName = recommenderName;
      return this;
    }

    public void unsetRecommenderName() {
      this.recommenderName = null;
    }

    /** Returns true if field recommenderName is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommenderName() {
      return this.recommenderName != null;
    }

    public void setRecommenderNameIsSet(boolean value) {
      if (!value) {
        this.recommenderName = null;
      }
    }

    public String getClientKey() {
      return this.clientKey;
    }

    public updateTemplate_args setClientKey(String clientKey) {
      this.clientKey = clientKey;
      return this;
    }

    public void unsetClientKey() {
      this.clientKey = null;
    }

    /** Returns true if field clientKey is set (has been assigned a value) and false otherwise */
    public boolean isSetClientKey() {
      return this.clientKey != null;
    }

    public void setClientKeyIsSet(boolean value) {
      if (!value) {
        this.clientKey = null;
      }
    }

    public String getHomepage() {
      return this.homepage;
    }

    public updateTemplate_args setHomepage(String homepage) {
      this.homepage = homepage;
      return this;
    }

    public void unsetHomepage() {
      this.homepage = null;
    }

    /** Returns true if field homepage is set (has been assigned a value) and false otherwise */
    public boolean isSetHomepage() {
      return this.homepage != null;
    }

    public void setHomepageIsSet(boolean value) {
      if (!value) {
        this.homepage = null;
      }
    }

    public String getCreatorName() {
      return this.creatorName;
    }

    public updateTemplate_args setCreatorName(String creatorName) {
      this.creatorName = creatorName;
      return this;
    }

    public void unsetCreatorName() {
      this.creatorName = null;
    }

    /** Returns true if field creatorName is set (has been assigned a value) and false otherwise */
    public boolean isSetCreatorName() {
      return this.creatorName != null;
    }

    public void setCreatorNameIsSet(boolean value) {
      if (!value) {
        this.creatorName = null;
      }
    }

    public String getRepoName() {
      return this.repoName;
    }

    public updateTemplate_args setRepoName(String repoName) {
      this.repoName = repoName;
      return this;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public updateTemplate_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getRatingsColumn() {
      return this.ratingsColumn;
    }

    public updateTemplate_args setRatingsColumn(String ratingsColumn) {
      this.ratingsColumn = ratingsColumn;
      return this;
    }

    public void unsetRatingsColumn() {
      this.ratingsColumn = null;
    }

    /** Returns true if field ratingsColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetRatingsColumn() {
      return this.ratingsColumn != null;
    }

    public void setRatingsColumnIsSet(boolean value) {
      if (!value) {
        this.ratingsColumn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PRIMARY_KEY:
        if (value == null) {
          unsetPrimaryKey();
        } else {
          setPrimaryKey((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case IMAGE:
        if (value == null) {
          unsetImage();
        } else {
          setImage((String)value);
        }
        break;

      case VIDEO:
        if (value == null) {
          unsetVideo();
        } else {
          setVideo((String)value);
        }
        break;

      case ITEM_TYPES:
        if (value == null) {
          unsetItemTypes();
        } else {
          setItemTypes((Map<String,String>)value);
        }
        break;

      case DISPLAY_ITEMS:
        if (value == null) {
          unsetDisplayItems();
        } else {
          setDisplayItems((List<String>)value);
        }
        break;

      case MAX_RATING_VAL:
        if (value == null) {
          unsetMaxRatingVal();
        } else {
          setMaxRatingVal((Long)value);
        }
        break;

      case NUM_RECS:
        if (value == null) {
          unsetNumRecs();
        } else {
          setNumRecs((Long)value);
        }
        break;

      case RECOMMENDER_NAME:
        if (value == null) {
          unsetRecommenderName();
        } else {
          setRecommenderName((String)value);
        }
        break;

      case CLIENT_KEY:
        if (value == null) {
          unsetClientKey();
        } else {
          setClientKey((String)value);
        }
        break;

      case HOMEPAGE:
        if (value == null) {
          unsetHomepage();
        } else {
          setHomepage((String)value);
        }
        break;

      case CREATOR_NAME:
        if (value == null) {
          unsetCreatorName();
        } else {
          setCreatorName((String)value);
        }
        break;

      case REPO_NAME:
        if (value == null) {
          unsetRepoName();
        } else {
          setRepoName((String)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case RATINGS_COLUMN:
        if (value == null) {
          unsetRatingsColumn();
        } else {
          setRatingsColumn((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PRIMARY_KEY:
        return getPrimaryKey();

      case TITLE:
        return getTitle();

      case DESCRIPTION:
        return getDescription();

      case IMAGE:
        return getImage();

      case VIDEO:
        return getVideo();

      case ITEM_TYPES:
        return getItemTypes();

      case DISPLAY_ITEMS:
        return getDisplayItems();

      case MAX_RATING_VAL:
        return Long.valueOf(getMaxRatingVal());

      case NUM_RECS:
        return Long.valueOf(getNumRecs());

      case RECOMMENDER_NAME:
        return getRecommenderName();

      case CLIENT_KEY:
        return getClientKey();

      case HOMEPAGE:
        return getHomepage();

      case CREATOR_NAME:
        return getCreatorName();

      case REPO_NAME:
        return getRepoName();

      case TABLE_NAME:
        return getTableName();

      case RATINGS_COLUMN:
        return getRatingsColumn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PRIMARY_KEY:
        return isSetPrimaryKey();
      case TITLE:
        return isSetTitle();
      case DESCRIPTION:
        return isSetDescription();
      case IMAGE:
        return isSetImage();
      case VIDEO:
        return isSetVideo();
      case ITEM_TYPES:
        return isSetItemTypes();
      case DISPLAY_ITEMS:
        return isSetDisplayItems();
      case MAX_RATING_VAL:
        return isSetMaxRatingVal();
      case NUM_RECS:
        return isSetNumRecs();
      case RECOMMENDER_NAME:
        return isSetRecommenderName();
      case CLIENT_KEY:
        return isSetClientKey();
      case HOMEPAGE:
        return isSetHomepage();
      case CREATOR_NAME:
        return isSetCreatorName();
      case REPO_NAME:
        return isSetRepoName();
      case TABLE_NAME:
        return isSetTableName();
      case RATINGS_COLUMN:
        return isSetRatingsColumn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTemplate_args)
        return this.equals((updateTemplate_args)that);
      return false;
    }

    public boolean equals(updateTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_primaryKey = true && this.isSetPrimaryKey();
      boolean that_present_primaryKey = true && that.isSetPrimaryKey();
      if (this_present_primaryKey || that_present_primaryKey) {
        if (!(this_present_primaryKey && that_present_primaryKey))
          return false;
        if (!this.primaryKey.equals(that.primaryKey))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (!this.image.equals(that.image))
          return false;
      }

      boolean this_present_video = true && this.isSetVideo();
      boolean that_present_video = true && that.isSetVideo();
      if (this_present_video || that_present_video) {
        if (!(this_present_video && that_present_video))
          return false;
        if (!this.video.equals(that.video))
          return false;
      }

      boolean this_present_itemTypes = true && this.isSetItemTypes();
      boolean that_present_itemTypes = true && that.isSetItemTypes();
      if (this_present_itemTypes || that_present_itemTypes) {
        if (!(this_present_itemTypes && that_present_itemTypes))
          return false;
        if (!this.itemTypes.equals(that.itemTypes))
          return false;
      }

      boolean this_present_displayItems = true && this.isSetDisplayItems();
      boolean that_present_displayItems = true && that.isSetDisplayItems();
      if (this_present_displayItems || that_present_displayItems) {
        if (!(this_present_displayItems && that_present_displayItems))
          return false;
        if (!this.displayItems.equals(that.displayItems))
          return false;
      }

      boolean this_present_maxRatingVal = true;
      boolean that_present_maxRatingVal = true;
      if (this_present_maxRatingVal || that_present_maxRatingVal) {
        if (!(this_present_maxRatingVal && that_present_maxRatingVal))
          return false;
        if (this.maxRatingVal != that.maxRatingVal)
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_recommenderName = true && this.isSetRecommenderName();
      boolean that_present_recommenderName = true && that.isSetRecommenderName();
      if (this_present_recommenderName || that_present_recommenderName) {
        if (!(this_present_recommenderName && that_present_recommenderName))
          return false;
        if (!this.recommenderName.equals(that.recommenderName))
          return false;
      }

      boolean this_present_clientKey = true && this.isSetClientKey();
      boolean that_present_clientKey = true && that.isSetClientKey();
      if (this_present_clientKey || that_present_clientKey) {
        if (!(this_present_clientKey && that_present_clientKey))
          return false;
        if (!this.clientKey.equals(that.clientKey))
          return false;
      }

      boolean this_present_homepage = true && this.isSetHomepage();
      boolean that_present_homepage = true && that.isSetHomepage();
      if (this_present_homepage || that_present_homepage) {
        if (!(this_present_homepage && that_present_homepage))
          return false;
        if (!this.homepage.equals(that.homepage))
          return false;
      }

      boolean this_present_creatorName = true && this.isSetCreatorName();
      boolean that_present_creatorName = true && that.isSetCreatorName();
      if (this_present_creatorName || that_present_creatorName) {
        if (!(this_present_creatorName && that_present_creatorName))
          return false;
        if (!this.creatorName.equals(that.creatorName))
          return false;
      }

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_ratingsColumn = true && this.isSetRatingsColumn();
      boolean that_present_ratingsColumn = true && that.isSetRatingsColumn();
      if (this_present_ratingsColumn || that_present_ratingsColumn) {
        if (!(this_present_ratingsColumn && that_present_ratingsColumn))
          return false;
        if (!this.ratingsColumn.equals(that.ratingsColumn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_primaryKey = true && (isSetPrimaryKey());
      list.add(present_primaryKey);
      if (present_primaryKey)
        list.add(primaryKey);

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_image = true && (isSetImage());
      list.add(present_image);
      if (present_image)
        list.add(image);

      boolean present_video = true && (isSetVideo());
      list.add(present_video);
      if (present_video)
        list.add(video);

      boolean present_itemTypes = true && (isSetItemTypes());
      list.add(present_itemTypes);
      if (present_itemTypes)
        list.add(itemTypes);

      boolean present_displayItems = true && (isSetDisplayItems());
      list.add(present_displayItems);
      if (present_displayItems)
        list.add(displayItems);

      boolean present_maxRatingVal = true;
      list.add(present_maxRatingVal);
      if (present_maxRatingVal)
        list.add(maxRatingVal);

      boolean present_numRecs = true;
      list.add(present_numRecs);
      if (present_numRecs)
        list.add(numRecs);

      boolean present_recommenderName = true && (isSetRecommenderName());
      list.add(present_recommenderName);
      if (present_recommenderName)
        list.add(recommenderName);

      boolean present_clientKey = true && (isSetClientKey());
      list.add(present_clientKey);
      if (present_clientKey)
        list.add(clientKey);

      boolean present_homepage = true && (isSetHomepage());
      list.add(present_homepage);
      if (present_homepage)
        list.add(homepage);

      boolean present_creatorName = true && (isSetCreatorName());
      list.add(present_creatorName);
      if (present_creatorName)
        list.add(creatorName);

      boolean present_repoName = true && (isSetRepoName());
      list.add(present_repoName);
      if (present_repoName)
        list.add(repoName);

      boolean present_tableName = true && (isSetTableName());
      list.add(present_tableName);
      if (present_tableName)
        list.add(tableName);

      boolean present_ratingsColumn = true && (isSetRatingsColumn());
      list.add(present_ratingsColumn);
      if (present_ratingsColumn)
        list.add(ratingsColumn);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrimaryKey()).compareTo(other.isSetPrimaryKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVideo()).compareTo(other.isSetVideo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVideo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.video, other.video);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemTypes()).compareTo(other.isSetItemTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemTypes, other.itemTypes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisplayItems()).compareTo(other.isSetDisplayItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayItems, other.displayItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxRatingVal()).compareTo(other.isSetMaxRatingVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxRatingVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRatingVal, other.maxRatingVal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumRecs()).compareTo(other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecommenderName()).compareTo(other.isSetRecommenderName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommenderName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommenderName, other.recommenderName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientKey()).compareTo(other.isSetClientKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientKey, other.clientKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHomepage()).compareTo(other.isSetHomepage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHomepage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homepage, other.homepage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreatorName()).compareTo(other.isSetCreatorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreatorName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorName, other.creatorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepoName()).compareTo(other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRatingsColumn()).compareTo(other.isSetRatingsColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatingsColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratingsColumn, other.ratingsColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTemplate_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryKey:");
      if (this.primaryKey == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        sb.append(this.image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("video:");
      if (this.video == null) {
        sb.append("null");
      } else {
        sb.append(this.video);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemTypes:");
      if (this.itemTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.itemTypes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayItems:");
      if (this.displayItems == null) {
        sb.append("null");
      } else {
        sb.append(this.displayItems);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxRatingVal:");
      sb.append(this.maxRatingVal);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recommenderName:");
      if (this.recommenderName == null) {
        sb.append("null");
      } else {
        sb.append(this.recommenderName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientKey:");
      if (this.clientKey == null) {
        sb.append("null");
      } else {
        sb.append(this.clientKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("homepage:");
      if (this.homepage == null) {
        sb.append("null");
      } else {
        sb.append(this.homepage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("creatorName:");
      if (this.creatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.creatorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratingsColumn:");
      if (this.ratingsColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.ratingsColumn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public updateTemplate_argsStandardScheme getScheme() {
        return new updateTemplate_argsStandardScheme();
      }
    }

    private static class updateTemplate_argsStandardScheme extends StandardScheme<updateTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIMARY_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.primaryKey = iprot.readString();
                struct.setPrimaryKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.image = iprot.readString();
                struct.setImageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // VIDEO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.video = iprot.readString();
                struct.setVideoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ITEM_TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map140 = iprot.readMapBegin();
                  struct.itemTypes = new HashMap<String,String>(2*_map140.size);
                  String _key141;
                  String _val142;
                  for (int _i143 = 0; _i143 < _map140.size; ++_i143)
                  {
                    _key141 = iprot.readString();
                    _val142 = iprot.readString();
                    struct.itemTypes.put(_key141, _val142);
                  }
                  iprot.readMapEnd();
                }
                struct.setItemTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // DISPLAY_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.displayItems = new ArrayList<String>(_list144.size);
                  String _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = iprot.readString();
                    struct.displayItems.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setDisplayItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // MAX_RATING_VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.maxRatingVal = iprot.readI64();
                struct.setMaxRatingValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // NUM_RECS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.numRecs = iprot.readI64();
                struct.setNumRecsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // RECOMMENDER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recommenderName = iprot.readString();
                struct.setRecommenderNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // CLIENT_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientKey = iprot.readString();
                struct.setClientKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // HOMEPAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.homepage = iprot.readString();
                struct.setHomepageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // CREATOR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.creatorName = iprot.readString();
                struct.setCreatorNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // REPO_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoName = iprot.readString();
                struct.setRepoNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 16: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 17: // RATINGS_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ratingsColumn = iprot.readString();
                struct.setRatingsColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.primaryKey != null) {
          oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
          oprot.writeString(struct.primaryKey);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.image != null) {
          oprot.writeFieldBegin(IMAGE_FIELD_DESC);
          oprot.writeString(struct.image);
          oprot.writeFieldEnd();
        }
        if (struct.video != null) {
          oprot.writeFieldBegin(VIDEO_FIELD_DESC);
          oprot.writeString(struct.video);
          oprot.writeFieldEnd();
        }
        if (struct.itemTypes != null) {
          oprot.writeFieldBegin(ITEM_TYPES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.itemTypes.size()));
            for (Map.Entry<String, String> _iter147 : struct.itemTypes.entrySet())
            {
              oprot.writeString(_iter147.getKey());
              oprot.writeString(_iter147.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.displayItems != null) {
          oprot.writeFieldBegin(DISPLAY_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.displayItems.size()));
            for (String _iter148 : struct.displayItems)
            {
              oprot.writeString(_iter148);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_RATING_VAL_FIELD_DESC);
        oprot.writeI64(struct.maxRatingVal);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
        oprot.writeI64(struct.numRecs);
        oprot.writeFieldEnd();
        if (struct.recommenderName != null) {
          oprot.writeFieldBegin(RECOMMENDER_NAME_FIELD_DESC);
          oprot.writeString(struct.recommenderName);
          oprot.writeFieldEnd();
        }
        if (struct.clientKey != null) {
          oprot.writeFieldBegin(CLIENT_KEY_FIELD_DESC);
          oprot.writeString(struct.clientKey);
          oprot.writeFieldEnd();
        }
        if (struct.homepage != null) {
          oprot.writeFieldBegin(HOMEPAGE_FIELD_DESC);
          oprot.writeString(struct.homepage);
          oprot.writeFieldEnd();
        }
        if (struct.creatorName != null) {
          oprot.writeFieldBegin(CREATOR_NAME_FIELD_DESC);
          oprot.writeString(struct.creatorName);
          oprot.writeFieldEnd();
        }
        if (struct.repoName != null) {
          oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
          oprot.writeString(struct.repoName);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.ratingsColumn != null) {
          oprot.writeFieldBegin(RATINGS_COLUMN_FIELD_DESC);
          oprot.writeString(struct.ratingsColumn);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public updateTemplate_argsTupleScheme getScheme() {
        return new updateTemplate_argsTupleScheme();
      }
    }

    private static class updateTemplate_argsTupleScheme extends TupleScheme<updateTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPrimaryKey()) {
          optionals.set(1);
        }
        if (struct.isSetTitle()) {
          optionals.set(2);
        }
        if (struct.isSetDescription()) {
          optionals.set(3);
        }
        if (struct.isSetImage()) {
          optionals.set(4);
        }
        if (struct.isSetVideo()) {
          optionals.set(5);
        }
        if (struct.isSetItemTypes()) {
          optionals.set(6);
        }
        if (struct.isSetDisplayItems()) {
          optionals.set(7);
        }
        if (struct.isSetMaxRatingVal()) {
          optionals.set(8);
        }
        if (struct.isSetNumRecs()) {
          optionals.set(9);
        }
        if (struct.isSetRecommenderName()) {
          optionals.set(10);
        }
        if (struct.isSetClientKey()) {
          optionals.set(11);
        }
        if (struct.isSetHomepage()) {
          optionals.set(12);
        }
        if (struct.isSetCreatorName()) {
          optionals.set(13);
        }
        if (struct.isSetRepoName()) {
          optionals.set(14);
        }
        if (struct.isSetTableName()) {
          optionals.set(15);
        }
        if (struct.isSetRatingsColumn()) {
          optionals.set(16);
        }
        oprot.writeBitSet(optionals, 17);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPrimaryKey()) {
          oprot.writeString(struct.primaryKey);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetImage()) {
          oprot.writeString(struct.image);
        }
        if (struct.isSetVideo()) {
          oprot.writeString(struct.video);
        }
        if (struct.isSetItemTypes()) {
          {
            oprot.writeI32(struct.itemTypes.size());
            for (Map.Entry<String, String> _iter149 : struct.itemTypes.entrySet())
            {
              oprot.writeString(_iter149.getKey());
              oprot.writeString(_iter149.getValue());
            }
          }
        }
        if (struct.isSetDisplayItems()) {
          {
            oprot.writeI32(struct.displayItems.size());
            for (String _iter150 : struct.displayItems)
            {
              oprot.writeString(_iter150);
            }
          }
        }
        if (struct.isSetMaxRatingVal()) {
          oprot.writeI64(struct.maxRatingVal);
        }
        if (struct.isSetNumRecs()) {
          oprot.writeI64(struct.numRecs);
        }
        if (struct.isSetRecommenderName()) {
          oprot.writeString(struct.recommenderName);
        }
        if (struct.isSetClientKey()) {
          oprot.writeString(struct.clientKey);
        }
        if (struct.isSetHomepage()) {
          oprot.writeString(struct.homepage);
        }
        if (struct.isSetCreatorName()) {
          oprot.writeString(struct.creatorName);
        }
        if (struct.isSetRepoName()) {
          oprot.writeString(struct.repoName);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetRatingsColumn()) {
          oprot.writeString(struct.ratingsColumn);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(17);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.primaryKey = iprot.readString();
          struct.setPrimaryKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.image = iprot.readString();
          struct.setImageIsSet(true);
        }
        if (incoming.get(5)) {
          struct.video = iprot.readString();
          struct.setVideoIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TMap _map151 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.itemTypes = new HashMap<String,String>(2*_map151.size);
            String _key152;
            String _val153;
            for (int _i154 = 0; _i154 < _map151.size; ++_i154)
            {
              _key152 = iprot.readString();
              _val153 = iprot.readString();
              struct.itemTypes.put(_key152, _val153);
            }
          }
          struct.setItemTypesIsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.displayItems = new ArrayList<String>(_list155.size);
            String _elem156;
            for (int _i157 = 0; _i157 < _list155.size; ++_i157)
            {
              _elem156 = iprot.readString();
              struct.displayItems.add(_elem156);
            }
          }
          struct.setDisplayItemsIsSet(true);
        }
        if (incoming.get(8)) {
          struct.maxRatingVal = iprot.readI64();
          struct.setMaxRatingValIsSet(true);
        }
        if (incoming.get(9)) {
          struct.numRecs = iprot.readI64();
          struct.setNumRecsIsSet(true);
        }
        if (incoming.get(10)) {
          struct.recommenderName = iprot.readString();
          struct.setRecommenderNameIsSet(true);
        }
        if (incoming.get(11)) {
          struct.clientKey = iprot.readString();
          struct.setClientKeyIsSet(true);
        }
        if (incoming.get(12)) {
          struct.homepage = iprot.readString();
          struct.setHomepageIsSet(true);
        }
        if (incoming.get(13)) {
          struct.creatorName = iprot.readString();
          struct.setCreatorNameIsSet(true);
        }
        if (incoming.get(14)) {
          struct.repoName = iprot.readString();
          struct.setRepoNameIsSet(true);
        }
        if (incoming.get(15)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(16)) {
          struct.ratingsColumn = iprot.readString();
          struct.setRatingsColumnIsSet(true);
        }
      }
    }

  }

  public static class updateTemplate_result implements org.apache.thrift.TBase<updateTemplate_result, updateTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTemplate_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTemplate_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTemplate_result.class, metaDataMap);
    }

    public updateTemplate_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTemplate_result(updateTemplate_result other) {
    }

    public updateTemplate_result deepCopy() {
      return new updateTemplate_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTemplate_result)
        return this.equals((updateTemplate_result)that);
      return false;
    }

    public boolean equals(updateTemplate_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTemplate_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public updateTemplate_resultStandardScheme getScheme() {
        return new updateTemplate_resultStandardScheme();
      }
    }

    private static class updateTemplate_resultStandardScheme extends StandardScheme<updateTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public updateTemplate_resultTupleScheme getScheme() {
        return new updateTemplate_resultTupleScheme();
      }
    }

    private static class updateTemplate_resultTupleScheme extends TupleScheme<updateTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class configurePrefilledUserRatings_args implements org.apache.thrift.TBase<configurePrefilledUserRatings_args, configurePrefilledUserRatings_args._Fields>, java.io.Serializable, Cloneable, Comparable<configurePrefilledUserRatings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configurePrefilledUserRatings_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("repoName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKey", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ITEM_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemTable", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField USER_ID_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdCol", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ITEM_ID_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("itemIdCol", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField USER_RATING_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("userRatingCol", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configurePrefilledUserRatings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configurePrefilledUserRatings_argsTupleSchemeFactory());
    }

    public String username; // required
    public String repoName; // required
    public String primaryKey; // required
    public String itemTable; // required
    public String tableName; // required
    public String userIdCol; // required
    public String itemIdCol; // required
    public String userRatingCol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      REPO_NAME((short)2, "repoName"),
      PRIMARY_KEY((short)3, "primaryKey"),
      ITEM_TABLE((short)4, "itemTable"),
      TABLE_NAME((short)5, "tableName"),
      USER_ID_COL((short)6, "userIdCol"),
      ITEM_ID_COL((short)7, "itemIdCol"),
      USER_RATING_COL((short)8, "userRatingCol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // REPO_NAME
            return REPO_NAME;
          case 3: // PRIMARY_KEY
            return PRIMARY_KEY;
          case 4: // ITEM_TABLE
            return ITEM_TABLE;
          case 5: // TABLE_NAME
            return TABLE_NAME;
          case 6: // USER_ID_COL
            return USER_ID_COL;
          case 7: // ITEM_ID_COL
            return ITEM_ID_COL;
          case 8: // USER_RATING_COL
            return USER_RATING_COL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPO_NAME, new org.apache.thrift.meta_data.FieldMetaData("repoName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primaryKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TABLE, new org.apache.thrift.meta_data.FieldMetaData("itemTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID_COL, new org.apache.thrift.meta_data.FieldMetaData("userIdCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID_COL, new org.apache.thrift.meta_data.FieldMetaData("itemIdCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_RATING_COL, new org.apache.thrift.meta_data.FieldMetaData("userRatingCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configurePrefilledUserRatings_args.class, metaDataMap);
    }

    public configurePrefilledUserRatings_args() {
    }

    public configurePrefilledUserRatings_args(
      String username,
      String repoName,
      String primaryKey,
      String itemTable,
      String tableName,
      String userIdCol,
      String itemIdCol,
      String userRatingCol)
    {
      this();
      this.username = username;
      this.repoName = repoName;
      this.primaryKey = primaryKey;
      this.itemTable = itemTable;
      this.tableName = tableName;
      this.userIdCol = userIdCol;
      this.itemIdCol = itemIdCol;
      this.userRatingCol = userRatingCol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configurePrefilledUserRatings_args(configurePrefilledUserRatings_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetPrimaryKey()) {
        this.primaryKey = other.primaryKey;
      }
      if (other.isSetItemTable()) {
        this.itemTable = other.itemTable;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetUserIdCol()) {
        this.userIdCol = other.userIdCol;
      }
      if (other.isSetItemIdCol()) {
        this.itemIdCol = other.itemIdCol;
      }
      if (other.isSetUserRatingCol()) {
        this.userRatingCol = other.userRatingCol;
      }
    }

    public configurePrefilledUserRatings_args deepCopy() {
      return new configurePrefilledUserRatings_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.repoName = null;
      this.primaryKey = null;
      this.itemTable = null;
      this.tableName = null;
      this.userIdCol = null;
      this.itemIdCol = null;
      this.userRatingCol = null;
    }

    public String getUsername() {
      return this.username;
    }

    public configurePrefilledUserRatings_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepoName() {
      return this.repoName;
    }

    public configurePrefilledUserRatings_args setRepoName(String repoName) {
      this.repoName = repoName;
      return this;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    public String getPrimaryKey() {
      return this.primaryKey;
    }

    public configurePrefilledUserRatings_args setPrimaryKey(String primaryKey) {
      this.primaryKey = primaryKey;
      return this;
    }

    public void unsetPrimaryKey() {
      this.primaryKey = null;
    }

    /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryKey() {
      return this.primaryKey != null;
    }

    public void setPrimaryKeyIsSet(boolean value) {
      if (!value) {
        this.primaryKey = null;
      }
    }

    public String getItemTable() {
      return this.itemTable;
    }

    public configurePrefilledUserRatings_args setItemTable(String itemTable) {
      this.itemTable = itemTable;
      return this;
    }

    public void unsetItemTable() {
      this.itemTable = null;
    }

    /** Returns true if field itemTable is set (has been assigned a value) and false otherwise */
    public boolean isSetItemTable() {
      return this.itemTable != null;
    }

    public void setItemTableIsSet(boolean value) {
      if (!value) {
        this.itemTable = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public configurePrefilledUserRatings_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getUserIdCol() {
      return this.userIdCol;
    }

    public configurePrefilledUserRatings_args setUserIdCol(String userIdCol) {
      this.userIdCol = userIdCol;
      return this;
    }

    public void unsetUserIdCol() {
      this.userIdCol = null;
    }

    /** Returns true if field userIdCol is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdCol() {
      return this.userIdCol != null;
    }

    public void setUserIdColIsSet(boolean value) {
      if (!value) {
        this.userIdCol = null;
      }
    }

    public String getItemIdCol() {
      return this.itemIdCol;
    }

    public configurePrefilledUserRatings_args setItemIdCol(String itemIdCol) {
      this.itemIdCol = itemIdCol;
      return this;
    }

    public void unsetItemIdCol() {
      this.itemIdCol = null;
    }

    /** Returns true if field itemIdCol is set (has been assigned a value) and false otherwise */
    public boolean isSetItemIdCol() {
      return this.itemIdCol != null;
    }

    public void setItemIdColIsSet(boolean value) {
      if (!value) {
        this.itemIdCol = null;
      }
    }

    public String getUserRatingCol() {
      return this.userRatingCol;
    }

    public configurePrefilledUserRatings_args setUserRatingCol(String userRatingCol) {
      this.userRatingCol = userRatingCol;
      return this;
    }

    public void unsetUserRatingCol() {
      this.userRatingCol = null;
    }

    /** Returns true if field userRatingCol is set (has been assigned a value) and false otherwise */
    public boolean isSetUserRatingCol() {
      return this.userRatingCol != null;
    }

    public void setUserRatingColIsSet(boolean value) {
      if (!value) {
        this.userRatingCol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case REPO_NAME:
        if (value == null) {
          unsetRepoName();
        } else {
          setRepoName((String)value);
        }
        break;

      case PRIMARY_KEY:
        if (value == null) {
          unsetPrimaryKey();
        } else {
          setPrimaryKey((String)value);
        }
        break;

      case ITEM_TABLE:
        if (value == null) {
          unsetItemTable();
        } else {
          setItemTable((String)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String)value);
        }
        break;

      case USER_ID_COL:
        if (value == null) {
          unsetUserIdCol();
        } else {
          setUserIdCol((String)value);
        }
        break;

      case ITEM_ID_COL:
        if (value == null) {
          unsetItemIdCol();
        } else {
          setItemIdCol((String)value);
        }
        break;

      case USER_RATING_COL:
        if (value == null) {
          unsetUserRatingCol();
        } else {
          setUserRatingCol((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case REPO_NAME:
        return getRepoName();

      case PRIMARY_KEY:
        return getPrimaryKey();

      case ITEM_TABLE:
        return getItemTable();

      case TABLE_NAME:
        return getTableName();

      case USER_ID_COL:
        return getUserIdCol();

      case ITEM_ID_COL:
        return getItemIdCol();

      case USER_RATING_COL:
        return getUserRatingCol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case REPO_NAME:
        return isSetRepoName();
      case PRIMARY_KEY:
        return isSetPrimaryKey();
      case ITEM_TABLE:
        return isSetItemTable();
      case TABLE_NAME:
        return isSetTableName();
      case USER_ID_COL:
        return isSetUserIdCol();
      case ITEM_ID_COL:
        return isSetItemIdCol();
      case USER_RATING_COL:
        return isSetUserRatingCol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configurePrefilledUserRatings_args)
        return this.equals((configurePrefilledUserRatings_args)that);
      return false;
    }

    public boolean equals(configurePrefilledUserRatings_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_primaryKey = true && this.isSetPrimaryKey();
      boolean that_present_primaryKey = true && that.isSetPrimaryKey();
      if (this_present_primaryKey || that_present_primaryKey) {
        if (!(this_present_primaryKey && that_present_primaryKey))
          return false;
        if (!this.primaryKey.equals(that.primaryKey))
          return false;
      }

      boolean this_present_itemTable = true && this.isSetItemTable();
      boolean that_present_itemTable = true && that.isSetItemTable();
      if (this_present_itemTable || that_present_itemTable) {
        if (!(this_present_itemTable && that_present_itemTable))
          return false;
        if (!this.itemTable.equals(that.itemTable))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_userIdCol = true && this.isSetUserIdCol();
      boolean that_present_userIdCol = true && that.isSetUserIdCol();
      if (this_present_userIdCol || that_present_userIdCol) {
        if (!(this_present_userIdCol && that_present_userIdCol))
          return false;
        if (!this.userIdCol.equals(that.userIdCol))
          return false;
      }

      boolean this_present_itemIdCol = true && this.isSetItemIdCol();
      boolean that_present_itemIdCol = true && that.isSetItemIdCol();
      if (this_present_itemIdCol || that_present_itemIdCol) {
        if (!(this_present_itemIdCol && that_present_itemIdCol))
          return false;
        if (!this.itemIdCol.equals(that.itemIdCol))
          return false;
      }

      boolean this_present_userRatingCol = true && this.isSetUserRatingCol();
      boolean that_present_userRatingCol = true && that.isSetUserRatingCol();
      if (this_present_userRatingCol || that_present_userRatingCol) {
        if (!(this_present_userRatingCol && that_present_userRatingCol))
          return false;
        if (!this.userRatingCol.equals(that.userRatingCol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_repoName = true && (isSetRepoName());
      list.add(present_repoName);
      if (present_repoName)
        list.add(repoName);

      boolean present_primaryKey = true && (isSetPrimaryKey());
      list.add(present_primaryKey);
      if (present_primaryKey)
        list.add(primaryKey);

      boolean present_itemTable = true && (isSetItemTable());
      list.add(present_itemTable);
      if (present_itemTable)
        list.add(itemTable);

      boolean present_tableName = true && (isSetTableName());
      list.add(present_tableName);
      if (present_tableName)
        list.add(tableName);

      boolean present_userIdCol = true && (isSetUserIdCol());
      list.add(present_userIdCol);
      if (present_userIdCol)
        list.add(userIdCol);

      boolean present_itemIdCol = true && (isSetItemIdCol());
      list.add(present_itemIdCol);
      if (present_itemIdCol)
        list.add(itemIdCol);

      boolean present_userRatingCol = true && (isSetUserRatingCol());
      list.add(present_userRatingCol);
      if (present_userRatingCol)
        list.add(userRatingCol);

      return list.hashCode();
    }

    @Override
    public int compareTo(configurePrefilledUserRatings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepoName()).compareTo(other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrimaryKey()).compareTo(other.isSetPrimaryKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemTable()).compareTo(other.isSetItemTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemTable, other.itemTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserIdCol()).compareTo(other.isSetUserIdCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdCol, other.userIdCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemIdCol()).compareTo(other.isSetItemIdCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemIdCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemIdCol, other.itemIdCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserRatingCol()).compareTo(other.isSetUserRatingCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserRatingCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRatingCol, other.userRatingCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configurePrefilledUserRatings_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryKey:");
      if (this.primaryKey == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemTable:");
      if (this.itemTable == null) {
        sb.append("null");
      } else {
        sb.append(this.itemTable);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdCol:");
      if (this.userIdCol == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdCol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemIdCol:");
      if (this.itemIdCol == null) {
        sb.append("null");
      } else {
        sb.append(this.itemIdCol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userRatingCol:");
      if (this.userRatingCol == null) {
        sb.append("null");
      } else {
        sb.append(this.userRatingCol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configurePrefilledUserRatings_argsStandardSchemeFactory implements SchemeFactory {
      public configurePrefilledUserRatings_argsStandardScheme getScheme() {
        return new configurePrefilledUserRatings_argsStandardScheme();
      }
    }

    private static class configurePrefilledUserRatings_argsStandardScheme extends StandardScheme<configurePrefilledUserRatings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configurePrefilledUserRatings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPO_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repoName = iprot.readString();
                struct.setRepoNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRIMARY_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.primaryKey = iprot.readString();
                struct.setPrimaryKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ITEM_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemTable = iprot.readString();
                struct.setItemTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // USER_ID_COL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userIdCol = iprot.readString();
                struct.setUserIdColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ITEM_ID_COL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemIdCol = iprot.readString();
                struct.setItemIdColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // USER_RATING_COL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userRatingCol = iprot.readString();
                struct.setUserRatingColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configurePrefilledUserRatings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.repoName != null) {
          oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
          oprot.writeString(struct.repoName);
          oprot.writeFieldEnd();
        }
        if (struct.primaryKey != null) {
          oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
          oprot.writeString(struct.primaryKey);
          oprot.writeFieldEnd();
        }
        if (struct.itemTable != null) {
          oprot.writeFieldBegin(ITEM_TABLE_FIELD_DESC);
          oprot.writeString(struct.itemTable);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.userIdCol != null) {
          oprot.writeFieldBegin(USER_ID_COL_FIELD_DESC);
          oprot.writeString(struct.userIdCol);
          oprot.writeFieldEnd();
        }
        if (struct.itemIdCol != null) {
          oprot.writeFieldBegin(ITEM_ID_COL_FIELD_DESC);
          oprot.writeString(struct.itemIdCol);
          oprot.writeFieldEnd();
        }
        if (struct.userRatingCol != null) {
          oprot.writeFieldBegin(USER_RATING_COL_FIELD_DESC);
          oprot.writeString(struct.userRatingCol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configurePrefilledUserRatings_argsTupleSchemeFactory implements SchemeFactory {
      public configurePrefilledUserRatings_argsTupleScheme getScheme() {
        return new configurePrefilledUserRatings_argsTupleScheme();
      }
    }

    private static class configurePrefilledUserRatings_argsTupleScheme extends TupleScheme<configurePrefilledUserRatings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configurePrefilledUserRatings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetRepoName()) {
          optionals.set(1);
        }
        if (struct.isSetPrimaryKey()) {
          optionals.set(2);
        }
        if (struct.isSetItemTable()) {
          optionals.set(3);
        }
        if (struct.isSetTableName()) {
          optionals.set(4);
        }
        if (struct.isSetUserIdCol()) {
          optionals.set(5);
        }
        if (struct.isSetItemIdCol()) {
          optionals.set(6);
        }
        if (struct.isSetUserRatingCol()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetRepoName()) {
          oprot.writeString(struct.repoName);
        }
        if (struct.isSetPrimaryKey()) {
          oprot.writeString(struct.primaryKey);
        }
        if (struct.isSetItemTable()) {
          oprot.writeString(struct.itemTable);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetUserIdCol()) {
          oprot.writeString(struct.userIdCol);
        }
        if (struct.isSetItemIdCol()) {
          oprot.writeString(struct.itemIdCol);
        }
        if (struct.isSetUserRatingCol()) {
          oprot.writeString(struct.userRatingCol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configurePrefilledUserRatings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.repoName = iprot.readString();
          struct.setRepoNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.primaryKey = iprot.readString();
          struct.setPrimaryKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.itemTable = iprot.readString();
          struct.setItemTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.userIdCol = iprot.readString();
          struct.setUserIdColIsSet(true);
        }
        if (incoming.get(6)) {
          struct.itemIdCol = iprot.readString();
          struct.setItemIdColIsSet(true);
        }
        if (incoming.get(7)) {
          struct.userRatingCol = iprot.readString();
          struct.setUserRatingColIsSet(true);
        }
      }
    }

  }

  public static class configurePrefilledUserRatings_result implements org.apache.thrift.TBase<configurePrefilledUserRatings_result, configurePrefilledUserRatings_result._Fields>, java.io.Serializable, Cloneable, Comparable<configurePrefilledUserRatings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configurePrefilledUserRatings_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configurePrefilledUserRatings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configurePrefilledUserRatings_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configurePrefilledUserRatings_result.class, metaDataMap);
    }

    public configurePrefilledUserRatings_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configurePrefilledUserRatings_result(configurePrefilledUserRatings_result other) {
    }

    public configurePrefilledUserRatings_result deepCopy() {
      return new configurePrefilledUserRatings_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configurePrefilledUserRatings_result)
        return this.equals((configurePrefilledUserRatings_result)that);
      return false;
    }

    public boolean equals(configurePrefilledUserRatings_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(configurePrefilledUserRatings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configurePrefilledUserRatings_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configurePrefilledUserRatings_resultStandardSchemeFactory implements SchemeFactory {
      public configurePrefilledUserRatings_resultStandardScheme getScheme() {
        return new configurePrefilledUserRatings_resultStandardScheme();
      }
    }

    private static class configurePrefilledUserRatings_resultStandardScheme extends StandardScheme<configurePrefilledUserRatings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configurePrefilledUserRatings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configurePrefilledUserRatings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configurePrefilledUserRatings_resultTupleSchemeFactory implements SchemeFactory {
      public configurePrefilledUserRatings_resultTupleScheme getScheme() {
        return new configurePrefilledUserRatings_resultTupleScheme();
      }
    }

    private static class configurePrefilledUserRatings_resultTupleScheme extends TupleScheme<configurePrefilledUserRatings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configurePrefilledUserRatings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configurePrefilledUserRatings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getTables_args implements org.apache.thrift.TBase<getTables_args, getTables_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTables_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTables_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPO_FIELD_DESC = new org.apache.thrift.protocol.TField("repo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTables_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTables_argsTupleSchemeFactory());
    }

    public String username; // required
    public String repo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      REPO((short)2, "repo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // REPO
            return REPO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPO, new org.apache.thrift.meta_data.FieldMetaData("repo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTables_args.class, metaDataMap);
    }

    public getTables_args() {
    }

    public getTables_args(
      String username,
      String repo)
    {
      this();
      this.username = username;
      this.repo = repo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTables_args(getTables_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepo()) {
        this.repo = other.repo;
      }
    }

    public getTables_args deepCopy() {
      return new getTables_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.repo = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getTables_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepo() {
      return this.repo;
    }

    public getTables_args setRepo(String repo) {
      this.repo = repo;
      return this;
    }

    public void unsetRepo() {
      this.repo = null;
    }

    /** Returns true if field repo is set (has been assigned a value) and false otherwise */
    public boolean isSetRepo() {
      return this.repo != null;
    }

    public void setRepoIsSet(boolean value) {
      if (!value) {
        this.repo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case REPO:
        if (value == null) {
          unsetRepo();
        } else {
          setRepo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case REPO:
        return getRepo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case REPO:
        return isSetRepo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTables_args)
        return this.equals((getTables_args)that);
      return false;
    }

    public boolean equals(getTables_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repo = true && this.isSetRepo();
      boolean that_present_repo = true && that.isSetRepo();
      if (this_present_repo || that_present_repo) {
        if (!(this_present_repo && that_present_repo))
          return false;
        if (!this.repo.equals(that.repo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_repo = true && (isSetRepo());
      list.add(present_repo);
      if (present_repo)
        list.add(repo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTables_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepo()).compareTo(other.isSetRepo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repo, other.repo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTables_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repo:");
      if (this.repo == null) {
        sb.append("null");
      } else {
        sb.append(this.repo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTables_argsStandardSchemeFactory implements SchemeFactory {
      public getTables_argsStandardScheme getScheme() {
        return new getTables_argsStandardScheme();
      }
    }

    private static class getTables_argsStandardScheme extends StandardScheme<getTables_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repo = iprot.readString();
                struct.setRepoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTables_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.repo != null) {
          oprot.writeFieldBegin(REPO_FIELD_DESC);
          oprot.writeString(struct.repo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTables_argsTupleSchemeFactory implements SchemeFactory {
      public getTables_argsTupleScheme getScheme() {
        return new getTables_argsTupleScheme();
      }
    }

    private static class getTables_argsTupleScheme extends TupleScheme<getTables_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetRepo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetRepo()) {
          oprot.writeString(struct.repo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.repo = iprot.readString();
          struct.setRepoIsSet(true);
        }
      }
    }

  }

  public static class getTables_result implements org.apache.thrift.TBase<getTables_result, getTables_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTables_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTables_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTables_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTables_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTables_result.class, metaDataMap);
    }

    public getTables_result() {
    }

    public getTables_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTables_result(getTables_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getTables_result deepCopy() {
      return new getTables_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getTables_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTables_result)
        return this.equals((getTables_result)that);
      return false;
    }

    public boolean equals(getTables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTables_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTables_resultStandardSchemeFactory implements SchemeFactory {
      public getTables_resultStandardScheme getScheme() {
        return new getTables_resultStandardScheme();
      }
    }

    private static class getTables_resultStandardScheme extends StandardScheme<getTables_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list158.size);
                  String _elem159;
                  for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                  {
                    _elem159 = iprot.readString();
                    struct.success.add(_elem159);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTables_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter161 : struct.success)
            {
              oprot.writeString(_iter161);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTables_resultTupleSchemeFactory implements SchemeFactory {
      public getTables_resultTupleScheme getScheme() {
        return new getTables_resultTupleScheme();
      }
    }

    private static class getTables_resultTupleScheme extends TupleScheme<getTables_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter162 : struct.success)
            {
              oprot.writeString(_iter162);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list163 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list163.size);
            String _elem164;
            for (int _i165 = 0; _i165 < _list163.size; ++_i165)
            {
              _elem164 = iprot.readString();
              struct.success.add(_elem164);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getColumns_args implements org.apache.thrift.TBase<getColumns_args, getColumns_args._Fields>, java.io.Serializable, Cloneable, Comparable<getColumns_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getColumns_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPO_FIELD_DESC = new org.apache.thrift.protocol.TField("repo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getColumns_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getColumns_argsTupleSchemeFactory());
    }

    public String username; // required
    public String repo; // required
    public String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      REPO((short)2, "repo"),
      TABLE((short)3, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // REPO
            return REPO;
          case 3: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPO, new org.apache.thrift.meta_data.FieldMetaData("repo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getColumns_args.class, metaDataMap);
    }

    public getColumns_args() {
    }

    public getColumns_args(
      String username,
      String repo,
      String table)
    {
      this();
      this.username = username;
      this.repo = repo;
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getColumns_args(getColumns_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepo()) {
        this.repo = other.repo;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public getColumns_args deepCopy() {
      return new getColumns_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.repo = null;
      this.table = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getColumns_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepo() {
      return this.repo;
    }

    public getColumns_args setRepo(String repo) {
      this.repo = repo;
      return this;
    }

    public void unsetRepo() {
      this.repo = null;
    }

    /** Returns true if field repo is set (has been assigned a value) and false otherwise */
    public boolean isSetRepo() {
      return this.repo != null;
    }

    public void setRepoIsSet(boolean value) {
      if (!value) {
        this.repo = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public getColumns_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case REPO:
        if (value == null) {
          unsetRepo();
        } else {
          setRepo((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case REPO:
        return getRepo();

      case TABLE:
        return getTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case REPO:
        return isSetRepo();
      case TABLE:
        return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getColumns_args)
        return this.equals((getColumns_args)that);
      return false;
    }

    public boolean equals(getColumns_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repo = true && this.isSetRepo();
      boolean that_present_repo = true && that.isSetRepo();
      if (this_present_repo || that_present_repo) {
        if (!(this_present_repo && that_present_repo))
          return false;
        if (!this.repo.equals(that.repo))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_repo = true && (isSetRepo());
      list.add(present_repo);
      if (present_repo)
        list.add(repo);

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table)
        list.add(table);

      return list.hashCode();
    }

    @Override
    public int compareTo(getColumns_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepo()).compareTo(other.isSetRepo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repo, other.repo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getColumns_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repo:");
      if (this.repo == null) {
        sb.append("null");
      } else {
        sb.append(this.repo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getColumns_argsStandardSchemeFactory implements SchemeFactory {
      public getColumns_argsStandardScheme getScheme() {
        return new getColumns_argsStandardScheme();
      }
    }

    private static class getColumns_argsStandardScheme extends StandardScheme<getColumns_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getColumns_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repo = iprot.readString();
                struct.setRepoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getColumns_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.repo != null) {
          oprot.writeFieldBegin(REPO_FIELD_DESC);
          oprot.writeString(struct.repo);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getColumns_argsTupleSchemeFactory implements SchemeFactory {
      public getColumns_argsTupleScheme getScheme() {
        return new getColumns_argsTupleScheme();
      }
    }

    private static class getColumns_argsTupleScheme extends TupleScheme<getColumns_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getColumns_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetRepo()) {
          optionals.set(1);
        }
        if (struct.isSetTable()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetRepo()) {
          oprot.writeString(struct.repo);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getColumns_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.repo = iprot.readString();
          struct.setRepoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

  }

  public static class getColumns_result implements org.apache.thrift.TBase<getColumns_result, getColumns_result._Fields>, java.io.Serializable, Cloneable, Comparable<getColumns_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getColumns_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getColumns_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getColumns_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getColumns_result.class, metaDataMap);
    }

    public getColumns_result() {
    }

    public getColumns_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getColumns_result(getColumns_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getColumns_result deepCopy() {
      return new getColumns_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getColumns_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getColumns_result)
        return this.equals((getColumns_result)that);
      return false;
    }

    public boolean equals(getColumns_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getColumns_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getColumns_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getColumns_resultStandardSchemeFactory implements SchemeFactory {
      public getColumns_resultStandardScheme getScheme() {
        return new getColumns_resultStandardScheme();
      }
    }

    private static class getColumns_resultStandardScheme extends StandardScheme<getColumns_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getColumns_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list166.size);
                  String _elem167;
                  for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                  {
                    _elem167 = iprot.readString();
                    struct.success.add(_elem167);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getColumns_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter169 : struct.success)
            {
              oprot.writeString(_iter169);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getColumns_resultTupleSchemeFactory implements SchemeFactory {
      public getColumns_resultTupleScheme getScheme() {
        return new getColumns_resultTupleScheme();
      }
    }

    private static class getColumns_resultTupleScheme extends TupleScheme<getColumns_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getColumns_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter170 : struct.success)
            {
              oprot.writeString(_iter170);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getColumns_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list171.size);
            String _elem172;
            for (int _i173 = 0; _i173 < _list171.size; ++_i173)
            {
              _elem172 = iprot.readString();
              struct.success.add(_elem172);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFirstRepo_args implements org.apache.thrift.TBase<getFirstRepo_args, getFirstRepo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFirstRepo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFirstRepo_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFirstRepo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstRepo_argsTupleSchemeFactory());
    }

    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFirstRepo_args.class, metaDataMap);
    }

    public getFirstRepo_args() {
    }

    public getFirstRepo_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFirstRepo_args(getFirstRepo_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getFirstRepo_args deepCopy() {
      return new getFirstRepo_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getFirstRepo_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFirstRepo_args)
        return this.equals((getFirstRepo_args)that);
      return false;
    }

    public boolean equals(getFirstRepo_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFirstRepo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstRepo_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstRepo_argsStandardSchemeFactory implements SchemeFactory {
      public getFirstRepo_argsStandardScheme getScheme() {
        return new getFirstRepo_argsStandardScheme();
      }
    }

    private static class getFirstRepo_argsStandardScheme extends StandardScheme<getFirstRepo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstRepo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstRepo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFirstRepo_argsTupleSchemeFactory implements SchemeFactory {
      public getFirstRepo_argsTupleScheme getScheme() {
        return new getFirstRepo_argsTupleScheme();
      }
    }

    private static class getFirstRepo_argsTupleScheme extends TupleScheme<getFirstRepo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstRepo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstRepo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class getFirstRepo_result implements org.apache.thrift.TBase<getFirstRepo_result, getFirstRepo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFirstRepo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFirstRepo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFirstRepo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstRepo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFirstRepo_result.class, metaDataMap);
    }

    public getFirstRepo_result() {
    }

    public getFirstRepo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFirstRepo_result(getFirstRepo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFirstRepo_result deepCopy() {
      return new getFirstRepo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFirstRepo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFirstRepo_result)
        return this.equals((getFirstRepo_result)that);
      return false;
    }

    public boolean equals(getFirstRepo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFirstRepo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstRepo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstRepo_resultStandardSchemeFactory implements SchemeFactory {
      public getFirstRepo_resultStandardScheme getScheme() {
        return new getFirstRepo_resultStandardScheme();
      }
    }

    private static class getFirstRepo_resultStandardScheme extends StandardScheme<getFirstRepo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstRepo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstRepo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFirstRepo_resultTupleSchemeFactory implements SchemeFactory {
      public getFirstRepo_resultTupleScheme getScheme() {
        return new getFirstRepo_resultTupleScheme();
      }
    }

    private static class getFirstRepo_resultTupleScheme extends TupleScheme<getFirstRepo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstRepo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstRepo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNumRepos_args implements org.apache.thrift.TBase<getNumRepos_args, getNumRepos_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNumRepos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNumRepos_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNumRepos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNumRepos_argsTupleSchemeFactory());
    }

    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNumRepos_args.class, metaDataMap);
    }

    public getNumRepos_args() {
    }

    public getNumRepos_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNumRepos_args(getNumRepos_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getNumRepos_args deepCopy() {
      return new getNumRepos_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getNumRepos_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNumRepos_args)
        return this.equals((getNumRepos_args)that);
      return false;
    }

    public boolean equals(getNumRepos_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNumRepos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNumRepos_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNumRepos_argsStandardSchemeFactory implements SchemeFactory {
      public getNumRepos_argsStandardScheme getScheme() {
        return new getNumRepos_argsStandardScheme();
      }
    }

    private static class getNumRepos_argsStandardScheme extends StandardScheme<getNumRepos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNumRepos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNumRepos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNumRepos_argsTupleSchemeFactory implements SchemeFactory {
      public getNumRepos_argsTupleScheme getScheme() {
        return new getNumRepos_argsTupleScheme();
      }
    }

    private static class getNumRepos_argsTupleScheme extends TupleScheme<getNumRepos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNumRepos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNumRepos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class getNumRepos_result implements org.apache.thrift.TBase<getNumRepos_result, getNumRepos_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNumRepos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNumRepos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNumRepos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNumRepos_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNumRepos_result.class, metaDataMap);
    }

    public getNumRepos_result() {
    }

    public getNumRepos_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNumRepos_result(getNumRepos_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getNumRepos_result deepCopy() {
      return new getNumRepos_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getNumRepos_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNumRepos_result)
        return this.equals((getNumRepos_result)that);
      return false;
    }

    public boolean equals(getNumRepos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNumRepos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNumRepos_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNumRepos_resultStandardSchemeFactory implements SchemeFactory {
      public getNumRepos_resultStandardScheme getScheme() {
        return new getNumRepos_resultStandardScheme();
      }
    }

    private static class getNumRepos_resultStandardScheme extends StandardScheme<getNumRepos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNumRepos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNumRepos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNumRepos_resultTupleSchemeFactory implements SchemeFactory {
      public getNumRepos_resultTupleScheme getScheme() {
        return new getNumRepos_resultTupleScheme();
      }
    }

    private static class getNumRepos_resultTupleScheme extends TupleScheme<getNumRepos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNumRepos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNumRepos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllRepos_args implements org.apache.thrift.TBase<getAllRepos_args, getAllRepos_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRepos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRepos_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRepos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRepos_argsTupleSchemeFactory());
    }

    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRepos_args.class, metaDataMap);
    }

    public getAllRepos_args() {
    }

    public getAllRepos_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRepos_args(getAllRepos_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getAllRepos_args deepCopy() {
      return new getAllRepos_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getAllRepos_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRepos_args)
        return this.equals((getAllRepos_args)that);
      return false;
    }

    public boolean equals(getAllRepos_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRepos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRepos_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRepos_argsStandardSchemeFactory implements SchemeFactory {
      public getAllRepos_argsStandardScheme getScheme() {
        return new getAllRepos_argsStandardScheme();
      }
    }

    private static class getAllRepos_argsStandardScheme extends StandardScheme<getAllRepos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRepos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRepos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRepos_argsTupleSchemeFactory implements SchemeFactory {
      public getAllRepos_argsTupleScheme getScheme() {
        return new getAllRepos_argsTupleScheme();
      }
    }

    private static class getAllRepos_argsTupleScheme extends TupleScheme<getAllRepos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRepos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRepos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class getAllRepos_result implements org.apache.thrift.TBase<getAllRepos_result, getAllRepos_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRepos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRepos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRepos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRepos_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRepos_result.class, metaDataMap);
    }

    public getAllRepos_result() {
    }

    public getAllRepos_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRepos_result(getAllRepos_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getAllRepos_result deepCopy() {
      return new getAllRepos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAllRepos_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRepos_result)
        return this.equals((getAllRepos_result)that);
      return false;
    }

    public boolean equals(getAllRepos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRepos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRepos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRepos_resultStandardSchemeFactory implements SchemeFactory {
      public getAllRepos_resultStandardScheme getScheme() {
        return new getAllRepos_resultStandardScheme();
      }
    }

    private static class getAllRepos_resultStandardScheme extends StandardScheme<getAllRepos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRepos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list174.size);
                  String _elem175;
                  for (int _i176 = 0; _i176 < _list174.size; ++_i176)
                  {
                    _elem175 = iprot.readString();
                    struct.success.add(_elem175);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRepos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter177 : struct.success)
            {
              oprot.writeString(_iter177);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRepos_resultTupleSchemeFactory implements SchemeFactory {
      public getAllRepos_resultTupleScheme getScheme() {
        return new getAllRepos_resultTupleScheme();
      }
    }

    private static class getAllRepos_resultTupleScheme extends TupleScheme<getAllRepos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRepos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter178 : struct.success)
            {
              oprot.writeString(_iter178);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRepos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list179 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list179.size);
            String _elem180;
            for (int _i181 = 0; _i181 < _list179.size; ++_i181)
            {
              _elem180 = iprot.readString();
              struct.success.add(_elem180);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveCSSData_args implements org.apache.thrift.TBase<saveCSSData_args, saveCSSData_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveCSSData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCSSData_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveCSSData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveCSSData_argsTupleSchemeFactory());
    }

    public String path; // required
    public String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      DATA((short)2, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCSSData_args.class, metaDataMap);
    }

    public saveCSSData_args() {
    }

    public saveCSSData_args(
      String path,
      String data)
    {
      this();
      this.path = path;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCSSData_args(saveCSSData_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public saveCSSData_args deepCopy() {
      return new saveCSSData_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      this.data = null;
    }

    public String getPath() {
      return this.path;
    }

    public saveCSSData_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public String getData() {
      return this.data;
    }

    public saveCSSData_args setData(String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCSSData_args)
        return this.equals((saveCSSData_args)that);
      return false;
    }

    public boolean equals(saveCSSData_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveCSSData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveCSSData_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCSSData_argsStandardSchemeFactory implements SchemeFactory {
      public saveCSSData_argsStandardScheme getScheme() {
        return new saveCSSData_argsStandardScheme();
      }
    }

    private static class saveCSSData_argsStandardScheme extends StandardScheme<saveCSSData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCSSData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCSSData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCSSData_argsTupleSchemeFactory implements SchemeFactory {
      public saveCSSData_argsTupleScheme getScheme() {
        return new saveCSSData_argsTupleScheme();
      }
    }

    private static class saveCSSData_argsTupleScheme extends TupleScheme<saveCSSData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCSSData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCSSData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class saveCSSData_result implements org.apache.thrift.TBase<saveCSSData_result, saveCSSData_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveCSSData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCSSData_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveCSSData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveCSSData_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCSSData_result.class, metaDataMap);
    }

    public saveCSSData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCSSData_result(saveCSSData_result other) {
    }

    public saveCSSData_result deepCopy() {
      return new saveCSSData_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCSSData_result)
        return this.equals((saveCSSData_result)that);
      return false;
    }

    public boolean equals(saveCSSData_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveCSSData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveCSSData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCSSData_resultStandardSchemeFactory implements SchemeFactory {
      public saveCSSData_resultStandardScheme getScheme() {
        return new saveCSSData_resultStandardScheme();
      }
    }

    private static class saveCSSData_resultStandardScheme extends StandardScheme<saveCSSData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCSSData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCSSData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCSSData_resultTupleSchemeFactory implements SchemeFactory {
      public saveCSSData_resultTupleScheme getScheme() {
        return new saveCSSData_resultTupleScheme();
      }
    }

    private static class saveCSSData_resultTupleScheme extends TupleScheme<saveCSSData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCSSData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCSSData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
