/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "kibitz_types.h"

#include <algorithm>

namespace kibitz {

const char* Item::ascii_fingerprint = "A0AEEAA2093863EE07C8E9D6E50ADE59";
const uint8_t Item::binary_fingerprint[16] = {0xA0,0xAE,0xEA,0xA2,0x09,0x38,0x63,0xEE,0x07,0xC8,0xE9,0xD6,0xE5,0x0A,0xDE,0x59};

uint32_t Item::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_attributes = false;
  bool isset_kibitz_generated_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attributes.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->attributes[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset_attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kibitz_generated_id);
          isset_kibitz_generated_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_attributes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kibitz_generated_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Item::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Item");

  xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attributes.size()));
    std::map<std::string, std::string> ::const_iterator _iter7;
    for (_iter7 = this->attributes.begin(); _iter7 != this->attributes.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeString(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kibitz_generated_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->kibitz_generated_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Item &a, Item &b) {
  using ::std::swap;
  swap(a.attributes, b.attributes);
  swap(a.kibitz_generated_id, b.kibitz_generated_id);
}

const char* Recommender::ascii_fingerprint = "3F18D3B132EB5B730FF079FBDEE92FD0";
const uint8_t Recommender::binary_fingerprint[16] = {0x3F,0x18,0xD3,0xB1,0x32,0xEB,0x5B,0x73,0x0F,0xF0,0x79,0xFB,0xDE,0xE9,0x2F,0xD0};

uint32_t Recommender::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_username = false;
  bool isset_recommenderName = false;
  bool isset_clientKey = false;
  bool isset_homepage = false;
  bool isset_repoName = false;
  bool isset_title = false;
  bool isset_description = false;
  bool isset_image = false;
  bool isset_numRecs = false;
  bool isset_maxRatingVal = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          isset_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recommenderName);
          isset_recommenderName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientKey);
          isset_clientKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homepage);
          isset_homepage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->repoName);
          isset_repoName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          isset_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image);
          isset_image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->video);
          this->__isset.video = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->itemTypes.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _ktype9;
            ::apache::thrift::protocol::TType _vtype10;
            xfer += iprot->readMapBegin(_ktype9, _vtype10, _size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              std::string _key13;
              xfer += iprot->readString(_key13);
              std::string& _val14 = this->itemTypes[_key13];
              xfer += iprot->readString(_val14);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.itemTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->displayItems.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->displayItems.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readString(this->displayItems[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.displayItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numRecs);
          isset_numRecs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxRatingVal);
          isset_maxRatingVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ratingsColumn);
          this->__isset.ratingsColumn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->primaryKey);
          this->__isset.primaryKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_username)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recommenderName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clientKey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_homepage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_repoName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_image)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numRecs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxRatingVal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Recommender::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Recommender");

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recommenderName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->recommenderName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientKey", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->clientKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homepage", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->homepage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repoName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->repoName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->image);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->video);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemTypes", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->itemTypes.size()));
    std::map<std::string, std::string> ::const_iterator _iter20;
    for (_iter20 = this->itemTypes.begin(); _iter20 != this->itemTypes.end(); ++_iter20)
    {
      xfer += oprot->writeString(_iter20->first);
      xfer += oprot->writeString(_iter20->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayItems", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->displayItems.size()));
    std::vector<std::string> ::const_iterator _iter21;
    for (_iter21 = this->displayItems.begin(); _iter21 != this->displayItems.end(); ++_iter21)
    {
      xfer += oprot->writeString((*_iter21));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numRecs", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->numRecs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRatingVal", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->maxRatingVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ratingsColumn", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->ratingsColumn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("primaryKey", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->primaryKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Recommender &a, Recommender &b) {
  using ::std::swap;
  swap(a.username, b.username);
  swap(a.recommenderName, b.recommenderName);
  swap(a.clientKey, b.clientKey);
  swap(a.homepage, b.homepage);
  swap(a.repoName, b.repoName);
  swap(a.title, b.title);
  swap(a.description, b.description);
  swap(a.image, b.image);
  swap(a.video, b.video);
  swap(a.itemTypes, b.itemTypes);
  swap(a.displayItems, b.displayItems);
  swap(a.numRecs, b.numRecs);
  swap(a.maxRatingVal, b.maxRatingVal);
  swap(a.ratingsColumn, b.ratingsColumn);
  swap(a.primaryKey, b.primaryKey);
  swap(a.__isset, b.__isset);
}

} // namespace
