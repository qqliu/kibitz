/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RecommenderService_H
#define RecommenderService_H

#include <thrift/TDispatchProcessor.h>
#include "kibitz_types.h"

namespace kibitz {

class RecommenderServiceIf {
 public:
  virtual ~RecommenderServiceIf() {}
  virtual void createNewIndividualServer(const std::string& key) = 0;
  virtual void terminateSession(const std::string& key) = 0;
  virtual void makeRecommendation(std::vector<Item> & _return, const std::string& key, const int64_t userId, const int64_t numRecs, const bool isBoolean, const std::vector<std::string> & displayColumns) = 0;
  virtual void makeItemBasedRecommendations(std::vector<Item> & _return, const std::string& key, const int64_t userId, const int64_t numRecs, const std::vector<std::string> & displayColumns) = 0;
  virtual void getPageItems(std::vector<Item> & _return, const std::string& key, const int64_t page, const int64_t numPerPage, const std::vector<std::string> & displayColumns) = 0;
  virtual int64_t getItemCount(const std::string& key) = 0;
  virtual void recordRatings(const std::string& key, const int64_t userId, const int64_t itemId, const int64_t rating) = 0;
  virtual void deleteRatings(const std::string& key, const int64_t userId, const int64_t itemId) = 0;
  virtual void createNewUser(std::string& _return, const std::string& key, const std::string& username, const bool iskibitzuser) = 0;
  virtual bool checkUsername(const std::string& key, const std::string& username, const bool iskibitzuser) = 0;
  virtual bool checkLogin(const std::string& key, const std::string& username, const std::string& password, const bool iskibitzuser) = 0;
  virtual int64_t retrieveUserId(const std::string& key, const std::string& username) = 0;
  virtual bool createNewRecommender(const std::string& username, const std::string& primaryKey, const std::string& database, const std::string& table, const std::string& title, const std::string& description, const std::string& image, const std::string& ratings_column, const std::string& clientKey) = 0;
  virtual void getUserRatedItems(std::vector<Item> & _return, const std::string& key, const int64_t userId, const std::vector<std::string> & displayColumns) = 0;
  virtual void initiateModel(const std::string& key, const std::string& table, const std::string& username, const std::string& database) = 0;
  virtual void getSearchItems(std::vector<Item> & _return, const std::string& table, const std::string& query, const std::vector<std::string> & columnsToSearch, const std::vector<std::string> & displayColumns) = 0;
  virtual void makeOverallRatingBasedOrRandomRecommendation(std::vector<Item> & _return, const std::string& key, const std::string& ratingColumnName, const int64_t numRecs, const std::vector<std::string> & displayColumns) = 0;
  virtual void addKibitzUser(const std::string& email, const std::string& password) = 0;
  virtual bool checkCorrectDatahubLogin(const std::string& username, const std::string& repository, const std::string& table, const std::string& primary_key, const std::string& title, const std::string& description, const std::string& image) = 0;
  virtual bool checkRatingsColumn(const std::string& username, const std::string& table, const std::string& repository, const std::string& ratings_column) = 0;
  virtual void getRecommenders(std::vector<Recommender> & _return, const std::string& username) = 0;
  virtual void getProfilePicture(std::string& _return, const std::string& username) = 0;
  virtual void saveFBProfilePic(const std::string& username, const std::string& fbUsername) = 0;
  virtual void deleteRecommender(const std::string& clientKey) = 0;
  virtual void updateTemplate(const std::string& username, const std::string& primaryKey, const std::string& title, const std::string& description, const std::string& image, const std::string& video, const std::map<std::string, std::string> & itemTypes, const std::vector<std::string> & displayItems, const int64_t maxRatingVal, const int64_t numRecs, const std::string& recommenderName, const std::string& clientKey, const std::string& homepage, const std::string& creatorName, const std::string& repoName, const std::string& tableName, const std::string& ratingsColumn) = 0;
  virtual void configurePrefilledUserRatings(const std::string& username, const std::string& repoName, const std::string& primaryKey, const std::string& itemTable, const std::string& tableName, const std::string& userIdCol, const std::string& itemIdCol, const std::string& userRatingCol) = 0;
  virtual void getTables(std::vector<std::string> & _return, const std::string& username, const std::string& repo) = 0;
  virtual void getColumns(std::vector<std::string> & _return, const std::string& username, const std::string& repo, const std::string& table) = 0;
};

class RecommenderServiceIfFactory {
 public:
  typedef RecommenderServiceIf Handler;

  virtual ~RecommenderServiceIfFactory() {}

  virtual RecommenderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RecommenderServiceIf* /* handler */) = 0;
};

class RecommenderServiceIfSingletonFactory : virtual public RecommenderServiceIfFactory {
 public:
  RecommenderServiceIfSingletonFactory(const boost::shared_ptr<RecommenderServiceIf>& iface) : iface_(iface) {}
  virtual ~RecommenderServiceIfSingletonFactory() {}

  virtual RecommenderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RecommenderServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RecommenderServiceIf> iface_;
};

class RecommenderServiceNull : virtual public RecommenderServiceIf {
 public:
  virtual ~RecommenderServiceNull() {}
  void createNewIndividualServer(const std::string& /* key */) {
    return;
  }
  void terminateSession(const std::string& /* key */) {
    return;
  }
  void makeRecommendation(std::vector<Item> & /* _return */, const std::string& /* key */, const int64_t /* userId */, const int64_t /* numRecs */, const bool /* isBoolean */, const std::vector<std::string> & /* displayColumns */) {
    return;
  }
  void makeItemBasedRecommendations(std::vector<Item> & /* _return */, const std::string& /* key */, const int64_t /* userId */, const int64_t /* numRecs */, const std::vector<std::string> & /* displayColumns */) {
    return;
  }
  void getPageItems(std::vector<Item> & /* _return */, const std::string& /* key */, const int64_t /* page */, const int64_t /* numPerPage */, const std::vector<std::string> & /* displayColumns */) {
    return;
  }
  int64_t getItemCount(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void recordRatings(const std::string& /* key */, const int64_t /* userId */, const int64_t /* itemId */, const int64_t /* rating */) {
    return;
  }
  void deleteRatings(const std::string& /* key */, const int64_t /* userId */, const int64_t /* itemId */) {
    return;
  }
  void createNewUser(std::string& /* _return */, const std::string& /* key */, const std::string& /* username */, const bool /* iskibitzuser */) {
    return;
  }
  bool checkUsername(const std::string& /* key */, const std::string& /* username */, const bool /* iskibitzuser */) {
    bool _return = false;
    return _return;
  }
  bool checkLogin(const std::string& /* key */, const std::string& /* username */, const std::string& /* password */, const bool /* iskibitzuser */) {
    bool _return = false;
    return _return;
  }
  int64_t retrieveUserId(const std::string& /* key */, const std::string& /* username */) {
    int64_t _return = 0;
    return _return;
  }
  bool createNewRecommender(const std::string& /* username */, const std::string& /* primaryKey */, const std::string& /* database */, const std::string& /* table */, const std::string& /* title */, const std::string& /* description */, const std::string& /* image */, const std::string& /* ratings_column */, const std::string& /* clientKey */) {
    bool _return = false;
    return _return;
  }
  void getUserRatedItems(std::vector<Item> & /* _return */, const std::string& /* key */, const int64_t /* userId */, const std::vector<std::string> & /* displayColumns */) {
    return;
  }
  void initiateModel(const std::string& /* key */, const std::string& /* table */, const std::string& /* username */, const std::string& /* database */) {
    return;
  }
  void getSearchItems(std::vector<Item> & /* _return */, const std::string& /* table */, const std::string& /* query */, const std::vector<std::string> & /* columnsToSearch */, const std::vector<std::string> & /* displayColumns */) {
    return;
  }
  void makeOverallRatingBasedOrRandomRecommendation(std::vector<Item> & /* _return */, const std::string& /* key */, const std::string& /* ratingColumnName */, const int64_t /* numRecs */, const std::vector<std::string> & /* displayColumns */) {
    return;
  }
  void addKibitzUser(const std::string& /* email */, const std::string& /* password */) {
    return;
  }
  bool checkCorrectDatahubLogin(const std::string& /* username */, const std::string& /* repository */, const std::string& /* table */, const std::string& /* primary_key */, const std::string& /* title */, const std::string& /* description */, const std::string& /* image */) {
    bool _return = false;
    return _return;
  }
  bool checkRatingsColumn(const std::string& /* username */, const std::string& /* table */, const std::string& /* repository */, const std::string& /* ratings_column */) {
    bool _return = false;
    return _return;
  }
  void getRecommenders(std::vector<Recommender> & /* _return */, const std::string& /* username */) {
    return;
  }
  void getProfilePicture(std::string& /* _return */, const std::string& /* username */) {
    return;
  }
  void saveFBProfilePic(const std::string& /* username */, const std::string& /* fbUsername */) {
    return;
  }
  void deleteRecommender(const std::string& /* clientKey */) {
    return;
  }
  void updateTemplate(const std::string& /* username */, const std::string& /* primaryKey */, const std::string& /* title */, const std::string& /* description */, const std::string& /* image */, const std::string& /* video */, const std::map<std::string, std::string> & /* itemTypes */, const std::vector<std::string> & /* displayItems */, const int64_t /* maxRatingVal */, const int64_t /* numRecs */, const std::string& /* recommenderName */, const std::string& /* clientKey */, const std::string& /* homepage */, const std::string& /* creatorName */, const std::string& /* repoName */, const std::string& /* tableName */, const std::string& /* ratingsColumn */) {
    return;
  }
  void configurePrefilledUserRatings(const std::string& /* username */, const std::string& /* repoName */, const std::string& /* primaryKey */, const std::string& /* itemTable */, const std::string& /* tableName */, const std::string& /* userIdCol */, const std::string& /* itemIdCol */, const std::string& /* userRatingCol */) {
    return;
  }
  void getTables(std::vector<std::string> & /* _return */, const std::string& /* username */, const std::string& /* repo */) {
    return;
  }
  void getColumns(std::vector<std::string> & /* _return */, const std::string& /* username */, const std::string& /* repo */, const std::string& /* table */) {
    return;
  }
};

typedef struct _RecommenderService_createNewIndividualServer_args__isset {
  _RecommenderService_createNewIndividualServer_args__isset() : key(false) {}
  bool key;
} _RecommenderService_createNewIndividualServer_args__isset;

class RecommenderService_createNewIndividualServer_args {
 public:

  RecommenderService_createNewIndividualServer_args() : key() {
  }

  virtual ~RecommenderService_createNewIndividualServer_args() throw() {}

  std::string key;

  _RecommenderService_createNewIndividualServer_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const RecommenderService_createNewIndividualServer_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_createNewIndividualServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_createNewIndividualServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_createNewIndividualServer_pargs {
 public:


  virtual ~RecommenderService_createNewIndividualServer_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_createNewIndividualServer_result {
 public:

  RecommenderService_createNewIndividualServer_result() {
  }

  virtual ~RecommenderService_createNewIndividualServer_result() throw() {}


  bool operator == (const RecommenderService_createNewIndividualServer_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_createNewIndividualServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_createNewIndividualServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_createNewIndividualServer_presult {
 public:


  virtual ~RecommenderService_createNewIndividualServer_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_terminateSession_args__isset {
  _RecommenderService_terminateSession_args__isset() : key(false) {}
  bool key;
} _RecommenderService_terminateSession_args__isset;

class RecommenderService_terminateSession_args {
 public:

  RecommenderService_terminateSession_args() : key() {
  }

  virtual ~RecommenderService_terminateSession_args() throw() {}

  std::string key;

  _RecommenderService_terminateSession_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const RecommenderService_terminateSession_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_terminateSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_terminateSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_terminateSession_pargs {
 public:


  virtual ~RecommenderService_terminateSession_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_terminateSession_result {
 public:

  RecommenderService_terminateSession_result() {
  }

  virtual ~RecommenderService_terminateSession_result() throw() {}


  bool operator == (const RecommenderService_terminateSession_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_terminateSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_terminateSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_terminateSession_presult {
 public:


  virtual ~RecommenderService_terminateSession_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_makeRecommendation_args__isset {
  _RecommenderService_makeRecommendation_args__isset() : key(false), userId(false), numRecs(false), isBoolean(false), displayColumns(false) {}
  bool key;
  bool userId;
  bool numRecs;
  bool isBoolean;
  bool displayColumns;
} _RecommenderService_makeRecommendation_args__isset;

class RecommenderService_makeRecommendation_args {
 public:

  RecommenderService_makeRecommendation_args() : key(), userId(0), numRecs(0), isBoolean(0) {
  }

  virtual ~RecommenderService_makeRecommendation_args() throw() {}

  std::string key;
  int64_t userId;
  int64_t numRecs;
  bool isBoolean;
  std::vector<std::string>  displayColumns;

  _RecommenderService_makeRecommendation_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_numRecs(const int64_t val) {
    numRecs = val;
  }

  void __set_isBoolean(const bool val) {
    isBoolean = val;
  }

  void __set_displayColumns(const std::vector<std::string> & val) {
    displayColumns = val;
  }

  bool operator == (const RecommenderService_makeRecommendation_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(numRecs == rhs.numRecs))
      return false;
    if (!(isBoolean == rhs.isBoolean))
      return false;
    if (!(displayColumns == rhs.displayColumns))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_makeRecommendation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_makeRecommendation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_makeRecommendation_pargs {
 public:


  virtual ~RecommenderService_makeRecommendation_pargs() throw() {}

  const std::string* key;
  const int64_t* userId;
  const int64_t* numRecs;
  const bool* isBoolean;
  const std::vector<std::string> * displayColumns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_makeRecommendation_result__isset {
  _RecommenderService_makeRecommendation_result__isset() : success(false) {}
  bool success;
} _RecommenderService_makeRecommendation_result__isset;

class RecommenderService_makeRecommendation_result {
 public:

  RecommenderService_makeRecommendation_result() {
  }

  virtual ~RecommenderService_makeRecommendation_result() throw() {}

  std::vector<Item>  success;

  _RecommenderService_makeRecommendation_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_makeRecommendation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_makeRecommendation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_makeRecommendation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_makeRecommendation_presult__isset {
  _RecommenderService_makeRecommendation_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_makeRecommendation_presult__isset;

class RecommenderService_makeRecommendation_presult {
 public:


  virtual ~RecommenderService_makeRecommendation_presult() throw() {}

  std::vector<Item> * success;

  _RecommenderService_makeRecommendation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_makeItemBasedRecommendations_args__isset {
  _RecommenderService_makeItemBasedRecommendations_args__isset() : key(false), userId(false), numRecs(false), displayColumns(false) {}
  bool key;
  bool userId;
  bool numRecs;
  bool displayColumns;
} _RecommenderService_makeItemBasedRecommendations_args__isset;

class RecommenderService_makeItemBasedRecommendations_args {
 public:

  RecommenderService_makeItemBasedRecommendations_args() : key(), userId(0), numRecs(0) {
  }

  virtual ~RecommenderService_makeItemBasedRecommendations_args() throw() {}

  std::string key;
  int64_t userId;
  int64_t numRecs;
  std::vector<std::string>  displayColumns;

  _RecommenderService_makeItemBasedRecommendations_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_numRecs(const int64_t val) {
    numRecs = val;
  }

  void __set_displayColumns(const std::vector<std::string> & val) {
    displayColumns = val;
  }

  bool operator == (const RecommenderService_makeItemBasedRecommendations_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(numRecs == rhs.numRecs))
      return false;
    if (!(displayColumns == rhs.displayColumns))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_makeItemBasedRecommendations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_makeItemBasedRecommendations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_makeItemBasedRecommendations_pargs {
 public:


  virtual ~RecommenderService_makeItemBasedRecommendations_pargs() throw() {}

  const std::string* key;
  const int64_t* userId;
  const int64_t* numRecs;
  const std::vector<std::string> * displayColumns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_makeItemBasedRecommendations_result__isset {
  _RecommenderService_makeItemBasedRecommendations_result__isset() : success(false) {}
  bool success;
} _RecommenderService_makeItemBasedRecommendations_result__isset;

class RecommenderService_makeItemBasedRecommendations_result {
 public:

  RecommenderService_makeItemBasedRecommendations_result() {
  }

  virtual ~RecommenderService_makeItemBasedRecommendations_result() throw() {}

  std::vector<Item>  success;

  _RecommenderService_makeItemBasedRecommendations_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_makeItemBasedRecommendations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_makeItemBasedRecommendations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_makeItemBasedRecommendations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_makeItemBasedRecommendations_presult__isset {
  _RecommenderService_makeItemBasedRecommendations_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_makeItemBasedRecommendations_presult__isset;

class RecommenderService_makeItemBasedRecommendations_presult {
 public:


  virtual ~RecommenderService_makeItemBasedRecommendations_presult() throw() {}

  std::vector<Item> * success;

  _RecommenderService_makeItemBasedRecommendations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getPageItems_args__isset {
  _RecommenderService_getPageItems_args__isset() : key(false), page(false), numPerPage(false), displayColumns(false) {}
  bool key;
  bool page;
  bool numPerPage;
  bool displayColumns;
} _RecommenderService_getPageItems_args__isset;

class RecommenderService_getPageItems_args {
 public:

  RecommenderService_getPageItems_args() : key(), page(0), numPerPage(0) {
  }

  virtual ~RecommenderService_getPageItems_args() throw() {}

  std::string key;
  int64_t page;
  int64_t numPerPage;
  std::vector<std::string>  displayColumns;

  _RecommenderService_getPageItems_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_page(const int64_t val) {
    page = val;
  }

  void __set_numPerPage(const int64_t val) {
    numPerPage = val;
  }

  void __set_displayColumns(const std::vector<std::string> & val) {
    displayColumns = val;
  }

  bool operator == (const RecommenderService_getPageItems_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(numPerPage == rhs.numPerPage))
      return false;
    if (!(displayColumns == rhs.displayColumns))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getPageItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getPageItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getPageItems_pargs {
 public:


  virtual ~RecommenderService_getPageItems_pargs() throw() {}

  const std::string* key;
  const int64_t* page;
  const int64_t* numPerPage;
  const std::vector<std::string> * displayColumns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getPageItems_result__isset {
  _RecommenderService_getPageItems_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getPageItems_result__isset;

class RecommenderService_getPageItems_result {
 public:

  RecommenderService_getPageItems_result() {
  }

  virtual ~RecommenderService_getPageItems_result() throw() {}

  std::vector<Item>  success;

  _RecommenderService_getPageItems_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_getPageItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getPageItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getPageItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getPageItems_presult__isset {
  _RecommenderService_getPageItems_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getPageItems_presult__isset;

class RecommenderService_getPageItems_presult {
 public:


  virtual ~RecommenderService_getPageItems_presult() throw() {}

  std::vector<Item> * success;

  _RecommenderService_getPageItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getItemCount_args__isset {
  _RecommenderService_getItemCount_args__isset() : key(false) {}
  bool key;
} _RecommenderService_getItemCount_args__isset;

class RecommenderService_getItemCount_args {
 public:

  RecommenderService_getItemCount_args() : key() {
  }

  virtual ~RecommenderService_getItemCount_args() throw() {}

  std::string key;

  _RecommenderService_getItemCount_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const RecommenderService_getItemCount_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getItemCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getItemCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getItemCount_pargs {
 public:


  virtual ~RecommenderService_getItemCount_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getItemCount_result__isset {
  _RecommenderService_getItemCount_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getItemCount_result__isset;

class RecommenderService_getItemCount_result {
 public:

  RecommenderService_getItemCount_result() : success(0) {
  }

  virtual ~RecommenderService_getItemCount_result() throw() {}

  int64_t success;

  _RecommenderService_getItemCount_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const RecommenderService_getItemCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getItemCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getItemCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getItemCount_presult__isset {
  _RecommenderService_getItemCount_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getItemCount_presult__isset;

class RecommenderService_getItemCount_presult {
 public:


  virtual ~RecommenderService_getItemCount_presult() throw() {}

  int64_t* success;

  _RecommenderService_getItemCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_recordRatings_args__isset {
  _RecommenderService_recordRatings_args__isset() : key(false), userId(false), itemId(false), rating(false) {}
  bool key;
  bool userId;
  bool itemId;
  bool rating;
} _RecommenderService_recordRatings_args__isset;

class RecommenderService_recordRatings_args {
 public:

  RecommenderService_recordRatings_args() : key(), userId(0), itemId(0), rating(0) {
  }

  virtual ~RecommenderService_recordRatings_args() throw() {}

  std::string key;
  int64_t userId;
  int64_t itemId;
  int64_t rating;

  _RecommenderService_recordRatings_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_itemId(const int64_t val) {
    itemId = val;
  }

  void __set_rating(const int64_t val) {
    rating = val;
  }

  bool operator == (const RecommenderService_recordRatings_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(itemId == rhs.itemId))
      return false;
    if (!(rating == rhs.rating))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_recordRatings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_recordRatings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_recordRatings_pargs {
 public:


  virtual ~RecommenderService_recordRatings_pargs() throw() {}

  const std::string* key;
  const int64_t* userId;
  const int64_t* itemId;
  const int64_t* rating;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_recordRatings_result {
 public:

  RecommenderService_recordRatings_result() {
  }

  virtual ~RecommenderService_recordRatings_result() throw() {}


  bool operator == (const RecommenderService_recordRatings_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_recordRatings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_recordRatings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_recordRatings_presult {
 public:


  virtual ~RecommenderService_recordRatings_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_deleteRatings_args__isset {
  _RecommenderService_deleteRatings_args__isset() : key(false), userId(false), itemId(false) {}
  bool key;
  bool userId;
  bool itemId;
} _RecommenderService_deleteRatings_args__isset;

class RecommenderService_deleteRatings_args {
 public:

  RecommenderService_deleteRatings_args() : key(), userId(0), itemId(0) {
  }

  virtual ~RecommenderService_deleteRatings_args() throw() {}

  std::string key;
  int64_t userId;
  int64_t itemId;

  _RecommenderService_deleteRatings_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_itemId(const int64_t val) {
    itemId = val;
  }

  bool operator == (const RecommenderService_deleteRatings_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(itemId == rhs.itemId))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_deleteRatings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_deleteRatings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_deleteRatings_pargs {
 public:


  virtual ~RecommenderService_deleteRatings_pargs() throw() {}

  const std::string* key;
  const int64_t* userId;
  const int64_t* itemId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_deleteRatings_result {
 public:

  RecommenderService_deleteRatings_result() {
  }

  virtual ~RecommenderService_deleteRatings_result() throw() {}


  bool operator == (const RecommenderService_deleteRatings_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_deleteRatings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_deleteRatings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_deleteRatings_presult {
 public:


  virtual ~RecommenderService_deleteRatings_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_createNewUser_args__isset {
  _RecommenderService_createNewUser_args__isset() : key(false), username(false), iskibitzuser(false) {}
  bool key;
  bool username;
  bool iskibitzuser;
} _RecommenderService_createNewUser_args__isset;

class RecommenderService_createNewUser_args {
 public:

  RecommenderService_createNewUser_args() : key(), username(), iskibitzuser(0) {
  }

  virtual ~RecommenderService_createNewUser_args() throw() {}

  std::string key;
  std::string username;
  bool iskibitzuser;

  _RecommenderService_createNewUser_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_iskibitzuser(const bool val) {
    iskibitzuser = val;
  }

  bool operator == (const RecommenderService_createNewUser_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(iskibitzuser == rhs.iskibitzuser))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_createNewUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_createNewUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_createNewUser_pargs {
 public:


  virtual ~RecommenderService_createNewUser_pargs() throw() {}

  const std::string* key;
  const std::string* username;
  const bool* iskibitzuser;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_createNewUser_result__isset {
  _RecommenderService_createNewUser_result__isset() : success(false) {}
  bool success;
} _RecommenderService_createNewUser_result__isset;

class RecommenderService_createNewUser_result {
 public:

  RecommenderService_createNewUser_result() : success() {
  }

  virtual ~RecommenderService_createNewUser_result() throw() {}

  std::string success;

  _RecommenderService_createNewUser_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RecommenderService_createNewUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_createNewUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_createNewUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_createNewUser_presult__isset {
  _RecommenderService_createNewUser_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_createNewUser_presult__isset;

class RecommenderService_createNewUser_presult {
 public:


  virtual ~RecommenderService_createNewUser_presult() throw() {}

  std::string* success;

  _RecommenderService_createNewUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_checkUsername_args__isset {
  _RecommenderService_checkUsername_args__isset() : key(false), username(false), iskibitzuser(false) {}
  bool key;
  bool username;
  bool iskibitzuser;
} _RecommenderService_checkUsername_args__isset;

class RecommenderService_checkUsername_args {
 public:

  RecommenderService_checkUsername_args() : key(), username(), iskibitzuser(0) {
  }

  virtual ~RecommenderService_checkUsername_args() throw() {}

  std::string key;
  std::string username;
  bool iskibitzuser;

  _RecommenderService_checkUsername_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_iskibitzuser(const bool val) {
    iskibitzuser = val;
  }

  bool operator == (const RecommenderService_checkUsername_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(iskibitzuser == rhs.iskibitzuser))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkUsername_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkUsername_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_checkUsername_pargs {
 public:


  virtual ~RecommenderService_checkUsername_pargs() throw() {}

  const std::string* key;
  const std::string* username;
  const bool* iskibitzuser;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkUsername_result__isset {
  _RecommenderService_checkUsername_result__isset() : success(false) {}
  bool success;
} _RecommenderService_checkUsername_result__isset;

class RecommenderService_checkUsername_result {
 public:

  RecommenderService_checkUsername_result() : success(0) {
  }

  virtual ~RecommenderService_checkUsername_result() throw() {}

  bool success;

  _RecommenderService_checkUsername_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RecommenderService_checkUsername_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkUsername_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkUsername_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkUsername_presult__isset {
  _RecommenderService_checkUsername_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_checkUsername_presult__isset;

class RecommenderService_checkUsername_presult {
 public:


  virtual ~RecommenderService_checkUsername_presult() throw() {}

  bool* success;

  _RecommenderService_checkUsername_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_checkLogin_args__isset {
  _RecommenderService_checkLogin_args__isset() : key(false), username(false), password(false), iskibitzuser(false) {}
  bool key;
  bool username;
  bool password;
  bool iskibitzuser;
} _RecommenderService_checkLogin_args__isset;

class RecommenderService_checkLogin_args {
 public:

  RecommenderService_checkLogin_args() : key(), username(), password(), iskibitzuser(0) {
  }

  virtual ~RecommenderService_checkLogin_args() throw() {}

  std::string key;
  std::string username;
  std::string password;
  bool iskibitzuser;

  _RecommenderService_checkLogin_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_iskibitzuser(const bool val) {
    iskibitzuser = val;
  }

  bool operator == (const RecommenderService_checkLogin_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(iskibitzuser == rhs.iskibitzuser))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_checkLogin_pargs {
 public:


  virtual ~RecommenderService_checkLogin_pargs() throw() {}

  const std::string* key;
  const std::string* username;
  const std::string* password;
  const bool* iskibitzuser;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkLogin_result__isset {
  _RecommenderService_checkLogin_result__isset() : success(false) {}
  bool success;
} _RecommenderService_checkLogin_result__isset;

class RecommenderService_checkLogin_result {
 public:

  RecommenderService_checkLogin_result() : success(0) {
  }

  virtual ~RecommenderService_checkLogin_result() throw() {}

  bool success;

  _RecommenderService_checkLogin_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RecommenderService_checkLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkLogin_presult__isset {
  _RecommenderService_checkLogin_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_checkLogin_presult__isset;

class RecommenderService_checkLogin_presult {
 public:


  virtual ~RecommenderService_checkLogin_presult() throw() {}

  bool* success;

  _RecommenderService_checkLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_retrieveUserId_args__isset {
  _RecommenderService_retrieveUserId_args__isset() : key(false), username(false) {}
  bool key;
  bool username;
} _RecommenderService_retrieveUserId_args__isset;

class RecommenderService_retrieveUserId_args {
 public:

  RecommenderService_retrieveUserId_args() : key(), username() {
  }

  virtual ~RecommenderService_retrieveUserId_args() throw() {}

  std::string key;
  std::string username;

  _RecommenderService_retrieveUserId_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  bool operator == (const RecommenderService_retrieveUserId_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_retrieveUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_retrieveUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_retrieveUserId_pargs {
 public:


  virtual ~RecommenderService_retrieveUserId_pargs() throw() {}

  const std::string* key;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_retrieveUserId_result__isset {
  _RecommenderService_retrieveUserId_result__isset() : success(false) {}
  bool success;
} _RecommenderService_retrieveUserId_result__isset;

class RecommenderService_retrieveUserId_result {
 public:

  RecommenderService_retrieveUserId_result() : success(0) {
  }

  virtual ~RecommenderService_retrieveUserId_result() throw() {}

  int64_t success;

  _RecommenderService_retrieveUserId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const RecommenderService_retrieveUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_retrieveUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_retrieveUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_retrieveUserId_presult__isset {
  _RecommenderService_retrieveUserId_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_retrieveUserId_presult__isset;

class RecommenderService_retrieveUserId_presult {
 public:


  virtual ~RecommenderService_retrieveUserId_presult() throw() {}

  int64_t* success;

  _RecommenderService_retrieveUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_createNewRecommender_args__isset {
  _RecommenderService_createNewRecommender_args__isset() : username(false), primaryKey(false), database(false), table(false), title(false), description(false), image(false), ratings_column(false), clientKey(false) {}
  bool username;
  bool primaryKey;
  bool database;
  bool table;
  bool title;
  bool description;
  bool image;
  bool ratings_column;
  bool clientKey;
} _RecommenderService_createNewRecommender_args__isset;

class RecommenderService_createNewRecommender_args {
 public:

  RecommenderService_createNewRecommender_args() : username(), primaryKey(), database(), table(), title(), description(), image(), ratings_column(), clientKey() {
  }

  virtual ~RecommenderService_createNewRecommender_args() throw() {}

  std::string username;
  std::string primaryKey;
  std::string database;
  std::string table;
  std::string title;
  std::string description;
  std::string image;
  std::string ratings_column;
  std::string clientKey;

  _RecommenderService_createNewRecommender_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_primaryKey(const std::string& val) {
    primaryKey = val;
  }

  void __set_database(const std::string& val) {
    database = val;
  }

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_image(const std::string& val) {
    image = val;
  }

  void __set_ratings_column(const std::string& val) {
    ratings_column = val;
  }

  void __set_clientKey(const std::string& val) {
    clientKey = val;
  }

  bool operator == (const RecommenderService_createNewRecommender_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(primaryKey == rhs.primaryKey))
      return false;
    if (!(database == rhs.database))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(image == rhs.image))
      return false;
    if (!(ratings_column == rhs.ratings_column))
      return false;
    if (!(clientKey == rhs.clientKey))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_createNewRecommender_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_createNewRecommender_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_createNewRecommender_pargs {
 public:


  virtual ~RecommenderService_createNewRecommender_pargs() throw() {}

  const std::string* username;
  const std::string* primaryKey;
  const std::string* database;
  const std::string* table;
  const std::string* title;
  const std::string* description;
  const std::string* image;
  const std::string* ratings_column;
  const std::string* clientKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_createNewRecommender_result__isset {
  _RecommenderService_createNewRecommender_result__isset() : success(false) {}
  bool success;
} _RecommenderService_createNewRecommender_result__isset;

class RecommenderService_createNewRecommender_result {
 public:

  RecommenderService_createNewRecommender_result() : success(0) {
  }

  virtual ~RecommenderService_createNewRecommender_result() throw() {}

  bool success;

  _RecommenderService_createNewRecommender_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RecommenderService_createNewRecommender_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_createNewRecommender_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_createNewRecommender_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_createNewRecommender_presult__isset {
  _RecommenderService_createNewRecommender_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_createNewRecommender_presult__isset;

class RecommenderService_createNewRecommender_presult {
 public:


  virtual ~RecommenderService_createNewRecommender_presult() throw() {}

  bool* success;

  _RecommenderService_createNewRecommender_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getUserRatedItems_args__isset {
  _RecommenderService_getUserRatedItems_args__isset() : key(false), userId(false), displayColumns(false) {}
  bool key;
  bool userId;
  bool displayColumns;
} _RecommenderService_getUserRatedItems_args__isset;

class RecommenderService_getUserRatedItems_args {
 public:

  RecommenderService_getUserRatedItems_args() : key(), userId(0) {
  }

  virtual ~RecommenderService_getUserRatedItems_args() throw() {}

  std::string key;
  int64_t userId;
  std::vector<std::string>  displayColumns;

  _RecommenderService_getUserRatedItems_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_userId(const int64_t val) {
    userId = val;
  }

  void __set_displayColumns(const std::vector<std::string> & val) {
    displayColumns = val;
  }

  bool operator == (const RecommenderService_getUserRatedItems_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(displayColumns == rhs.displayColumns))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getUserRatedItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getUserRatedItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getUserRatedItems_pargs {
 public:


  virtual ~RecommenderService_getUserRatedItems_pargs() throw() {}

  const std::string* key;
  const int64_t* userId;
  const std::vector<std::string> * displayColumns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getUserRatedItems_result__isset {
  _RecommenderService_getUserRatedItems_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getUserRatedItems_result__isset;

class RecommenderService_getUserRatedItems_result {
 public:

  RecommenderService_getUserRatedItems_result() {
  }

  virtual ~RecommenderService_getUserRatedItems_result() throw() {}

  std::vector<Item>  success;

  _RecommenderService_getUserRatedItems_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_getUserRatedItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getUserRatedItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getUserRatedItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getUserRatedItems_presult__isset {
  _RecommenderService_getUserRatedItems_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getUserRatedItems_presult__isset;

class RecommenderService_getUserRatedItems_presult {
 public:


  virtual ~RecommenderService_getUserRatedItems_presult() throw() {}

  std::vector<Item> * success;

  _RecommenderService_getUserRatedItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_initiateModel_args__isset {
  _RecommenderService_initiateModel_args__isset() : key(false), table(false), username(false), database(false) {}
  bool key;
  bool table;
  bool username;
  bool database;
} _RecommenderService_initiateModel_args__isset;

class RecommenderService_initiateModel_args {
 public:

  RecommenderService_initiateModel_args() : key(), table(), username(), database() {
  }

  virtual ~RecommenderService_initiateModel_args() throw() {}

  std::string key;
  std::string table;
  std::string username;
  std::string database;

  _RecommenderService_initiateModel_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_database(const std::string& val) {
    database = val;
  }

  bool operator == (const RecommenderService_initiateModel_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(database == rhs.database))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_initiateModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_initiateModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_initiateModel_pargs {
 public:


  virtual ~RecommenderService_initiateModel_pargs() throw() {}

  const std::string* key;
  const std::string* table;
  const std::string* username;
  const std::string* database;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_initiateModel_result {
 public:

  RecommenderService_initiateModel_result() {
  }

  virtual ~RecommenderService_initiateModel_result() throw() {}


  bool operator == (const RecommenderService_initiateModel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_initiateModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_initiateModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_initiateModel_presult {
 public:


  virtual ~RecommenderService_initiateModel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getSearchItems_args__isset {
  _RecommenderService_getSearchItems_args__isset() : table(false), query(false), columnsToSearch(false), displayColumns(false) {}
  bool table;
  bool query;
  bool columnsToSearch;
  bool displayColumns;
} _RecommenderService_getSearchItems_args__isset;

class RecommenderService_getSearchItems_args {
 public:

  RecommenderService_getSearchItems_args() : table(), query() {
  }

  virtual ~RecommenderService_getSearchItems_args() throw() {}

  std::string table;
  std::string query;
  std::vector<std::string>  columnsToSearch;
  std::vector<std::string>  displayColumns;

  _RecommenderService_getSearchItems_args__isset __isset;

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_query(const std::string& val) {
    query = val;
  }

  void __set_columnsToSearch(const std::vector<std::string> & val) {
    columnsToSearch = val;
  }

  void __set_displayColumns(const std::vector<std::string> & val) {
    displayColumns = val;
  }

  bool operator == (const RecommenderService_getSearchItems_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(columnsToSearch == rhs.columnsToSearch))
      return false;
    if (!(displayColumns == rhs.displayColumns))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getSearchItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getSearchItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getSearchItems_pargs {
 public:


  virtual ~RecommenderService_getSearchItems_pargs() throw() {}

  const std::string* table;
  const std::string* query;
  const std::vector<std::string> * columnsToSearch;
  const std::vector<std::string> * displayColumns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getSearchItems_result__isset {
  _RecommenderService_getSearchItems_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getSearchItems_result__isset;

class RecommenderService_getSearchItems_result {
 public:

  RecommenderService_getSearchItems_result() {
  }

  virtual ~RecommenderService_getSearchItems_result() throw() {}

  std::vector<Item>  success;

  _RecommenderService_getSearchItems_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_getSearchItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getSearchItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getSearchItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getSearchItems_presult__isset {
  _RecommenderService_getSearchItems_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getSearchItems_presult__isset;

class RecommenderService_getSearchItems_presult {
 public:


  virtual ~RecommenderService_getSearchItems_presult() throw() {}

  std::vector<Item> * success;

  _RecommenderService_getSearchItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args__isset {
  _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args__isset() : key(false), ratingColumnName(false), numRecs(false), displayColumns(false) {}
  bool key;
  bool ratingColumnName;
  bool numRecs;
  bool displayColumns;
} _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args__isset;

class RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args {
 public:

  RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args() : key(), ratingColumnName(), numRecs(0) {
  }

  virtual ~RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args() throw() {}

  std::string key;
  std::string ratingColumnName;
  int64_t numRecs;
  std::vector<std::string>  displayColumns;

  _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_ratingColumnName(const std::string& val) {
    ratingColumnName = val;
  }

  void __set_numRecs(const int64_t val) {
    numRecs = val;
  }

  void __set_displayColumns(const std::vector<std::string> & val) {
    displayColumns = val;
  }

  bool operator == (const RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(ratingColumnName == rhs.ratingColumnName))
      return false;
    if (!(numRecs == rhs.numRecs))
      return false;
    if (!(displayColumns == rhs.displayColumns))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_makeOverallRatingBasedOrRandomRecommendation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_makeOverallRatingBasedOrRandomRecommendation_pargs {
 public:


  virtual ~RecommenderService_makeOverallRatingBasedOrRandomRecommendation_pargs() throw() {}

  const std::string* key;
  const std::string* ratingColumnName;
  const int64_t* numRecs;
  const std::vector<std::string> * displayColumns;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result__isset {
  _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result__isset() : success(false) {}
  bool success;
} _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result__isset;

class RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result {
 public:

  RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result() {
  }

  virtual ~RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result() throw() {}

  std::vector<Item>  success;

  _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_makeOverallRatingBasedOrRandomRecommendation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_presult__isset {
  _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_presult__isset;

class RecommenderService_makeOverallRatingBasedOrRandomRecommendation_presult {
 public:


  virtual ~RecommenderService_makeOverallRatingBasedOrRandomRecommendation_presult() throw() {}

  std::vector<Item> * success;

  _RecommenderService_makeOverallRatingBasedOrRandomRecommendation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_addKibitzUser_args__isset {
  _RecommenderService_addKibitzUser_args__isset() : email(false), password(false) {}
  bool email;
  bool password;
} _RecommenderService_addKibitzUser_args__isset;

class RecommenderService_addKibitzUser_args {
 public:

  RecommenderService_addKibitzUser_args() : email(), password() {
  }

  virtual ~RecommenderService_addKibitzUser_args() throw() {}

  std::string email;
  std::string password;

  _RecommenderService_addKibitzUser_args__isset __isset;

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const RecommenderService_addKibitzUser_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_addKibitzUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_addKibitzUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_addKibitzUser_pargs {
 public:


  virtual ~RecommenderService_addKibitzUser_pargs() throw() {}

  const std::string* email;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_addKibitzUser_result {
 public:

  RecommenderService_addKibitzUser_result() {
  }

  virtual ~RecommenderService_addKibitzUser_result() throw() {}


  bool operator == (const RecommenderService_addKibitzUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_addKibitzUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_addKibitzUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_addKibitzUser_presult {
 public:


  virtual ~RecommenderService_addKibitzUser_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_checkCorrectDatahubLogin_args__isset {
  _RecommenderService_checkCorrectDatahubLogin_args__isset() : username(false), repository(false), table(false), primary_key(false), title(false), description(false), image(false) {}
  bool username;
  bool repository;
  bool table;
  bool primary_key;
  bool title;
  bool description;
  bool image;
} _RecommenderService_checkCorrectDatahubLogin_args__isset;

class RecommenderService_checkCorrectDatahubLogin_args {
 public:

  RecommenderService_checkCorrectDatahubLogin_args() : username(), repository(), table(), primary_key(), title(), description(), image() {
  }

  virtual ~RecommenderService_checkCorrectDatahubLogin_args() throw() {}

  std::string username;
  std::string repository;
  std::string table;
  std::string primary_key;
  std::string title;
  std::string description;
  std::string image;

  _RecommenderService_checkCorrectDatahubLogin_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_repository(const std::string& val) {
    repository = val;
  }

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_primary_key(const std::string& val) {
    primary_key = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_image(const std::string& val) {
    image = val;
  }

  bool operator == (const RecommenderService_checkCorrectDatahubLogin_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(repository == rhs.repository))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(primary_key == rhs.primary_key))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkCorrectDatahubLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkCorrectDatahubLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_checkCorrectDatahubLogin_pargs {
 public:


  virtual ~RecommenderService_checkCorrectDatahubLogin_pargs() throw() {}

  const std::string* username;
  const std::string* repository;
  const std::string* table;
  const std::string* primary_key;
  const std::string* title;
  const std::string* description;
  const std::string* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkCorrectDatahubLogin_result__isset {
  _RecommenderService_checkCorrectDatahubLogin_result__isset() : success(false) {}
  bool success;
} _RecommenderService_checkCorrectDatahubLogin_result__isset;

class RecommenderService_checkCorrectDatahubLogin_result {
 public:

  RecommenderService_checkCorrectDatahubLogin_result() : success(0) {
  }

  virtual ~RecommenderService_checkCorrectDatahubLogin_result() throw() {}

  bool success;

  _RecommenderService_checkCorrectDatahubLogin_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RecommenderService_checkCorrectDatahubLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkCorrectDatahubLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkCorrectDatahubLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkCorrectDatahubLogin_presult__isset {
  _RecommenderService_checkCorrectDatahubLogin_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_checkCorrectDatahubLogin_presult__isset;

class RecommenderService_checkCorrectDatahubLogin_presult {
 public:


  virtual ~RecommenderService_checkCorrectDatahubLogin_presult() throw() {}

  bool* success;

  _RecommenderService_checkCorrectDatahubLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_checkRatingsColumn_args__isset {
  _RecommenderService_checkRatingsColumn_args__isset() : username(false), table(false), repository(false), ratings_column(false) {}
  bool username;
  bool table;
  bool repository;
  bool ratings_column;
} _RecommenderService_checkRatingsColumn_args__isset;

class RecommenderService_checkRatingsColumn_args {
 public:

  RecommenderService_checkRatingsColumn_args() : username(), table(), repository(), ratings_column() {
  }

  virtual ~RecommenderService_checkRatingsColumn_args() throw() {}

  std::string username;
  std::string table;
  std::string repository;
  std::string ratings_column;

  _RecommenderService_checkRatingsColumn_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_table(const std::string& val) {
    table = val;
  }

  void __set_repository(const std::string& val) {
    repository = val;
  }

  void __set_ratings_column(const std::string& val) {
    ratings_column = val;
  }

  bool operator == (const RecommenderService_checkRatingsColumn_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(repository == rhs.repository))
      return false;
    if (!(ratings_column == rhs.ratings_column))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkRatingsColumn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkRatingsColumn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_checkRatingsColumn_pargs {
 public:


  virtual ~RecommenderService_checkRatingsColumn_pargs() throw() {}

  const std::string* username;
  const std::string* table;
  const std::string* repository;
  const std::string* ratings_column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkRatingsColumn_result__isset {
  _RecommenderService_checkRatingsColumn_result__isset() : success(false) {}
  bool success;
} _RecommenderService_checkRatingsColumn_result__isset;

class RecommenderService_checkRatingsColumn_result {
 public:

  RecommenderService_checkRatingsColumn_result() : success(0) {
  }

  virtual ~RecommenderService_checkRatingsColumn_result() throw() {}

  bool success;

  _RecommenderService_checkRatingsColumn_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RecommenderService_checkRatingsColumn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_checkRatingsColumn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_checkRatingsColumn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_checkRatingsColumn_presult__isset {
  _RecommenderService_checkRatingsColumn_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_checkRatingsColumn_presult__isset;

class RecommenderService_checkRatingsColumn_presult {
 public:


  virtual ~RecommenderService_checkRatingsColumn_presult() throw() {}

  bool* success;

  _RecommenderService_checkRatingsColumn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getRecommenders_args__isset {
  _RecommenderService_getRecommenders_args__isset() : username(false) {}
  bool username;
} _RecommenderService_getRecommenders_args__isset;

class RecommenderService_getRecommenders_args {
 public:

  RecommenderService_getRecommenders_args() : username() {
  }

  virtual ~RecommenderService_getRecommenders_args() throw() {}

  std::string username;

  _RecommenderService_getRecommenders_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  bool operator == (const RecommenderService_getRecommenders_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getRecommenders_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getRecommenders_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getRecommenders_pargs {
 public:


  virtual ~RecommenderService_getRecommenders_pargs() throw() {}

  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getRecommenders_result__isset {
  _RecommenderService_getRecommenders_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getRecommenders_result__isset;

class RecommenderService_getRecommenders_result {
 public:

  RecommenderService_getRecommenders_result() {
  }

  virtual ~RecommenderService_getRecommenders_result() throw() {}

  std::vector<Recommender>  success;

  _RecommenderService_getRecommenders_result__isset __isset;

  void __set_success(const std::vector<Recommender> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_getRecommenders_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getRecommenders_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getRecommenders_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getRecommenders_presult__isset {
  _RecommenderService_getRecommenders_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getRecommenders_presult__isset;

class RecommenderService_getRecommenders_presult {
 public:


  virtual ~RecommenderService_getRecommenders_presult() throw() {}

  std::vector<Recommender> * success;

  _RecommenderService_getRecommenders_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getProfilePicture_args__isset {
  _RecommenderService_getProfilePicture_args__isset() : username(false) {}
  bool username;
} _RecommenderService_getProfilePicture_args__isset;

class RecommenderService_getProfilePicture_args {
 public:

  RecommenderService_getProfilePicture_args() : username() {
  }

  virtual ~RecommenderService_getProfilePicture_args() throw() {}

  std::string username;

  _RecommenderService_getProfilePicture_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  bool operator == (const RecommenderService_getProfilePicture_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getProfilePicture_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getProfilePicture_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getProfilePicture_pargs {
 public:


  virtual ~RecommenderService_getProfilePicture_pargs() throw() {}

  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getProfilePicture_result__isset {
  _RecommenderService_getProfilePicture_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getProfilePicture_result__isset;

class RecommenderService_getProfilePicture_result {
 public:

  RecommenderService_getProfilePicture_result() : success() {
  }

  virtual ~RecommenderService_getProfilePicture_result() throw() {}

  std::string success;

  _RecommenderService_getProfilePicture_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RecommenderService_getProfilePicture_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getProfilePicture_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getProfilePicture_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getProfilePicture_presult__isset {
  _RecommenderService_getProfilePicture_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getProfilePicture_presult__isset;

class RecommenderService_getProfilePicture_presult {
 public:


  virtual ~RecommenderService_getProfilePicture_presult() throw() {}

  std::string* success;

  _RecommenderService_getProfilePicture_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_saveFBProfilePic_args__isset {
  _RecommenderService_saveFBProfilePic_args__isset() : username(false), fbUsername(false) {}
  bool username;
  bool fbUsername;
} _RecommenderService_saveFBProfilePic_args__isset;

class RecommenderService_saveFBProfilePic_args {
 public:

  RecommenderService_saveFBProfilePic_args() : username(), fbUsername() {
  }

  virtual ~RecommenderService_saveFBProfilePic_args() throw() {}

  std::string username;
  std::string fbUsername;

  _RecommenderService_saveFBProfilePic_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_fbUsername(const std::string& val) {
    fbUsername = val;
  }

  bool operator == (const RecommenderService_saveFBProfilePic_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(fbUsername == rhs.fbUsername))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_saveFBProfilePic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_saveFBProfilePic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_saveFBProfilePic_pargs {
 public:


  virtual ~RecommenderService_saveFBProfilePic_pargs() throw() {}

  const std::string* username;
  const std::string* fbUsername;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_saveFBProfilePic_result {
 public:

  RecommenderService_saveFBProfilePic_result() {
  }

  virtual ~RecommenderService_saveFBProfilePic_result() throw() {}


  bool operator == (const RecommenderService_saveFBProfilePic_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_saveFBProfilePic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_saveFBProfilePic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_saveFBProfilePic_presult {
 public:


  virtual ~RecommenderService_saveFBProfilePic_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_deleteRecommender_args__isset {
  _RecommenderService_deleteRecommender_args__isset() : clientKey(false) {}
  bool clientKey;
} _RecommenderService_deleteRecommender_args__isset;

class RecommenderService_deleteRecommender_args {
 public:

  RecommenderService_deleteRecommender_args() : clientKey() {
  }

  virtual ~RecommenderService_deleteRecommender_args() throw() {}

  std::string clientKey;

  _RecommenderService_deleteRecommender_args__isset __isset;

  void __set_clientKey(const std::string& val) {
    clientKey = val;
  }

  bool operator == (const RecommenderService_deleteRecommender_args & rhs) const
  {
    if (!(clientKey == rhs.clientKey))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_deleteRecommender_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_deleteRecommender_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_deleteRecommender_pargs {
 public:


  virtual ~RecommenderService_deleteRecommender_pargs() throw() {}

  const std::string* clientKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_deleteRecommender_result {
 public:

  RecommenderService_deleteRecommender_result() {
  }

  virtual ~RecommenderService_deleteRecommender_result() throw() {}


  bool operator == (const RecommenderService_deleteRecommender_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_deleteRecommender_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_deleteRecommender_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_deleteRecommender_presult {
 public:


  virtual ~RecommenderService_deleteRecommender_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_updateTemplate_args__isset {
  _RecommenderService_updateTemplate_args__isset() : username(false), primaryKey(false), title(false), description(false), image(false), video(false), itemTypes(false), displayItems(false), maxRatingVal(false), numRecs(false), recommenderName(false), clientKey(false), homepage(false), creatorName(false), repoName(false), tableName(false), ratingsColumn(false) {}
  bool username;
  bool primaryKey;
  bool title;
  bool description;
  bool image;
  bool video;
  bool itemTypes;
  bool displayItems;
  bool maxRatingVal;
  bool numRecs;
  bool recommenderName;
  bool clientKey;
  bool homepage;
  bool creatorName;
  bool repoName;
  bool tableName;
  bool ratingsColumn;
} _RecommenderService_updateTemplate_args__isset;

class RecommenderService_updateTemplate_args {
 public:

  RecommenderService_updateTemplate_args() : username(), primaryKey(), title(), description(), image(), video(), maxRatingVal(0), numRecs(0), recommenderName(), clientKey(), homepage(), creatorName(), repoName(), tableName(), ratingsColumn() {
  }

  virtual ~RecommenderService_updateTemplate_args() throw() {}

  std::string username;
  std::string primaryKey;
  std::string title;
  std::string description;
  std::string image;
  std::string video;
  std::map<std::string, std::string>  itemTypes;
  std::vector<std::string>  displayItems;
  int64_t maxRatingVal;
  int64_t numRecs;
  std::string recommenderName;
  std::string clientKey;
  std::string homepage;
  std::string creatorName;
  std::string repoName;
  std::string tableName;
  std::string ratingsColumn;

  _RecommenderService_updateTemplate_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_primaryKey(const std::string& val) {
    primaryKey = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_image(const std::string& val) {
    image = val;
  }

  void __set_video(const std::string& val) {
    video = val;
  }

  void __set_itemTypes(const std::map<std::string, std::string> & val) {
    itemTypes = val;
  }

  void __set_displayItems(const std::vector<std::string> & val) {
    displayItems = val;
  }

  void __set_maxRatingVal(const int64_t val) {
    maxRatingVal = val;
  }

  void __set_numRecs(const int64_t val) {
    numRecs = val;
  }

  void __set_recommenderName(const std::string& val) {
    recommenderName = val;
  }

  void __set_clientKey(const std::string& val) {
    clientKey = val;
  }

  void __set_homepage(const std::string& val) {
    homepage = val;
  }

  void __set_creatorName(const std::string& val) {
    creatorName = val;
  }

  void __set_repoName(const std::string& val) {
    repoName = val;
  }

  void __set_tableName(const std::string& val) {
    tableName = val;
  }

  void __set_ratingsColumn(const std::string& val) {
    ratingsColumn = val;
  }

  bool operator == (const RecommenderService_updateTemplate_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(primaryKey == rhs.primaryKey))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(image == rhs.image))
      return false;
    if (!(video == rhs.video))
      return false;
    if (!(itemTypes == rhs.itemTypes))
      return false;
    if (!(displayItems == rhs.displayItems))
      return false;
    if (!(maxRatingVal == rhs.maxRatingVal))
      return false;
    if (!(numRecs == rhs.numRecs))
      return false;
    if (!(recommenderName == rhs.recommenderName))
      return false;
    if (!(clientKey == rhs.clientKey))
      return false;
    if (!(homepage == rhs.homepage))
      return false;
    if (!(creatorName == rhs.creatorName))
      return false;
    if (!(repoName == rhs.repoName))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(ratingsColumn == rhs.ratingsColumn))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_updateTemplate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_updateTemplate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_updateTemplate_pargs {
 public:


  virtual ~RecommenderService_updateTemplate_pargs() throw() {}

  const std::string* username;
  const std::string* primaryKey;
  const std::string* title;
  const std::string* description;
  const std::string* image;
  const std::string* video;
  const std::map<std::string, std::string> * itemTypes;
  const std::vector<std::string> * displayItems;
  const int64_t* maxRatingVal;
  const int64_t* numRecs;
  const std::string* recommenderName;
  const std::string* clientKey;
  const std::string* homepage;
  const std::string* creatorName;
  const std::string* repoName;
  const std::string* tableName;
  const std::string* ratingsColumn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_updateTemplate_result {
 public:

  RecommenderService_updateTemplate_result() {
  }

  virtual ~RecommenderService_updateTemplate_result() throw() {}


  bool operator == (const RecommenderService_updateTemplate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_updateTemplate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_updateTemplate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_updateTemplate_presult {
 public:


  virtual ~RecommenderService_updateTemplate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_configurePrefilledUserRatings_args__isset {
  _RecommenderService_configurePrefilledUserRatings_args__isset() : username(false), repoName(false), primaryKey(false), itemTable(false), tableName(false), userIdCol(false), itemIdCol(false), userRatingCol(false) {}
  bool username;
  bool repoName;
  bool primaryKey;
  bool itemTable;
  bool tableName;
  bool userIdCol;
  bool itemIdCol;
  bool userRatingCol;
} _RecommenderService_configurePrefilledUserRatings_args__isset;

class RecommenderService_configurePrefilledUserRatings_args {
 public:

  RecommenderService_configurePrefilledUserRatings_args() : username(), repoName(), primaryKey(), itemTable(), tableName(), userIdCol(), itemIdCol(), userRatingCol() {
  }

  virtual ~RecommenderService_configurePrefilledUserRatings_args() throw() {}

  std::string username;
  std::string repoName;
  std::string primaryKey;
  std::string itemTable;
  std::string tableName;
  std::string userIdCol;
  std::string itemIdCol;
  std::string userRatingCol;

  _RecommenderService_configurePrefilledUserRatings_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_repoName(const std::string& val) {
    repoName = val;
  }

  void __set_primaryKey(const std::string& val) {
    primaryKey = val;
  }

  void __set_itemTable(const std::string& val) {
    itemTable = val;
  }

  void __set_tableName(const std::string& val) {
    tableName = val;
  }

  void __set_userIdCol(const std::string& val) {
    userIdCol = val;
  }

  void __set_itemIdCol(const std::string& val) {
    itemIdCol = val;
  }

  void __set_userRatingCol(const std::string& val) {
    userRatingCol = val;
  }

  bool operator == (const RecommenderService_configurePrefilledUserRatings_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(repoName == rhs.repoName))
      return false;
    if (!(primaryKey == rhs.primaryKey))
      return false;
    if (!(itemTable == rhs.itemTable))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(userIdCol == rhs.userIdCol))
      return false;
    if (!(itemIdCol == rhs.itemIdCol))
      return false;
    if (!(userRatingCol == rhs.userRatingCol))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_configurePrefilledUserRatings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_configurePrefilledUserRatings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_configurePrefilledUserRatings_pargs {
 public:


  virtual ~RecommenderService_configurePrefilledUserRatings_pargs() throw() {}

  const std::string* username;
  const std::string* repoName;
  const std::string* primaryKey;
  const std::string* itemTable;
  const std::string* tableName;
  const std::string* userIdCol;
  const std::string* itemIdCol;
  const std::string* userRatingCol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_configurePrefilledUserRatings_result {
 public:

  RecommenderService_configurePrefilledUserRatings_result() {
  }

  virtual ~RecommenderService_configurePrefilledUserRatings_result() throw() {}


  bool operator == (const RecommenderService_configurePrefilledUserRatings_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RecommenderService_configurePrefilledUserRatings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_configurePrefilledUserRatings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_configurePrefilledUserRatings_presult {
 public:


  virtual ~RecommenderService_configurePrefilledUserRatings_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getTables_args__isset {
  _RecommenderService_getTables_args__isset() : username(false), repo(false) {}
  bool username;
  bool repo;
} _RecommenderService_getTables_args__isset;

class RecommenderService_getTables_args {
 public:

  RecommenderService_getTables_args() : username(), repo() {
  }

  virtual ~RecommenderService_getTables_args() throw() {}

  std::string username;
  std::string repo;

  _RecommenderService_getTables_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_repo(const std::string& val) {
    repo = val;
  }

  bool operator == (const RecommenderService_getTables_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(repo == rhs.repo))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getTables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getTables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getTables_pargs {
 public:


  virtual ~RecommenderService_getTables_pargs() throw() {}

  const std::string* username;
  const std::string* repo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getTables_result__isset {
  _RecommenderService_getTables_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getTables_result__isset;

class RecommenderService_getTables_result {
 public:

  RecommenderService_getTables_result() {
  }

  virtual ~RecommenderService_getTables_result() throw() {}

  std::vector<std::string>  success;

  _RecommenderService_getTables_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_getTables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getTables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getTables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getTables_presult__isset {
  _RecommenderService_getTables_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getTables_presult__isset;

class RecommenderService_getTables_presult {
 public:


  virtual ~RecommenderService_getTables_presult() throw() {}

  std::vector<std::string> * success;

  _RecommenderService_getTables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RecommenderService_getColumns_args__isset {
  _RecommenderService_getColumns_args__isset() : username(false), repo(false), table(false) {}
  bool username;
  bool repo;
  bool table;
} _RecommenderService_getColumns_args__isset;

class RecommenderService_getColumns_args {
 public:

  RecommenderService_getColumns_args() : username(), repo(), table() {
  }

  virtual ~RecommenderService_getColumns_args() throw() {}

  std::string username;
  std::string repo;
  std::string table;

  _RecommenderService_getColumns_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_repo(const std::string& val) {
    repo = val;
  }

  void __set_table(const std::string& val) {
    table = val;
  }

  bool operator == (const RecommenderService_getColumns_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(repo == rhs.repo))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getColumns_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getColumns_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecommenderService_getColumns_pargs {
 public:


  virtual ~RecommenderService_getColumns_pargs() throw() {}

  const std::string* username;
  const std::string* repo;
  const std::string* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getColumns_result__isset {
  _RecommenderService_getColumns_result__isset() : success(false) {}
  bool success;
} _RecommenderService_getColumns_result__isset;

class RecommenderService_getColumns_result {
 public:

  RecommenderService_getColumns_result() {
  }

  virtual ~RecommenderService_getColumns_result() throw() {}

  std::vector<std::string>  success;

  _RecommenderService_getColumns_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const RecommenderService_getColumns_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecommenderService_getColumns_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecommenderService_getColumns_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecommenderService_getColumns_presult__isset {
  _RecommenderService_getColumns_presult__isset() : success(false) {}
  bool success;
} _RecommenderService_getColumns_presult__isset;

class RecommenderService_getColumns_presult {
 public:


  virtual ~RecommenderService_getColumns_presult() throw() {}

  std::vector<std::string> * success;

  _RecommenderService_getColumns_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RecommenderServiceClient : virtual public RecommenderServiceIf {
 public:
  RecommenderServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RecommenderServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createNewIndividualServer(const std::string& key);
  void send_createNewIndividualServer(const std::string& key);
  void recv_createNewIndividualServer();
  void terminateSession(const std::string& key);
  void send_terminateSession(const std::string& key);
  void recv_terminateSession();
  void makeRecommendation(std::vector<Item> & _return, const std::string& key, const int64_t userId, const int64_t numRecs, const bool isBoolean, const std::vector<std::string> & displayColumns);
  void send_makeRecommendation(const std::string& key, const int64_t userId, const int64_t numRecs, const bool isBoolean, const std::vector<std::string> & displayColumns);
  void recv_makeRecommendation(std::vector<Item> & _return);
  void makeItemBasedRecommendations(std::vector<Item> & _return, const std::string& key, const int64_t userId, const int64_t numRecs, const std::vector<std::string> & displayColumns);
  void send_makeItemBasedRecommendations(const std::string& key, const int64_t userId, const int64_t numRecs, const std::vector<std::string> & displayColumns);
  void recv_makeItemBasedRecommendations(std::vector<Item> & _return);
  void getPageItems(std::vector<Item> & _return, const std::string& key, const int64_t page, const int64_t numPerPage, const std::vector<std::string> & displayColumns);
  void send_getPageItems(const std::string& key, const int64_t page, const int64_t numPerPage, const std::vector<std::string> & displayColumns);
  void recv_getPageItems(std::vector<Item> & _return);
  int64_t getItemCount(const std::string& key);
  void send_getItemCount(const std::string& key);
  int64_t recv_getItemCount();
  void recordRatings(const std::string& key, const int64_t userId, const int64_t itemId, const int64_t rating);
  void send_recordRatings(const std::string& key, const int64_t userId, const int64_t itemId, const int64_t rating);
  void recv_recordRatings();
  void deleteRatings(const std::string& key, const int64_t userId, const int64_t itemId);
  void send_deleteRatings(const std::string& key, const int64_t userId, const int64_t itemId);
  void recv_deleteRatings();
  void createNewUser(std::string& _return, const std::string& key, const std::string& username, const bool iskibitzuser);
  void send_createNewUser(const std::string& key, const std::string& username, const bool iskibitzuser);
  void recv_createNewUser(std::string& _return);
  bool checkUsername(const std::string& key, const std::string& username, const bool iskibitzuser);
  void send_checkUsername(const std::string& key, const std::string& username, const bool iskibitzuser);
  bool recv_checkUsername();
  bool checkLogin(const std::string& key, const std::string& username, const std::string& password, const bool iskibitzuser);
  void send_checkLogin(const std::string& key, const std::string& username, const std::string& password, const bool iskibitzuser);
  bool recv_checkLogin();
  int64_t retrieveUserId(const std::string& key, const std::string& username);
  void send_retrieveUserId(const std::string& key, const std::string& username);
  int64_t recv_retrieveUserId();
  bool createNewRecommender(const std::string& username, const std::string& primaryKey, const std::string& database, const std::string& table, const std::string& title, const std::string& description, const std::string& image, const std::string& ratings_column, const std::string& clientKey);
  void send_createNewRecommender(const std::string& username, const std::string& primaryKey, const std::string& database, const std::string& table, const std::string& title, const std::string& description, const std::string& image, const std::string& ratings_column, const std::string& clientKey);
  bool recv_createNewRecommender();
  void getUserRatedItems(std::vector<Item> & _return, const std::string& key, const int64_t userId, const std::vector<std::string> & displayColumns);
  void send_getUserRatedItems(const std::string& key, const int64_t userId, const std::vector<std::string> & displayColumns);
  void recv_getUserRatedItems(std::vector<Item> & _return);
  void initiateModel(const std::string& key, const std::string& table, const std::string& username, const std::string& database);
  void send_initiateModel(const std::string& key, const std::string& table, const std::string& username, const std::string& database);
  void recv_initiateModel();
  void getSearchItems(std::vector<Item> & _return, const std::string& table, const std::string& query, const std::vector<std::string> & columnsToSearch, const std::vector<std::string> & displayColumns);
  void send_getSearchItems(const std::string& table, const std::string& query, const std::vector<std::string> & columnsToSearch, const std::vector<std::string> & displayColumns);
  void recv_getSearchItems(std::vector<Item> & _return);
  void makeOverallRatingBasedOrRandomRecommendation(std::vector<Item> & _return, const std::string& key, const std::string& ratingColumnName, const int64_t numRecs, const std::vector<std::string> & displayColumns);
  void send_makeOverallRatingBasedOrRandomRecommendation(const std::string& key, const std::string& ratingColumnName, const int64_t numRecs, const std::vector<std::string> & displayColumns);
  void recv_makeOverallRatingBasedOrRandomRecommendation(std::vector<Item> & _return);
  void addKibitzUser(const std::string& email, const std::string& password);
  void send_addKibitzUser(const std::string& email, const std::string& password);
  void recv_addKibitzUser();
  bool checkCorrectDatahubLogin(const std::string& username, const std::string& repository, const std::string& table, const std::string& primary_key, const std::string& title, const std::string& description, const std::string& image);
  void send_checkCorrectDatahubLogin(const std::string& username, const std::string& repository, const std::string& table, const std::string& primary_key, const std::string& title, const std::string& description, const std::string& image);
  bool recv_checkCorrectDatahubLogin();
  bool checkRatingsColumn(const std::string& username, const std::string& table, const std::string& repository, const std::string& ratings_column);
  void send_checkRatingsColumn(const std::string& username, const std::string& table, const std::string& repository, const std::string& ratings_column);
  bool recv_checkRatingsColumn();
  void getRecommenders(std::vector<Recommender> & _return, const std::string& username);
  void send_getRecommenders(const std::string& username);
  void recv_getRecommenders(std::vector<Recommender> & _return);
  void getProfilePicture(std::string& _return, const std::string& username);
  void send_getProfilePicture(const std::string& username);
  void recv_getProfilePicture(std::string& _return);
  void saveFBProfilePic(const std::string& username, const std::string& fbUsername);
  void send_saveFBProfilePic(const std::string& username, const std::string& fbUsername);
  void recv_saveFBProfilePic();
  void deleteRecommender(const std::string& clientKey);
  void send_deleteRecommender(const std::string& clientKey);
  void recv_deleteRecommender();
  void updateTemplate(const std::string& username, const std::string& primaryKey, const std::string& title, const std::string& description, const std::string& image, const std::string& video, const std::map<std::string, std::string> & itemTypes, const std::vector<std::string> & displayItems, const int64_t maxRatingVal, const int64_t numRecs, const std::string& recommenderName, const std::string& clientKey, const std::string& homepage, const std::string& creatorName, const std::string& repoName, const std::string& tableName, const std::string& ratingsColumn);
  void send_updateTemplate(const std::string& username, const std::string& primaryKey, const std::string& title, const std::string& description, const std::string& image, const std::string& video, const std::map<std::string, std::string> & itemTypes, const std::vector<std::string> & displayItems, const int64_t maxRatingVal, const int64_t numRecs, const std::string& recommenderName, const std::string& clientKey, const std::string& homepage, const std::string& creatorName, const std::string& repoName, const std::string& tableName, const std::string& ratingsColumn);
  void recv_updateTemplate();
  void configurePrefilledUserRatings(const std::string& username, const std::string& repoName, const std::string& primaryKey, const std::string& itemTable, const std::string& tableName, const std::string& userIdCol, const std::string& itemIdCol, const std::string& userRatingCol);
  void send_configurePrefilledUserRatings(const std::string& username, const std::string& repoName, const std::string& primaryKey, const std::string& itemTable, const std::string& tableName, const std::string& userIdCol, const std::string& itemIdCol, const std::string& userRatingCol);
  void recv_configurePrefilledUserRatings();
  void getTables(std::vector<std::string> & _return, const std::string& username, const std::string& repo);
  void send_getTables(const std::string& username, const std::string& repo);
  void recv_getTables(std::vector<std::string> & _return);
  void getColumns(std::vector<std::string> & _return, const std::string& username, const std::string& repo, const std::string& table);
  void send_getColumns(const std::string& username, const std::string& repo, const std::string& table);
  void recv_getColumns(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RecommenderServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RecommenderServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RecommenderServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createNewIndividualServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminateSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_makeRecommendation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_makeItemBasedRecommendations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPageItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItemCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recordRatings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteRatings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createNewUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkUsername(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieveUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createNewRecommender(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserRatedItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_initiateModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSearchItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_makeOverallRatingBasedOrRandomRecommendation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addKibitzUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkCorrectDatahubLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkRatingsColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRecommenders(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProfilePicture(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveFBProfilePic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteRecommender(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateTemplate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_configurePrefilledUserRatings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getColumns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RecommenderServiceProcessor(boost::shared_ptr<RecommenderServiceIf> iface) :
    iface_(iface) {
    processMap_["createNewIndividualServer"] = &RecommenderServiceProcessor::process_createNewIndividualServer;
    processMap_["terminateSession"] = &RecommenderServiceProcessor::process_terminateSession;
    processMap_["makeRecommendation"] = &RecommenderServiceProcessor::process_makeRecommendation;
    processMap_["makeItemBasedRecommendations"] = &RecommenderServiceProcessor::process_makeItemBasedRecommendations;
    processMap_["getPageItems"] = &RecommenderServiceProcessor::process_getPageItems;
    processMap_["getItemCount"] = &RecommenderServiceProcessor::process_getItemCount;
    processMap_["recordRatings"] = &RecommenderServiceProcessor::process_recordRatings;
    processMap_["deleteRatings"] = &RecommenderServiceProcessor::process_deleteRatings;
    processMap_["createNewUser"] = &RecommenderServiceProcessor::process_createNewUser;
    processMap_["checkUsername"] = &RecommenderServiceProcessor::process_checkUsername;
    processMap_["checkLogin"] = &RecommenderServiceProcessor::process_checkLogin;
    processMap_["retrieveUserId"] = &RecommenderServiceProcessor::process_retrieveUserId;
    processMap_["createNewRecommender"] = &RecommenderServiceProcessor::process_createNewRecommender;
    processMap_["getUserRatedItems"] = &RecommenderServiceProcessor::process_getUserRatedItems;
    processMap_["initiateModel"] = &RecommenderServiceProcessor::process_initiateModel;
    processMap_["getSearchItems"] = &RecommenderServiceProcessor::process_getSearchItems;
    processMap_["makeOverallRatingBasedOrRandomRecommendation"] = &RecommenderServiceProcessor::process_makeOverallRatingBasedOrRandomRecommendation;
    processMap_["addKibitzUser"] = &RecommenderServiceProcessor::process_addKibitzUser;
    processMap_["checkCorrectDatahubLogin"] = &RecommenderServiceProcessor::process_checkCorrectDatahubLogin;
    processMap_["checkRatingsColumn"] = &RecommenderServiceProcessor::process_checkRatingsColumn;
    processMap_["getRecommenders"] = &RecommenderServiceProcessor::process_getRecommenders;
    processMap_["getProfilePicture"] = &RecommenderServiceProcessor::process_getProfilePicture;
    processMap_["saveFBProfilePic"] = &RecommenderServiceProcessor::process_saveFBProfilePic;
    processMap_["deleteRecommender"] = &RecommenderServiceProcessor::process_deleteRecommender;
    processMap_["updateTemplate"] = &RecommenderServiceProcessor::process_updateTemplate;
    processMap_["configurePrefilledUserRatings"] = &RecommenderServiceProcessor::process_configurePrefilledUserRatings;
    processMap_["getTables"] = &RecommenderServiceProcessor::process_getTables;
    processMap_["getColumns"] = &RecommenderServiceProcessor::process_getColumns;
  }

  virtual ~RecommenderServiceProcessor() {}
};

class RecommenderServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RecommenderServiceProcessorFactory(const ::boost::shared_ptr< RecommenderServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RecommenderServiceIfFactory > handlerFactory_;
};

class RecommenderServiceMultiface : virtual public RecommenderServiceIf {
 public:
  RecommenderServiceMultiface(std::vector<boost::shared_ptr<RecommenderServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RecommenderServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RecommenderServiceIf> > ifaces_;
  RecommenderServiceMultiface() {}
  void add(boost::shared_ptr<RecommenderServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createNewIndividualServer(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createNewIndividualServer(key);
    }
    ifaces_[i]->createNewIndividualServer(key);
  }

  void terminateSession(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminateSession(key);
    }
    ifaces_[i]->terminateSession(key);
  }

  void makeRecommendation(std::vector<Item> & _return, const std::string& key, const int64_t userId, const int64_t numRecs, const bool isBoolean, const std::vector<std::string> & displayColumns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->makeRecommendation(_return, key, userId, numRecs, isBoolean, displayColumns);
    }
    ifaces_[i]->makeRecommendation(_return, key, userId, numRecs, isBoolean, displayColumns);
    return;
  }

  void makeItemBasedRecommendations(std::vector<Item> & _return, const std::string& key, const int64_t userId, const int64_t numRecs, const std::vector<std::string> & displayColumns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->makeItemBasedRecommendations(_return, key, userId, numRecs, displayColumns);
    }
    ifaces_[i]->makeItemBasedRecommendations(_return, key, userId, numRecs, displayColumns);
    return;
  }

  void getPageItems(std::vector<Item> & _return, const std::string& key, const int64_t page, const int64_t numPerPage, const std::vector<std::string> & displayColumns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPageItems(_return, key, page, numPerPage, displayColumns);
    }
    ifaces_[i]->getPageItems(_return, key, page, numPerPage, displayColumns);
    return;
  }

  int64_t getItemCount(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItemCount(key);
    }
    return ifaces_[i]->getItemCount(key);
  }

  void recordRatings(const std::string& key, const int64_t userId, const int64_t itemId, const int64_t rating) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recordRatings(key, userId, itemId, rating);
    }
    ifaces_[i]->recordRatings(key, userId, itemId, rating);
  }

  void deleteRatings(const std::string& key, const int64_t userId, const int64_t itemId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteRatings(key, userId, itemId);
    }
    ifaces_[i]->deleteRatings(key, userId, itemId);
  }

  void createNewUser(std::string& _return, const std::string& key, const std::string& username, const bool iskibitzuser) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createNewUser(_return, key, username, iskibitzuser);
    }
    ifaces_[i]->createNewUser(_return, key, username, iskibitzuser);
    return;
  }

  bool checkUsername(const std::string& key, const std::string& username, const bool iskibitzuser) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkUsername(key, username, iskibitzuser);
    }
    return ifaces_[i]->checkUsername(key, username, iskibitzuser);
  }

  bool checkLogin(const std::string& key, const std::string& username, const std::string& password, const bool iskibitzuser) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkLogin(key, username, password, iskibitzuser);
    }
    return ifaces_[i]->checkLogin(key, username, password, iskibitzuser);
  }

  int64_t retrieveUserId(const std::string& key, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieveUserId(key, username);
    }
    return ifaces_[i]->retrieveUserId(key, username);
  }

  bool createNewRecommender(const std::string& username, const std::string& primaryKey, const std::string& database, const std::string& table, const std::string& title, const std::string& description, const std::string& image, const std::string& ratings_column, const std::string& clientKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey);
    }
    return ifaces_[i]->createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey);
  }

  void getUserRatedItems(std::vector<Item> & _return, const std::string& key, const int64_t userId, const std::vector<std::string> & displayColumns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserRatedItems(_return, key, userId, displayColumns);
    }
    ifaces_[i]->getUserRatedItems(_return, key, userId, displayColumns);
    return;
  }

  void initiateModel(const std::string& key, const std::string& table, const std::string& username, const std::string& database) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initiateModel(key, table, username, database);
    }
    ifaces_[i]->initiateModel(key, table, username, database);
  }

  void getSearchItems(std::vector<Item> & _return, const std::string& table, const std::string& query, const std::vector<std::string> & columnsToSearch, const std::vector<std::string> & displayColumns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSearchItems(_return, table, query, columnsToSearch, displayColumns);
    }
    ifaces_[i]->getSearchItems(_return, table, query, columnsToSearch, displayColumns);
    return;
  }

  void makeOverallRatingBasedOrRandomRecommendation(std::vector<Item> & _return, const std::string& key, const std::string& ratingColumnName, const int64_t numRecs, const std::vector<std::string> & displayColumns) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->makeOverallRatingBasedOrRandomRecommendation(_return, key, ratingColumnName, numRecs, displayColumns);
    }
    ifaces_[i]->makeOverallRatingBasedOrRandomRecommendation(_return, key, ratingColumnName, numRecs, displayColumns);
    return;
  }

  void addKibitzUser(const std::string& email, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addKibitzUser(email, password);
    }
    ifaces_[i]->addKibitzUser(email, password);
  }

  bool checkCorrectDatahubLogin(const std::string& username, const std::string& repository, const std::string& table, const std::string& primary_key, const std::string& title, const std::string& description, const std::string& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image);
    }
    return ifaces_[i]->checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image);
  }

  bool checkRatingsColumn(const std::string& username, const std::string& table, const std::string& repository, const std::string& ratings_column) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkRatingsColumn(username, table, repository, ratings_column);
    }
    return ifaces_[i]->checkRatingsColumn(username, table, repository, ratings_column);
  }

  void getRecommenders(std::vector<Recommender> & _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRecommenders(_return, username);
    }
    ifaces_[i]->getRecommenders(_return, username);
    return;
  }

  void getProfilePicture(std::string& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProfilePicture(_return, username);
    }
    ifaces_[i]->getProfilePicture(_return, username);
    return;
  }

  void saveFBProfilePic(const std::string& username, const std::string& fbUsername) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveFBProfilePic(username, fbUsername);
    }
    ifaces_[i]->saveFBProfilePic(username, fbUsername);
  }

  void deleteRecommender(const std::string& clientKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteRecommender(clientKey);
    }
    ifaces_[i]->deleteRecommender(clientKey);
  }

  void updateTemplate(const std::string& username, const std::string& primaryKey, const std::string& title, const std::string& description, const std::string& image, const std::string& video, const std::map<std::string, std::string> & itemTypes, const std::vector<std::string> & displayItems, const int64_t maxRatingVal, const int64_t numRecs, const std::string& recommenderName, const std::string& clientKey, const std::string& homepage, const std::string& creatorName, const std::string& repoName, const std::string& tableName, const std::string& ratingsColumn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn);
    }
    ifaces_[i]->updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn);
  }

  void configurePrefilledUserRatings(const std::string& username, const std::string& repoName, const std::string& primaryKey, const std::string& itemTable, const std::string& tableName, const std::string& userIdCol, const std::string& itemIdCol, const std::string& userRatingCol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol);
    }
    ifaces_[i]->configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol);
  }

  void getTables(std::vector<std::string> & _return, const std::string& username, const std::string& repo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTables(_return, username, repo);
    }
    ifaces_[i]->getTables(_return, username, repo);
    return;
  }

  void getColumns(std::vector<std::string> & _return, const std::string& username, const std::string& repo, const std::string& table) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getColumns(_return, username, repo, table);
    }
    ifaces_[i]->getColumns(_return, username, repo, table);
    return;
  }

};

} // namespace

#endif
