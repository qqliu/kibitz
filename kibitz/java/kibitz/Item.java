/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kibitz;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-23")
public class Item implements org.apache.thrift.TBase<Item, Item._Fields>, java.io.Serializable, Cloneable, Comparable<Item> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Item");

  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField KIBITZ_GENERATED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("kibitz_generated_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PREDICTED_PREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("predictedPreferences", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ItemTupleSchemeFactory());
  }

  public Map<String,String> attributes; // required
  public long kibitz_generated_id; // required
  public int confidence; // required
  public double predictedPreferences; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTRIBUTES((short)1, "attributes"),
    KIBITZ_GENERATED_ID((short)2, "kibitz_generated_id"),
    CONFIDENCE((short)3, "confidence"),
    PREDICTED_PREFERENCES((short)4, "predictedPreferences");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTRIBUTES
          return ATTRIBUTES;
        case 2: // KIBITZ_GENERATED_ID
          return KIBITZ_GENERATED_ID;
        case 3: // CONFIDENCE
          return CONFIDENCE;
        case 4: // PREDICTED_PREFERENCES
          return PREDICTED_PREFERENCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KIBITZ_GENERATED_ID_ISSET_ID = 0;
  private static final int __CONFIDENCE_ISSET_ID = 1;
  private static final int __PREDICTEDPREFERENCES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KIBITZ_GENERATED_ID, new org.apache.thrift.meta_data.FieldMetaData("kibitz_generated_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PREDICTED_PREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("predictedPreferences", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Item.class, metaDataMap);
  }

  public Item() {
  }

  public Item(
    Map<String,String> attributes,
    long kibitz_generated_id,
    int confidence,
    double predictedPreferences)
  {
    this();
    this.attributes = attributes;
    this.kibitz_generated_id = kibitz_generated_id;
    setKibitz_generated_idIsSet(true);
    this.confidence = confidence;
    setConfidenceIsSet(true);
    this.predictedPreferences = predictedPreferences;
    setPredictedPreferencesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Item(Item other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAttributes()) {
      Map<String,String> __this__attributes = new HashMap<String,String>(other.attributes);
      this.attributes = __this__attributes;
    }
    this.kibitz_generated_id = other.kibitz_generated_id;
    this.confidence = other.confidence;
    this.predictedPreferences = other.predictedPreferences;
  }

  public Item deepCopy() {
    return new Item(this);
  }

  @Override
  public void clear() {
    this.attributes = null;
    setKibitz_generated_idIsSet(false);
    this.kibitz_generated_id = 0;
    setConfidenceIsSet(false);
    this.confidence = 0;
    setPredictedPreferencesIsSet(false);
    this.predictedPreferences = 0.0;
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public void putToAttributes(String key, String val) {
    if (this.attributes == null) {
      this.attributes = new HashMap<String,String>();
    }
    this.attributes.put(key, val);
  }

  public Map<String,String> getAttributes() {
    return this.attributes;
  }

  public Item setAttributes(Map<String,String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public long getKibitz_generated_id() {
    return this.kibitz_generated_id;
  }

  public Item setKibitz_generated_id(long kibitz_generated_id) {
    this.kibitz_generated_id = kibitz_generated_id;
    setKibitz_generated_idIsSet(true);
    return this;
  }

  public void unsetKibitz_generated_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KIBITZ_GENERATED_ID_ISSET_ID);
  }

  /** Returns true if field kibitz_generated_id is set (has been assigned a value) and false otherwise */
  public boolean isSetKibitz_generated_id() {
    return EncodingUtils.testBit(__isset_bitfield, __KIBITZ_GENERATED_ID_ISSET_ID);
  }

  public void setKibitz_generated_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KIBITZ_GENERATED_ID_ISSET_ID, value);
  }

  public int getConfidence() {
    return this.confidence;
  }

  public Item setConfidence(int confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  public double getPredictedPreferences() {
    return this.predictedPreferences;
  }

  public Item setPredictedPreferences(double predictedPreferences) {
    this.predictedPreferences = predictedPreferences;
    setPredictedPreferencesIsSet(true);
    return this;
  }

  public void unsetPredictedPreferences() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREDICTEDPREFERENCES_ISSET_ID);
  }

  /** Returns true if field predictedPreferences is set (has been assigned a value) and false otherwise */
  public boolean isSetPredictedPreferences() {
    return EncodingUtils.testBit(__isset_bitfield, __PREDICTEDPREFERENCES_ISSET_ID);
  }

  public void setPredictedPreferencesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREDICTEDPREFERENCES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((Map<String,String>)value);
      }
      break;

    case KIBITZ_GENERATED_ID:
      if (value == null) {
        unsetKibitz_generated_id();
      } else {
        setKibitz_generated_id((Long)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Integer)value);
      }
      break;

    case PREDICTED_PREFERENCES:
      if (value == null) {
        unsetPredictedPreferences();
      } else {
        setPredictedPreferences((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTRIBUTES:
      return getAttributes();

    case KIBITZ_GENERATED_ID:
      return Long.valueOf(getKibitz_generated_id());

    case CONFIDENCE:
      return Integer.valueOf(getConfidence());

    case PREDICTED_PREFERENCES:
      return Double.valueOf(getPredictedPreferences());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ATTRIBUTES:
      return isSetAttributes();
    case KIBITZ_GENERATED_ID:
      return isSetKibitz_generated_id();
    case CONFIDENCE:
      return isSetConfidence();
    case PREDICTED_PREFERENCES:
      return isSetPredictedPreferences();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Item)
      return this.equals((Item)that);
    return false;
  }

  public boolean equals(Item that) {
    if (that == null)
      return false;

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    boolean this_present_kibitz_generated_id = true;
    boolean that_present_kibitz_generated_id = true;
    if (this_present_kibitz_generated_id || that_present_kibitz_generated_id) {
      if (!(this_present_kibitz_generated_id && that_present_kibitz_generated_id))
        return false;
      if (this.kibitz_generated_id != that.kibitz_generated_id)
        return false;
    }

    boolean this_present_confidence = true;
    boolean that_present_confidence = true;
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_predictedPreferences = true;
    boolean that_present_predictedPreferences = true;
    if (this_present_predictedPreferences || that_present_predictedPreferences) {
      if (!(this_present_predictedPreferences && that_present_predictedPreferences))
        return false;
      if (this.predictedPreferences != that.predictedPreferences)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    boolean present_kibitz_generated_id = true;
    list.add(present_kibitz_generated_id);
    if (present_kibitz_generated_id)
      list.add(kibitz_generated_id);

    boolean present_confidence = true;
    list.add(present_confidence);
    if (present_confidence)
      list.add(confidence);

    boolean present_predictedPreferences = true;
    list.add(present_predictedPreferences);
    if (present_predictedPreferences)
      list.add(predictedPreferences);

    return list.hashCode();
  }

  @Override
  public int compareTo(Item other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKibitz_generated_id()).compareTo(other.isSetKibitz_generated_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKibitz_generated_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kibitz_generated_id, other.kibitz_generated_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredictedPreferences()).compareTo(other.isSetPredictedPreferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredictedPreferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictedPreferences, other.predictedPreferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Item(");
    boolean first = true;

    sb.append("attributes:");
    if (this.attributes == null) {
      sb.append("null");
    } else {
      sb.append(this.attributes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kibitz_generated_id:");
    sb.append(this.kibitz_generated_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confidence:");
    sb.append(this.confidence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("predictedPreferences:");
    sb.append(this.predictedPreferences);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (attributes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'attributes' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'kibitz_generated_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'confidence' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'predictedPreferences' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ItemStandardSchemeFactory implements SchemeFactory {
    public ItemStandardScheme getScheme() {
      return new ItemStandardScheme();
    }
  }

  private static class ItemStandardScheme extends StandardScheme<Item> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Item struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.attributes = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.attributes.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KIBITZ_GENERATED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kibitz_generated_id = iprot.readI64();
              struct.setKibitz_generated_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.confidence = iprot.readI32();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREDICTED_PREFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.predictedPreferences = iprot.readDouble();
              struct.setPredictedPreferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetKibitz_generated_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'kibitz_generated_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConfidence()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'confidence' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPredictedPreferences()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'predictedPreferences' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Item struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.attributes.size()));
          for (Map.Entry<String, String> _iter4 : struct.attributes.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KIBITZ_GENERATED_ID_FIELD_DESC);
      oprot.writeI64(struct.kibitz_generated_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
      oprot.writeI32(struct.confidence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREDICTED_PREFERENCES_FIELD_DESC);
      oprot.writeDouble(struct.predictedPreferences);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ItemTupleSchemeFactory implements SchemeFactory {
    public ItemTupleScheme getScheme() {
      return new ItemTupleScheme();
    }
  }

  private static class ItemTupleScheme extends TupleScheme<Item> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Item struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.attributes.size());
        for (Map.Entry<String, String> _iter5 : struct.attributes.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          oprot.writeString(_iter5.getValue());
        }
      }
      oprot.writeI64(struct.kibitz_generated_id);
      oprot.writeI32(struct.confidence);
      oprot.writeDouble(struct.predictedPreferences);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Item struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.attributes = new HashMap<String,String>(2*_map6.size);
        String _key7;
        String _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = iprot.readString();
          _val8 = iprot.readString();
          struct.attributes.put(_key7, _val8);
        }
      }
      struct.setAttributesIsSet(true);
      struct.kibitz_generated_id = iprot.readI64();
      struct.setKibitz_generated_idIsSet(true);
      struct.confidence = iprot.readI32();
      struct.setConfidenceIsSet(true);
      struct.predictedPreferences = iprot.readDouble();
      struct.setPredictedPreferencesIsSet(true);
    }
  }

}

