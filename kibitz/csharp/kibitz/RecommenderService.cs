/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace kibitz
{
  public partial class RecommenderService {
    public interface Iface {
      void createNewIndividualServer(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_createNewIndividualServer(AsyncCallback callback, object state, string key);
      void End_createNewIndividualServer(IAsyncResult asyncResult);
      #endif
      void terminateSession(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_terminateSession(AsyncCallback callback, object state, string key);
      void End_terminateSession(IAsyncResult asyncResult);
      #endif
      List<Item> makeRecommendation(string key, long userId, long numRecs, bool isBoolean, List<string> displayColumns);
      #if SILVERLIGHT
      IAsyncResult Begin_makeRecommendation(AsyncCallback callback, object state, string key, long userId, long numRecs, bool isBoolean, List<string> displayColumns);
      List<Item> End_makeRecommendation(IAsyncResult asyncResult);
      #endif
      List<Item> makeItemBasedRecommendations(string key, long userId, long numRecs, List<string> displayColumns);
      #if SILVERLIGHT
      IAsyncResult Begin_makeItemBasedRecommendations(AsyncCallback callback, object state, string key, long userId, long numRecs, List<string> displayColumns);
      List<Item> End_makeItemBasedRecommendations(IAsyncResult asyncResult);
      #endif
      List<Item> getPageItems(string key, long page, long numPerPage, List<string> displayColumns);
      #if SILVERLIGHT
      IAsyncResult Begin_getPageItems(AsyncCallback callback, object state, string key, long page, long numPerPage, List<string> displayColumns);
      List<Item> End_getPageItems(IAsyncResult asyncResult);
      #endif
      long getItemCount(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_getItemCount(AsyncCallback callback, object state, string key);
      long End_getItemCount(IAsyncResult asyncResult);
      #endif
      void recordRatings(string key, long userId, long itemId, long rating);
      #if SILVERLIGHT
      IAsyncResult Begin_recordRatings(AsyncCallback callback, object state, string key, long userId, long itemId, long rating);
      void End_recordRatings(IAsyncResult asyncResult);
      #endif
      void deleteRatings(string key, long userId, long itemId);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteRatings(AsyncCallback callback, object state, string key, long userId, long itemId);
      void End_deleteRatings(IAsyncResult asyncResult);
      #endif
      string createNewUser(string key, string username, bool iskibitzuser);
      #if SILVERLIGHT
      IAsyncResult Begin_createNewUser(AsyncCallback callback, object state, string key, string username, bool iskibitzuser);
      string End_createNewUser(IAsyncResult asyncResult);
      #endif
      bool checkUsername(string key, string username, bool iskibitzuser);
      #if SILVERLIGHT
      IAsyncResult Begin_checkUsername(AsyncCallback callback, object state, string key, string username, bool iskibitzuser);
      bool End_checkUsername(IAsyncResult asyncResult);
      #endif
      bool checkLogin(string key, string username, string password, bool iskibitzuser);
      #if SILVERLIGHT
      IAsyncResult Begin_checkLogin(AsyncCallback callback, object state, string key, string username, string password, bool iskibitzuser);
      bool End_checkLogin(IAsyncResult asyncResult);
      #endif
      long retrieveUserId(string key, string username);
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveUserId(AsyncCallback callback, object state, string key, string username);
      long End_retrieveUserId(IAsyncResult asyncResult);
      #endif
      bool createNewRecommender(string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey);
      #if SILVERLIGHT
      IAsyncResult Begin_createNewRecommender(AsyncCallback callback, object state, string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey);
      bool End_createNewRecommender(IAsyncResult asyncResult);
      #endif
      List<Item> getUserRatedItems(string key, long userId, List<string> displayColumns);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserRatedItems(AsyncCallback callback, object state, string key, long userId, List<string> displayColumns);
      List<Item> End_getUserRatedItems(IAsyncResult asyncResult);
      #endif
      void initiateModel(string key, string table, string username, string database);
      #if SILVERLIGHT
      IAsyncResult Begin_initiateModel(AsyncCallback callback, object state, string key, string table, string username, string database);
      void End_initiateModel(IAsyncResult asyncResult);
      #endif
      List<Item> getSearchItems(string table, string query, List<string> columnsToSearch, List<string> displayColumns);
      #if SILVERLIGHT
      IAsyncResult Begin_getSearchItems(AsyncCallback callback, object state, string table, string query, List<string> columnsToSearch, List<string> displayColumns);
      List<Item> End_getSearchItems(IAsyncResult asyncResult);
      #endif
      List<Item> makeOverallRatingBasedOrRandomRecommendation(string key, string ratingColumnName, long numRecs, List<string> displayColumns);
      #if SILVERLIGHT
      IAsyncResult Begin_makeOverallRatingBasedOrRandomRecommendation(AsyncCallback callback, object state, string key, string ratingColumnName, long numRecs, List<string> displayColumns);
      List<Item> End_makeOverallRatingBasedOrRandomRecommendation(IAsyncResult asyncResult);
      #endif
      void addKibitzUser(string email, string password);
      #if SILVERLIGHT
      IAsyncResult Begin_addKibitzUser(AsyncCallback callback, object state, string email, string password);
      void End_addKibitzUser(IAsyncResult asyncResult);
      #endif
      bool checkCorrectDatahubLogin(string username, string repository, string table, string primary_key, string title, string description, string image);
      #if SILVERLIGHT
      IAsyncResult Begin_checkCorrectDatahubLogin(AsyncCallback callback, object state, string username, string repository, string table, string primary_key, string title, string description, string image);
      bool End_checkCorrectDatahubLogin(IAsyncResult asyncResult);
      #endif
      bool checkRatingsColumn(string username, string table, string repository, string ratings_column);
      #if SILVERLIGHT
      IAsyncResult Begin_checkRatingsColumn(AsyncCallback callback, object state, string username, string table, string repository, string ratings_column);
      bool End_checkRatingsColumn(IAsyncResult asyncResult);
      #endif
      List<Recommender> getRecommenders(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_getRecommenders(AsyncCallback callback, object state, string username);
      List<Recommender> End_getRecommenders(IAsyncResult asyncResult);
      #endif
      string getProfilePicture(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_getProfilePicture(AsyncCallback callback, object state, string username);
      string End_getProfilePicture(IAsyncResult asyncResult);
      #endif
      void saveFBProfilePic(string username, string fbUsername);
      #if SILVERLIGHT
      IAsyncResult Begin_saveFBProfilePic(AsyncCallback callback, object state, string username, string fbUsername);
      void End_saveFBProfilePic(IAsyncResult asyncResult);
      #endif
      void deleteRecommender(string clientKey);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteRecommender(AsyncCallback callback, object state, string clientKey);
      void End_deleteRecommender(IAsyncResult asyncResult);
      #endif
      void updateTemplate(string username, string primaryKey, string title, string description, string image, string video, Dictionary<string, string> itemTypes, List<string> displayItems, long maxRatingVal, long numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn);
      #if SILVERLIGHT
      IAsyncResult Begin_updateTemplate(AsyncCallback callback, object state, string username, string primaryKey, string title, string description, string image, string video, Dictionary<string, string> itemTypes, List<string> displayItems, long maxRatingVal, long numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn);
      void End_updateTemplate(IAsyncResult asyncResult);
      #endif
      void configurePrefilledUserRatings(string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol);
      #if SILVERLIGHT
      IAsyncResult Begin_configurePrefilledUserRatings(AsyncCallback callback, object state, string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol);
      void End_configurePrefilledUserRatings(IAsyncResult asyncResult);
      #endif
      List<string> getTables(string username, string repo);
      #if SILVERLIGHT
      IAsyncResult Begin_getTables(AsyncCallback callback, object state, string username, string repo);
      List<string> End_getTables(IAsyncResult asyncResult);
      #endif
      List<string> getColumns(string username, string repo, string table);
      #if SILVERLIGHT
      IAsyncResult Begin_getColumns(AsyncCallback callback, object state, string username, string repo, string table);
      List<string> End_getColumns(IAsyncResult asyncResult);
      #endif
      string getFirstRepo(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_getFirstRepo(AsyncCallback callback, object state, string username);
      string End_getFirstRepo(IAsyncResult asyncResult);
      #endif
      long getNumRepos(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_getNumRepos(AsyncCallback callback, object state, string username);
      long End_getNumRepos(IAsyncResult asyncResult);
      #endif
      List<string> getAllRepos(string username);
      #if SILVERLIGHT
      IAsyncResult Begin_getAllRepos(AsyncCallback callback, object state, string username);
      List<string> End_getAllRepos(IAsyncResult asyncResult);
      #endif
      void saveCSSData(string path, string data);
      #if SILVERLIGHT
      IAsyncResult Begin_saveCSSData(AsyncCallback callback, object state, string path, string data);
      void End_saveCSSData(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createNewIndividualServer(AsyncCallback callback, object state, string key)
      {
        return send_createNewIndividualServer(callback, state, key);
      }

      public void End_createNewIndividualServer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_createNewIndividualServer();
      }

      #endif

      public void createNewIndividualServer(string key)
      {
        #if !SILVERLIGHT
        send_createNewIndividualServer(key);
        recv_createNewIndividualServer();

        #else
        var asyncResult = Begin_createNewIndividualServer(null, null, key);
        End_createNewIndividualServer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createNewIndividualServer(AsyncCallback callback, object state, string key)
      #else
      public void send_createNewIndividualServer(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createNewIndividualServer", TMessageType.Call, seqid_));
        createNewIndividualServer_args args = new createNewIndividualServer_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_createNewIndividualServer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createNewIndividualServer_result result = new createNewIndividualServer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_terminateSession(AsyncCallback callback, object state, string key)
      {
        return send_terminateSession(callback, state, key);
      }

      public void End_terminateSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_terminateSession();
      }

      #endif

      public void terminateSession(string key)
      {
        #if !SILVERLIGHT
        send_terminateSession(key);
        recv_terminateSession();

        #else
        var asyncResult = Begin_terminateSession(null, null, key);
        End_terminateSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_terminateSession(AsyncCallback callback, object state, string key)
      #else
      public void send_terminateSession(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("terminateSession", TMessageType.Call, seqid_));
        terminateSession_args args = new terminateSession_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_terminateSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        terminateSession_result result = new terminateSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_makeRecommendation(AsyncCallback callback, object state, string key, long userId, long numRecs, bool isBoolean, List<string> displayColumns)
      {
        return send_makeRecommendation(callback, state, key, userId, numRecs, isBoolean, displayColumns);
      }

      public List<Item> End_makeRecommendation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_makeRecommendation();
      }

      #endif

      public List<Item> makeRecommendation(string key, long userId, long numRecs, bool isBoolean, List<string> displayColumns)
      {
        #if !SILVERLIGHT
        send_makeRecommendation(key, userId, numRecs, isBoolean, displayColumns);
        return recv_makeRecommendation();

        #else
        var asyncResult = Begin_makeRecommendation(null, null, key, userId, numRecs, isBoolean, displayColumns);
        return End_makeRecommendation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_makeRecommendation(AsyncCallback callback, object state, string key, long userId, long numRecs, bool isBoolean, List<string> displayColumns)
      #else
      public void send_makeRecommendation(string key, long userId, long numRecs, bool isBoolean, List<string> displayColumns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("makeRecommendation", TMessageType.Call, seqid_));
        makeRecommendation_args args = new makeRecommendation_args();
        args.Key = key;
        args.UserId = userId;
        args.NumRecs = numRecs;
        args.IsBoolean = isBoolean;
        args.DisplayColumns = displayColumns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Item> recv_makeRecommendation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        makeRecommendation_result result = new makeRecommendation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "makeRecommendation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_makeItemBasedRecommendations(AsyncCallback callback, object state, string key, long userId, long numRecs, List<string> displayColumns)
      {
        return send_makeItemBasedRecommendations(callback, state, key, userId, numRecs, displayColumns);
      }

      public List<Item> End_makeItemBasedRecommendations(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_makeItemBasedRecommendations();
      }

      #endif

      public List<Item> makeItemBasedRecommendations(string key, long userId, long numRecs, List<string> displayColumns)
      {
        #if !SILVERLIGHT
        send_makeItemBasedRecommendations(key, userId, numRecs, displayColumns);
        return recv_makeItemBasedRecommendations();

        #else
        var asyncResult = Begin_makeItemBasedRecommendations(null, null, key, userId, numRecs, displayColumns);
        return End_makeItemBasedRecommendations(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_makeItemBasedRecommendations(AsyncCallback callback, object state, string key, long userId, long numRecs, List<string> displayColumns)
      #else
      public void send_makeItemBasedRecommendations(string key, long userId, long numRecs, List<string> displayColumns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("makeItemBasedRecommendations", TMessageType.Call, seqid_));
        makeItemBasedRecommendations_args args = new makeItemBasedRecommendations_args();
        args.Key = key;
        args.UserId = userId;
        args.NumRecs = numRecs;
        args.DisplayColumns = displayColumns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Item> recv_makeItemBasedRecommendations()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "makeItemBasedRecommendations failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPageItems(AsyncCallback callback, object state, string key, long page, long numPerPage, List<string> displayColumns)
      {
        return send_getPageItems(callback, state, key, page, numPerPage, displayColumns);
      }

      public List<Item> End_getPageItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPageItems();
      }

      #endif

      public List<Item> getPageItems(string key, long page, long numPerPage, List<string> displayColumns)
      {
        #if !SILVERLIGHT
        send_getPageItems(key, page, numPerPage, displayColumns);
        return recv_getPageItems();

        #else
        var asyncResult = Begin_getPageItems(null, null, key, page, numPerPage, displayColumns);
        return End_getPageItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPageItems(AsyncCallback callback, object state, string key, long page, long numPerPage, List<string> displayColumns)
      #else
      public void send_getPageItems(string key, long page, long numPerPage, List<string> displayColumns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPageItems", TMessageType.Call, seqid_));
        getPageItems_args args = new getPageItems_args();
        args.Key = key;
        args.Page = page;
        args.NumPerPage = numPerPage;
        args.DisplayColumns = displayColumns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Item> recv_getPageItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPageItems_result result = new getPageItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPageItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getItemCount(AsyncCallback callback, object state, string key)
      {
        return send_getItemCount(callback, state, key);
      }

      public long End_getItemCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getItemCount();
      }

      #endif

      public long getItemCount(string key)
      {
        #if !SILVERLIGHT
        send_getItemCount(key);
        return recv_getItemCount();

        #else
        var asyncResult = Begin_getItemCount(null, null, key);
        return End_getItemCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getItemCount(AsyncCallback callback, object state, string key)
      #else
      public void send_getItemCount(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getItemCount", TMessageType.Call, seqid_));
        getItemCount_args args = new getItemCount_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getItemCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getItemCount_result result = new getItemCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getItemCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_recordRatings(AsyncCallback callback, object state, string key, long userId, long itemId, long rating)
      {
        return send_recordRatings(callback, state, key, userId, itemId, rating);
      }

      public void End_recordRatings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_recordRatings();
      }

      #endif

      public void recordRatings(string key, long userId, long itemId, long rating)
      {
        #if !SILVERLIGHT
        send_recordRatings(key, userId, itemId, rating);
        recv_recordRatings();

        #else
        var asyncResult = Begin_recordRatings(null, null, key, userId, itemId, rating);
        End_recordRatings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_recordRatings(AsyncCallback callback, object state, string key, long userId, long itemId, long rating)
      #else
      public void send_recordRatings(string key, long userId, long itemId, long rating)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("recordRatings", TMessageType.Call, seqid_));
        recordRatings_args args = new recordRatings_args();
        args.Key = key;
        args.UserId = userId;
        args.ItemId = itemId;
        args.Rating = rating;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_recordRatings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        recordRatings_result result = new recordRatings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteRatings(AsyncCallback callback, object state, string key, long userId, long itemId)
      {
        return send_deleteRatings(callback, state, key, userId, itemId);
      }

      public void End_deleteRatings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteRatings();
      }

      #endif

      public void deleteRatings(string key, long userId, long itemId)
      {
        #if !SILVERLIGHT
        send_deleteRatings(key, userId, itemId);
        recv_deleteRatings();

        #else
        var asyncResult = Begin_deleteRatings(null, null, key, userId, itemId);
        End_deleteRatings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteRatings(AsyncCallback callback, object state, string key, long userId, long itemId)
      #else
      public void send_deleteRatings(string key, long userId, long itemId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteRatings", TMessageType.Call, seqid_));
        deleteRatings_args args = new deleteRatings_args();
        args.Key = key;
        args.UserId = userId;
        args.ItemId = itemId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteRatings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteRatings_result result = new deleteRatings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createNewUser(AsyncCallback callback, object state, string key, string username, bool iskibitzuser)
      {
        return send_createNewUser(callback, state, key, username, iskibitzuser);
      }

      public string End_createNewUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createNewUser();
      }

      #endif

      public string createNewUser(string key, string username, bool iskibitzuser)
      {
        #if !SILVERLIGHT
        send_createNewUser(key, username, iskibitzuser);
        return recv_createNewUser();

        #else
        var asyncResult = Begin_createNewUser(null, null, key, username, iskibitzuser);
        return End_createNewUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createNewUser(AsyncCallback callback, object state, string key, string username, bool iskibitzuser)
      #else
      public void send_createNewUser(string key, string username, bool iskibitzuser)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createNewUser", TMessageType.Call, seqid_));
        createNewUser_args args = new createNewUser_args();
        args.Key = key;
        args.Username = username;
        args.Iskibitzuser = iskibitzuser;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createNewUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createNewUser_result result = new createNewUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNewUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkUsername(AsyncCallback callback, object state, string key, string username, bool iskibitzuser)
      {
        return send_checkUsername(callback, state, key, username, iskibitzuser);
      }

      public bool End_checkUsername(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkUsername();
      }

      #endif

      public bool checkUsername(string key, string username, bool iskibitzuser)
      {
        #if !SILVERLIGHT
        send_checkUsername(key, username, iskibitzuser);
        return recv_checkUsername();

        #else
        var asyncResult = Begin_checkUsername(null, null, key, username, iskibitzuser);
        return End_checkUsername(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkUsername(AsyncCallback callback, object state, string key, string username, bool iskibitzuser)
      #else
      public void send_checkUsername(string key, string username, bool iskibitzuser)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkUsername", TMessageType.Call, seqid_));
        checkUsername_args args = new checkUsername_args();
        args.Key = key;
        args.Username = username;
        args.Iskibitzuser = iskibitzuser;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_checkUsername()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkUsername_result result = new checkUsername_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkUsername failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkLogin(AsyncCallback callback, object state, string key, string username, string password, bool iskibitzuser)
      {
        return send_checkLogin(callback, state, key, username, password, iskibitzuser);
      }

      public bool End_checkLogin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkLogin();
      }

      #endif

      public bool checkLogin(string key, string username, string password, bool iskibitzuser)
      {
        #if !SILVERLIGHT
        send_checkLogin(key, username, password, iskibitzuser);
        return recv_checkLogin();

        #else
        var asyncResult = Begin_checkLogin(null, null, key, username, password, iskibitzuser);
        return End_checkLogin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkLogin(AsyncCallback callback, object state, string key, string username, string password, bool iskibitzuser)
      #else
      public void send_checkLogin(string key, string username, string password, bool iskibitzuser)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkLogin", TMessageType.Call, seqid_));
        checkLogin_args args = new checkLogin_args();
        args.Key = key;
        args.Username = username;
        args.Password = password;
        args.Iskibitzuser = iskibitzuser;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_checkLogin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkLogin_result result = new checkLogin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkLogin failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveUserId(AsyncCallback callback, object state, string key, string username)
      {
        return send_retrieveUserId(callback, state, key, username);
      }

      public long End_retrieveUserId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveUserId();
      }

      #endif

      public long retrieveUserId(string key, string username)
      {
        #if !SILVERLIGHT
        send_retrieveUserId(key, username);
        return recv_retrieveUserId();

        #else
        var asyncResult = Begin_retrieveUserId(null, null, key, username);
        return End_retrieveUserId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveUserId(AsyncCallback callback, object state, string key, string username)
      #else
      public void send_retrieveUserId(string key, string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveUserId", TMessageType.Call, seqid_));
        retrieveUserId_args args = new retrieveUserId_args();
        args.Key = key;
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_retrieveUserId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveUserId_result result = new retrieveUserId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveUserId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createNewRecommender(AsyncCallback callback, object state, string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey)
      {
        return send_createNewRecommender(callback, state, username, primaryKey, database, table, title, description, image, ratings_column, clientKey);
      }

      public bool End_createNewRecommender(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createNewRecommender();
      }

      #endif

      public bool createNewRecommender(string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey)
      {
        #if !SILVERLIGHT
        send_createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey);
        return recv_createNewRecommender();

        #else
        var asyncResult = Begin_createNewRecommender(null, null, username, primaryKey, database, table, title, description, image, ratings_column, clientKey);
        return End_createNewRecommender(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createNewRecommender(AsyncCallback callback, object state, string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey)
      #else
      public void send_createNewRecommender(string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createNewRecommender", TMessageType.Call, seqid_));
        createNewRecommender_args args = new createNewRecommender_args();
        args.Username = username;
        args.PrimaryKey = primaryKey;
        args.Database = database;
        args.Table = table;
        args.Title = title;
        args.Description = description;
        args.Image = image;
        args.Ratings_column = ratings_column;
        args.ClientKey = clientKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_createNewRecommender()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createNewRecommender_result result = new createNewRecommender_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNewRecommender failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserRatedItems(AsyncCallback callback, object state, string key, long userId, List<string> displayColumns)
      {
        return send_getUserRatedItems(callback, state, key, userId, displayColumns);
      }

      public List<Item> End_getUserRatedItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserRatedItems();
      }

      #endif

      public List<Item> getUserRatedItems(string key, long userId, List<string> displayColumns)
      {
        #if !SILVERLIGHT
        send_getUserRatedItems(key, userId, displayColumns);
        return recv_getUserRatedItems();

        #else
        var asyncResult = Begin_getUserRatedItems(null, null, key, userId, displayColumns);
        return End_getUserRatedItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserRatedItems(AsyncCallback callback, object state, string key, long userId, List<string> displayColumns)
      #else
      public void send_getUserRatedItems(string key, long userId, List<string> displayColumns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserRatedItems", TMessageType.Call, seqid_));
        getUserRatedItems_args args = new getUserRatedItems_args();
        args.Key = key;
        args.UserId = userId;
        args.DisplayColumns = displayColumns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Item> recv_getUserRatedItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserRatedItems_result result = new getUserRatedItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserRatedItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_initiateModel(AsyncCallback callback, object state, string key, string table, string username, string database)
      {
        return send_initiateModel(callback, state, key, table, username, database);
      }

      public void End_initiateModel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_initiateModel();
      }

      #endif

      public void initiateModel(string key, string table, string username, string database)
      {
        #if !SILVERLIGHT
        send_initiateModel(key, table, username, database);
        recv_initiateModel();

        #else
        var asyncResult = Begin_initiateModel(null, null, key, table, username, database);
        End_initiateModel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_initiateModel(AsyncCallback callback, object state, string key, string table, string username, string database)
      #else
      public void send_initiateModel(string key, string table, string username, string database)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("initiateModel", TMessageType.Call, seqid_));
        initiateModel_args args = new initiateModel_args();
        args.Key = key;
        args.Table = table;
        args.Username = username;
        args.Database = database;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_initiateModel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        initiateModel_result result = new initiateModel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSearchItems(AsyncCallback callback, object state, string table, string query, List<string> columnsToSearch, List<string> displayColumns)
      {
        return send_getSearchItems(callback, state, table, query, columnsToSearch, displayColumns);
      }

      public List<Item> End_getSearchItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSearchItems();
      }

      #endif

      public List<Item> getSearchItems(string table, string query, List<string> columnsToSearch, List<string> displayColumns)
      {
        #if !SILVERLIGHT
        send_getSearchItems(table, query, columnsToSearch, displayColumns);
        return recv_getSearchItems();

        #else
        var asyncResult = Begin_getSearchItems(null, null, table, query, columnsToSearch, displayColumns);
        return End_getSearchItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSearchItems(AsyncCallback callback, object state, string table, string query, List<string> columnsToSearch, List<string> displayColumns)
      #else
      public void send_getSearchItems(string table, string query, List<string> columnsToSearch, List<string> displayColumns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSearchItems", TMessageType.Call, seqid_));
        getSearchItems_args args = new getSearchItems_args();
        args.Table = table;
        args.Query = query;
        args.ColumnsToSearch = columnsToSearch;
        args.DisplayColumns = displayColumns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Item> recv_getSearchItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSearchItems_result result = new getSearchItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSearchItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_makeOverallRatingBasedOrRandomRecommendation(AsyncCallback callback, object state, string key, string ratingColumnName, long numRecs, List<string> displayColumns)
      {
        return send_makeOverallRatingBasedOrRandomRecommendation(callback, state, key, ratingColumnName, numRecs, displayColumns);
      }

      public List<Item> End_makeOverallRatingBasedOrRandomRecommendation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_makeOverallRatingBasedOrRandomRecommendation();
      }

      #endif

      public List<Item> makeOverallRatingBasedOrRandomRecommendation(string key, string ratingColumnName, long numRecs, List<string> displayColumns)
      {
        #if !SILVERLIGHT
        send_makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns);
        return recv_makeOverallRatingBasedOrRandomRecommendation();

        #else
        var asyncResult = Begin_makeOverallRatingBasedOrRandomRecommendation(null, null, key, ratingColumnName, numRecs, displayColumns);
        return End_makeOverallRatingBasedOrRandomRecommendation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_makeOverallRatingBasedOrRandomRecommendation(AsyncCallback callback, object state, string key, string ratingColumnName, long numRecs, List<string> displayColumns)
      #else
      public void send_makeOverallRatingBasedOrRandomRecommendation(string key, string ratingColumnName, long numRecs, List<string> displayColumns)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("makeOverallRatingBasedOrRandomRecommendation", TMessageType.Call, seqid_));
        makeOverallRatingBasedOrRandomRecommendation_args args = new makeOverallRatingBasedOrRandomRecommendation_args();
        args.Key = key;
        args.RatingColumnName = ratingColumnName;
        args.NumRecs = numRecs;
        args.DisplayColumns = displayColumns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Item> recv_makeOverallRatingBasedOrRandomRecommendation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "makeOverallRatingBasedOrRandomRecommendation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addKibitzUser(AsyncCallback callback, object state, string email, string password)
      {
        return send_addKibitzUser(callback, state, email, password);
      }

      public void End_addKibitzUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addKibitzUser();
      }

      #endif

      public void addKibitzUser(string email, string password)
      {
        #if !SILVERLIGHT
        send_addKibitzUser(email, password);
        recv_addKibitzUser();

        #else
        var asyncResult = Begin_addKibitzUser(null, null, email, password);
        End_addKibitzUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addKibitzUser(AsyncCallback callback, object state, string email, string password)
      #else
      public void send_addKibitzUser(string email, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addKibitzUser", TMessageType.Call, seqid_));
        addKibitzUser_args args = new addKibitzUser_args();
        args.Email = email;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addKibitzUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addKibitzUser_result result = new addKibitzUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkCorrectDatahubLogin(AsyncCallback callback, object state, string username, string repository, string table, string primary_key, string title, string description, string image)
      {
        return send_checkCorrectDatahubLogin(callback, state, username, repository, table, primary_key, title, description, image);
      }

      public bool End_checkCorrectDatahubLogin(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkCorrectDatahubLogin();
      }

      #endif

      public bool checkCorrectDatahubLogin(string username, string repository, string table, string primary_key, string title, string description, string image)
      {
        #if !SILVERLIGHT
        send_checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image);
        return recv_checkCorrectDatahubLogin();

        #else
        var asyncResult = Begin_checkCorrectDatahubLogin(null, null, username, repository, table, primary_key, title, description, image);
        return End_checkCorrectDatahubLogin(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkCorrectDatahubLogin(AsyncCallback callback, object state, string username, string repository, string table, string primary_key, string title, string description, string image)
      #else
      public void send_checkCorrectDatahubLogin(string username, string repository, string table, string primary_key, string title, string description, string image)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkCorrectDatahubLogin", TMessageType.Call, seqid_));
        checkCorrectDatahubLogin_args args = new checkCorrectDatahubLogin_args();
        args.Username = username;
        args.Repository = repository;
        args.Table = table;
        args.Primary_key = primary_key;
        args.Title = title;
        args.Description = description;
        args.Image = image;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_checkCorrectDatahubLogin()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkCorrectDatahubLogin failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkRatingsColumn(AsyncCallback callback, object state, string username, string table, string repository, string ratings_column)
      {
        return send_checkRatingsColumn(callback, state, username, table, repository, ratings_column);
      }

      public bool End_checkRatingsColumn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkRatingsColumn();
      }

      #endif

      public bool checkRatingsColumn(string username, string table, string repository, string ratings_column)
      {
        #if !SILVERLIGHT
        send_checkRatingsColumn(username, table, repository, ratings_column);
        return recv_checkRatingsColumn();

        #else
        var asyncResult = Begin_checkRatingsColumn(null, null, username, table, repository, ratings_column);
        return End_checkRatingsColumn(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkRatingsColumn(AsyncCallback callback, object state, string username, string table, string repository, string ratings_column)
      #else
      public void send_checkRatingsColumn(string username, string table, string repository, string ratings_column)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkRatingsColumn", TMessageType.Call, seqid_));
        checkRatingsColumn_args args = new checkRatingsColumn_args();
        args.Username = username;
        args.Table = table;
        args.Repository = repository;
        args.Ratings_column = ratings_column;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_checkRatingsColumn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkRatingsColumn_result result = new checkRatingsColumn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkRatingsColumn failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRecommenders(AsyncCallback callback, object state, string username)
      {
        return send_getRecommenders(callback, state, username);
      }

      public List<Recommender> End_getRecommenders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRecommenders();
      }

      #endif

      public List<Recommender> getRecommenders(string username)
      {
        #if !SILVERLIGHT
        send_getRecommenders(username);
        return recv_getRecommenders();

        #else
        var asyncResult = Begin_getRecommenders(null, null, username);
        return End_getRecommenders(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRecommenders(AsyncCallback callback, object state, string username)
      #else
      public void send_getRecommenders(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRecommenders", TMessageType.Call, seqid_));
        getRecommenders_args args = new getRecommenders_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Recommender> recv_getRecommenders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRecommenders_result result = new getRecommenders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRecommenders failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProfilePicture(AsyncCallback callback, object state, string username)
      {
        return send_getProfilePicture(callback, state, username);
      }

      public string End_getProfilePicture(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProfilePicture();
      }

      #endif

      public string getProfilePicture(string username)
      {
        #if !SILVERLIGHT
        send_getProfilePicture(username);
        return recv_getProfilePicture();

        #else
        var asyncResult = Begin_getProfilePicture(null, null, username);
        return End_getProfilePicture(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProfilePicture(AsyncCallback callback, object state, string username)
      #else
      public void send_getProfilePicture(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProfilePicture", TMessageType.Call, seqid_));
        getProfilePicture_args args = new getProfilePicture_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getProfilePicture()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProfilePicture_result result = new getProfilePicture_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProfilePicture failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveFBProfilePic(AsyncCallback callback, object state, string username, string fbUsername)
      {
        return send_saveFBProfilePic(callback, state, username, fbUsername);
      }

      public void End_saveFBProfilePic(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveFBProfilePic();
      }

      #endif

      public void saveFBProfilePic(string username, string fbUsername)
      {
        #if !SILVERLIGHT
        send_saveFBProfilePic(username, fbUsername);
        recv_saveFBProfilePic();

        #else
        var asyncResult = Begin_saveFBProfilePic(null, null, username, fbUsername);
        End_saveFBProfilePic(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveFBProfilePic(AsyncCallback callback, object state, string username, string fbUsername)
      #else
      public void send_saveFBProfilePic(string username, string fbUsername)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveFBProfilePic", TMessageType.Call, seqid_));
        saveFBProfilePic_args args = new saveFBProfilePic_args();
        args.Username = username;
        args.FbUsername = fbUsername;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveFBProfilePic()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveFBProfilePic_result result = new saveFBProfilePic_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteRecommender(AsyncCallback callback, object state, string clientKey)
      {
        return send_deleteRecommender(callback, state, clientKey);
      }

      public void End_deleteRecommender(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteRecommender();
      }

      #endif

      public void deleteRecommender(string clientKey)
      {
        #if !SILVERLIGHT
        send_deleteRecommender(clientKey);
        recv_deleteRecommender();

        #else
        var asyncResult = Begin_deleteRecommender(null, null, clientKey);
        End_deleteRecommender(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteRecommender(AsyncCallback callback, object state, string clientKey)
      #else
      public void send_deleteRecommender(string clientKey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteRecommender", TMessageType.Call, seqid_));
        deleteRecommender_args args = new deleteRecommender_args();
        args.ClientKey = clientKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteRecommender()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteRecommender_result result = new deleteRecommender_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateTemplate(AsyncCallback callback, object state, string username, string primaryKey, string title, string description, string image, string video, Dictionary<string, string> itemTypes, List<string> displayItems, long maxRatingVal, long numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn)
      {
        return send_updateTemplate(callback, state, username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn);
      }

      public void End_updateTemplate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateTemplate();
      }

      #endif

      public void updateTemplate(string username, string primaryKey, string title, string description, string image, string video, Dictionary<string, string> itemTypes, List<string> displayItems, long maxRatingVal, long numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn)
      {
        #if !SILVERLIGHT
        send_updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn);
        recv_updateTemplate();

        #else
        var asyncResult = Begin_updateTemplate(null, null, username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn);
        End_updateTemplate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateTemplate(AsyncCallback callback, object state, string username, string primaryKey, string title, string description, string image, string video, Dictionary<string, string> itemTypes, List<string> displayItems, long maxRatingVal, long numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn)
      #else
      public void send_updateTemplate(string username, string primaryKey, string title, string description, string image, string video, Dictionary<string, string> itemTypes, List<string> displayItems, long maxRatingVal, long numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateTemplate", TMessageType.Call, seqid_));
        updateTemplate_args args = new updateTemplate_args();
        args.Username = username;
        args.PrimaryKey = primaryKey;
        args.Title = title;
        args.Description = description;
        args.Image = image;
        args.Video = video;
        args.ItemTypes = itemTypes;
        args.DisplayItems = displayItems;
        args.MaxRatingVal = maxRatingVal;
        args.NumRecs = numRecs;
        args.RecommenderName = recommenderName;
        args.ClientKey = clientKey;
        args.Homepage = homepage;
        args.CreatorName = creatorName;
        args.RepoName = repoName;
        args.TableName = tableName;
        args.RatingsColumn = ratingsColumn;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateTemplate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateTemplate_result result = new updateTemplate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_configurePrefilledUserRatings(AsyncCallback callback, object state, string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol)
      {
        return send_configurePrefilledUserRatings(callback, state, username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol);
      }

      public void End_configurePrefilledUserRatings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_configurePrefilledUserRatings();
      }

      #endif

      public void configurePrefilledUserRatings(string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol)
      {
        #if !SILVERLIGHT
        send_configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol);
        recv_configurePrefilledUserRatings();

        #else
        var asyncResult = Begin_configurePrefilledUserRatings(null, null, username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol);
        End_configurePrefilledUserRatings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_configurePrefilledUserRatings(AsyncCallback callback, object state, string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol)
      #else
      public void send_configurePrefilledUserRatings(string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("configurePrefilledUserRatings", TMessageType.Call, seqid_));
        configurePrefilledUserRatings_args args = new configurePrefilledUserRatings_args();
        args.Username = username;
        args.RepoName = repoName;
        args.PrimaryKey = primaryKey;
        args.ItemTable = itemTable;
        args.TableName = tableName;
        args.UserIdCol = userIdCol;
        args.ItemIdCol = itemIdCol;
        args.UserRatingCol = userRatingCol;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_configurePrefilledUserRatings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTables(AsyncCallback callback, object state, string username, string repo)
      {
        return send_getTables(callback, state, username, repo);
      }

      public List<string> End_getTables(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTables();
      }

      #endif

      public List<string> getTables(string username, string repo)
      {
        #if !SILVERLIGHT
        send_getTables(username, repo);
        return recv_getTables();

        #else
        var asyncResult = Begin_getTables(null, null, username, repo);
        return End_getTables(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTables(AsyncCallback callback, object state, string username, string repo)
      #else
      public void send_getTables(string username, string repo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTables", TMessageType.Call, seqid_));
        getTables_args args = new getTables_args();
        args.Username = username;
        args.Repo = repo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getTables()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTables_result result = new getTables_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTables failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getColumns(AsyncCallback callback, object state, string username, string repo, string table)
      {
        return send_getColumns(callback, state, username, repo, table);
      }

      public List<string> End_getColumns(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getColumns();
      }

      #endif

      public List<string> getColumns(string username, string repo, string table)
      {
        #if !SILVERLIGHT
        send_getColumns(username, repo, table);
        return recv_getColumns();

        #else
        var asyncResult = Begin_getColumns(null, null, username, repo, table);
        return End_getColumns(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getColumns(AsyncCallback callback, object state, string username, string repo, string table)
      #else
      public void send_getColumns(string username, string repo, string table)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getColumns", TMessageType.Call, seqid_));
        getColumns_args args = new getColumns_args();
        args.Username = username;
        args.Repo = repo;
        args.Table = table;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getColumns()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getColumns_result result = new getColumns_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getColumns failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFirstRepo(AsyncCallback callback, object state, string username)
      {
        return send_getFirstRepo(callback, state, username);
      }

      public string End_getFirstRepo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFirstRepo();
      }

      #endif

      public string getFirstRepo(string username)
      {
        #if !SILVERLIGHT
        send_getFirstRepo(username);
        return recv_getFirstRepo();

        #else
        var asyncResult = Begin_getFirstRepo(null, null, username);
        return End_getFirstRepo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFirstRepo(AsyncCallback callback, object state, string username)
      #else
      public void send_getFirstRepo(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFirstRepo", TMessageType.Call, seqid_));
        getFirstRepo_args args = new getFirstRepo_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getFirstRepo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFirstRepo_result result = new getFirstRepo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFirstRepo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNumRepos(AsyncCallback callback, object state, string username)
      {
        return send_getNumRepos(callback, state, username);
      }

      public long End_getNumRepos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNumRepos();
      }

      #endif

      public long getNumRepos(string username)
      {
        #if !SILVERLIGHT
        send_getNumRepos(username);
        return recv_getNumRepos();

        #else
        var asyncResult = Begin_getNumRepos(null, null, username);
        return End_getNumRepos(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNumRepos(AsyncCallback callback, object state, string username)
      #else
      public void send_getNumRepos(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNumRepos", TMessageType.Call, seqid_));
        getNumRepos_args args = new getNumRepos_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getNumRepos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNumRepos_result result = new getNumRepos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNumRepos failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllRepos(AsyncCallback callback, object state, string username)
      {
        return send_getAllRepos(callback, state, username);
      }

      public List<string> End_getAllRepos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllRepos();
      }

      #endif

      public List<string> getAllRepos(string username)
      {
        #if !SILVERLIGHT
        send_getAllRepos(username);
        return recv_getAllRepos();

        #else
        var asyncResult = Begin_getAllRepos(null, null, username);
        return End_getAllRepos(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllRepos(AsyncCallback callback, object state, string username)
      #else
      public void send_getAllRepos(string username)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllRepos", TMessageType.Call, seqid_));
        getAllRepos_args args = new getAllRepos_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getAllRepos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllRepos_result result = new getAllRepos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllRepos failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveCSSData(AsyncCallback callback, object state, string path, string data)
      {
        return send_saveCSSData(callback, state, path, data);
      }

      public void End_saveCSSData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveCSSData();
      }

      #endif

      public void saveCSSData(string path, string data)
      {
        #if !SILVERLIGHT
        send_saveCSSData(path, data);
        recv_saveCSSData();

        #else
        var asyncResult = Begin_saveCSSData(null, null, path, data);
        End_saveCSSData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveCSSData(AsyncCallback callback, object state, string path, string data)
      #else
      public void send_saveCSSData(string path, string data)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveCSSData", TMessageType.Call, seqid_));
        saveCSSData_args args = new saveCSSData_args();
        args.Path = path;
        args.Data = data;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveCSSData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveCSSData_result result = new saveCSSData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createNewIndividualServer"] = createNewIndividualServer_Process;
        processMap_["terminateSession"] = terminateSession_Process;
        processMap_["makeRecommendation"] = makeRecommendation_Process;
        processMap_["makeItemBasedRecommendations"] = makeItemBasedRecommendations_Process;
        processMap_["getPageItems"] = getPageItems_Process;
        processMap_["getItemCount"] = getItemCount_Process;
        processMap_["recordRatings"] = recordRatings_Process;
        processMap_["deleteRatings"] = deleteRatings_Process;
        processMap_["createNewUser"] = createNewUser_Process;
        processMap_["checkUsername"] = checkUsername_Process;
        processMap_["checkLogin"] = checkLogin_Process;
        processMap_["retrieveUserId"] = retrieveUserId_Process;
        processMap_["createNewRecommender"] = createNewRecommender_Process;
        processMap_["getUserRatedItems"] = getUserRatedItems_Process;
        processMap_["initiateModel"] = initiateModel_Process;
        processMap_["getSearchItems"] = getSearchItems_Process;
        processMap_["makeOverallRatingBasedOrRandomRecommendation"] = makeOverallRatingBasedOrRandomRecommendation_Process;
        processMap_["addKibitzUser"] = addKibitzUser_Process;
        processMap_["checkCorrectDatahubLogin"] = checkCorrectDatahubLogin_Process;
        processMap_["checkRatingsColumn"] = checkRatingsColumn_Process;
        processMap_["getRecommenders"] = getRecommenders_Process;
        processMap_["getProfilePicture"] = getProfilePicture_Process;
        processMap_["saveFBProfilePic"] = saveFBProfilePic_Process;
        processMap_["deleteRecommender"] = deleteRecommender_Process;
        processMap_["updateTemplate"] = updateTemplate_Process;
        processMap_["configurePrefilledUserRatings"] = configurePrefilledUserRatings_Process;
        processMap_["getTables"] = getTables_Process;
        processMap_["getColumns"] = getColumns_Process;
        processMap_["getFirstRepo"] = getFirstRepo_Process;
        processMap_["getNumRepos"] = getNumRepos_Process;
        processMap_["getAllRepos"] = getAllRepos_Process;
        processMap_["saveCSSData"] = saveCSSData_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createNewIndividualServer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createNewIndividualServer_args args = new createNewIndividualServer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createNewIndividualServer_result result = new createNewIndividualServer_result();
        iface_.createNewIndividualServer(args.Key);
        oprot.WriteMessageBegin(new TMessage("createNewIndividualServer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void terminateSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        terminateSession_args args = new terminateSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        terminateSession_result result = new terminateSession_result();
        iface_.terminateSession(args.Key);
        oprot.WriteMessageBegin(new TMessage("terminateSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void makeRecommendation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        makeRecommendation_args args = new makeRecommendation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        makeRecommendation_result result = new makeRecommendation_result();
        result.Success = iface_.makeRecommendation(args.Key, args.UserId, args.NumRecs, args.IsBoolean, args.DisplayColumns);
        oprot.WriteMessageBegin(new TMessage("makeRecommendation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void makeItemBasedRecommendations_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        makeItemBasedRecommendations_args args = new makeItemBasedRecommendations_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
        result.Success = iface_.makeItemBasedRecommendations(args.Key, args.UserId, args.NumRecs, args.DisplayColumns);
        oprot.WriteMessageBegin(new TMessage("makeItemBasedRecommendations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPageItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPageItems_args args = new getPageItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPageItems_result result = new getPageItems_result();
        result.Success = iface_.getPageItems(args.Key, args.Page, args.NumPerPage, args.DisplayColumns);
        oprot.WriteMessageBegin(new TMessage("getPageItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getItemCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getItemCount_args args = new getItemCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getItemCount_result result = new getItemCount_result();
        result.Success = iface_.getItemCount(args.Key);
        oprot.WriteMessageBegin(new TMessage("getItemCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void recordRatings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        recordRatings_args args = new recordRatings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        recordRatings_result result = new recordRatings_result();
        iface_.recordRatings(args.Key, args.UserId, args.ItemId, args.Rating);
        oprot.WriteMessageBegin(new TMessage("recordRatings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteRatings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteRatings_args args = new deleteRatings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteRatings_result result = new deleteRatings_result();
        iface_.deleteRatings(args.Key, args.UserId, args.ItemId);
        oprot.WriteMessageBegin(new TMessage("deleteRatings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createNewUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createNewUser_args args = new createNewUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createNewUser_result result = new createNewUser_result();
        result.Success = iface_.createNewUser(args.Key, args.Username, args.Iskibitzuser);
        oprot.WriteMessageBegin(new TMessage("createNewUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkUsername_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkUsername_args args = new checkUsername_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkUsername_result result = new checkUsername_result();
        result.Success = iface_.checkUsername(args.Key, args.Username, args.Iskibitzuser);
        oprot.WriteMessageBegin(new TMessage("checkUsername", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkLogin_args args = new checkLogin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkLogin_result result = new checkLogin_result();
        result.Success = iface_.checkLogin(args.Key, args.Username, args.Password, args.Iskibitzuser);
        oprot.WriteMessageBegin(new TMessage("checkLogin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveUserId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveUserId_args args = new retrieveUserId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveUserId_result result = new retrieveUserId_result();
        result.Success = iface_.retrieveUserId(args.Key, args.Username);
        oprot.WriteMessageBegin(new TMessage("retrieveUserId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createNewRecommender_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createNewRecommender_args args = new createNewRecommender_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createNewRecommender_result result = new createNewRecommender_result();
        result.Success = iface_.createNewRecommender(args.Username, args.PrimaryKey, args.Database, args.Table, args.Title, args.Description, args.Image, args.Ratings_column, args.ClientKey);
        oprot.WriteMessageBegin(new TMessage("createNewRecommender", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserRatedItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserRatedItems_args args = new getUserRatedItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserRatedItems_result result = new getUserRatedItems_result();
        result.Success = iface_.getUserRatedItems(args.Key, args.UserId, args.DisplayColumns);
        oprot.WriteMessageBegin(new TMessage("getUserRatedItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void initiateModel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        initiateModel_args args = new initiateModel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        initiateModel_result result = new initiateModel_result();
        iface_.initiateModel(args.Key, args.Table, args.Username, args.Database);
        oprot.WriteMessageBegin(new TMessage("initiateModel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSearchItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSearchItems_args args = new getSearchItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSearchItems_result result = new getSearchItems_result();
        result.Success = iface_.getSearchItems(args.Table, args.Query, args.ColumnsToSearch, args.DisplayColumns);
        oprot.WriteMessageBegin(new TMessage("getSearchItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void makeOverallRatingBasedOrRandomRecommendation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        makeOverallRatingBasedOrRandomRecommendation_args args = new makeOverallRatingBasedOrRandomRecommendation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
        result.Success = iface_.makeOverallRatingBasedOrRandomRecommendation(args.Key, args.RatingColumnName, args.NumRecs, args.DisplayColumns);
        oprot.WriteMessageBegin(new TMessage("makeOverallRatingBasedOrRandomRecommendation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addKibitzUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addKibitzUser_args args = new addKibitzUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addKibitzUser_result result = new addKibitzUser_result();
        iface_.addKibitzUser(args.Email, args.Password);
        oprot.WriteMessageBegin(new TMessage("addKibitzUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkCorrectDatahubLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkCorrectDatahubLogin_args args = new checkCorrectDatahubLogin_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
        result.Success = iface_.checkCorrectDatahubLogin(args.Username, args.Repository, args.Table, args.Primary_key, args.Title, args.Description, args.Image);
        oprot.WriteMessageBegin(new TMessage("checkCorrectDatahubLogin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkRatingsColumn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkRatingsColumn_args args = new checkRatingsColumn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkRatingsColumn_result result = new checkRatingsColumn_result();
        result.Success = iface_.checkRatingsColumn(args.Username, args.Table, args.Repository, args.Ratings_column);
        oprot.WriteMessageBegin(new TMessage("checkRatingsColumn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRecommenders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRecommenders_args args = new getRecommenders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRecommenders_result result = new getRecommenders_result();
        result.Success = iface_.getRecommenders(args.Username);
        oprot.WriteMessageBegin(new TMessage("getRecommenders", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProfilePicture_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProfilePicture_args args = new getProfilePicture_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProfilePicture_result result = new getProfilePicture_result();
        result.Success = iface_.getProfilePicture(args.Username);
        oprot.WriteMessageBegin(new TMessage("getProfilePicture", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveFBProfilePic_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveFBProfilePic_args args = new saveFBProfilePic_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveFBProfilePic_result result = new saveFBProfilePic_result();
        iface_.saveFBProfilePic(args.Username, args.FbUsername);
        oprot.WriteMessageBegin(new TMessage("saveFBProfilePic", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteRecommender_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteRecommender_args args = new deleteRecommender_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteRecommender_result result = new deleteRecommender_result();
        iface_.deleteRecommender(args.ClientKey);
        oprot.WriteMessageBegin(new TMessage("deleteRecommender", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateTemplate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateTemplate_args args = new updateTemplate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateTemplate_result result = new updateTemplate_result();
        iface_.updateTemplate(args.Username, args.PrimaryKey, args.Title, args.Description, args.Image, args.Video, args.ItemTypes, args.DisplayItems, args.MaxRatingVal, args.NumRecs, args.RecommenderName, args.ClientKey, args.Homepage, args.CreatorName, args.RepoName, args.TableName, args.RatingsColumn);
        oprot.WriteMessageBegin(new TMessage("updateTemplate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void configurePrefilledUserRatings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        configurePrefilledUserRatings_args args = new configurePrefilledUserRatings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
        iface_.configurePrefilledUserRatings(args.Username, args.RepoName, args.PrimaryKey, args.ItemTable, args.TableName, args.UserIdCol, args.ItemIdCol, args.UserRatingCol);
        oprot.WriteMessageBegin(new TMessage("configurePrefilledUserRatings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTables_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTables_args args = new getTables_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTables_result result = new getTables_result();
        result.Success = iface_.getTables(args.Username, args.Repo);
        oprot.WriteMessageBegin(new TMessage("getTables", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getColumns_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getColumns_args args = new getColumns_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getColumns_result result = new getColumns_result();
        result.Success = iface_.getColumns(args.Username, args.Repo, args.Table);
        oprot.WriteMessageBegin(new TMessage("getColumns", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFirstRepo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFirstRepo_args args = new getFirstRepo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFirstRepo_result result = new getFirstRepo_result();
        result.Success = iface_.getFirstRepo(args.Username);
        oprot.WriteMessageBegin(new TMessage("getFirstRepo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNumRepos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNumRepos_args args = new getNumRepos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNumRepos_result result = new getNumRepos_result();
        result.Success = iface_.getNumRepos(args.Username);
        oprot.WriteMessageBegin(new TMessage("getNumRepos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllRepos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllRepos_args args = new getAllRepos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllRepos_result result = new getAllRepos_result();
        result.Success = iface_.getAllRepos(args.Username);
        oprot.WriteMessageBegin(new TMessage("getAllRepos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveCSSData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveCSSData_args args = new saveCSSData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveCSSData_result result = new saveCSSData_result();
        iface_.saveCSSData(args.Path, args.Data);
        oprot.WriteMessageBegin(new TMessage("saveCSSData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewIndividualServer_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public createNewIndividualServer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewIndividualServer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewIndividualServer_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewIndividualServer_result : TBase
    {

      public createNewIndividualServer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewIndividualServer_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewIndividualServer_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class terminateSession_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public terminateSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("terminateSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("terminateSession_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class terminateSession_result : TBase
    {

      public terminateSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("terminateSession_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("terminateSession_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeRecommendation_args : TBase
    {
      private string _key;
      private long _userId;
      private long _numRecs;
      private bool _isBoolean;
      private List<string> _displayColumns;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public long UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public long NumRecs
      {
        get
        {
          return _numRecs;
        }
        set
        {
          __isset.numRecs = true;
          this._numRecs = value;
        }
      }

      public bool IsBoolean
      {
        get
        {
          return _isBoolean;
        }
        set
        {
          __isset.isBoolean = true;
          this._isBoolean = value;
        }
      }

      public List<string> DisplayColumns
      {
        get
        {
          return _displayColumns;
        }
        set
        {
          __isset.displayColumns = true;
          this._displayColumns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool userId;
        public bool numRecs;
        public bool isBoolean;
        public bool displayColumns;
      }

      public makeRecommendation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                NumRecs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsBoolean = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  DisplayColumns = new List<string>();
                  TList _list14 = iprot.ReadListBegin();
                  for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                  {
                    string _elem16;
                    _elem16 = iprot.ReadString();
                    DisplayColumns.Add(_elem16);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeRecommendation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.numRecs) {
          field.Name = "numRecs";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(NumRecs);
          oprot.WriteFieldEnd();
        }
        if (__isset.isBoolean) {
          field.Name = "isBoolean";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsBoolean);
          oprot.WriteFieldEnd();
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          field.Name = "displayColumns";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DisplayColumns.Count));
            foreach (string _iter17 in DisplayColumns)
            {
              oprot.WriteString(_iter17);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeRecommendation_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.numRecs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumRecs: ");
          __sb.Append(NumRecs);
        }
        if (__isset.isBoolean) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IsBoolean: ");
          __sb.Append(IsBoolean);
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DisplayColumns: ");
          __sb.Append(DisplayColumns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeRecommendation_result : TBase
    {
      private List<Item> _success;

      public List<Item> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public makeRecommendation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Item>();
                  TList _list18 = iprot.ReadListBegin();
                  for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                  {
                    Item _elem20;
                    _elem20 = new Item();
                    _elem20.Read(iprot);
                    Success.Add(_elem20);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeRecommendation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Item _iter21 in Success)
              {
                _iter21.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeRecommendation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeItemBasedRecommendations_args : TBase
    {
      private string _key;
      private long _userId;
      private long _numRecs;
      private List<string> _displayColumns;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public long UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public long NumRecs
      {
        get
        {
          return _numRecs;
        }
        set
        {
          __isset.numRecs = true;
          this._numRecs = value;
        }
      }

      public List<string> DisplayColumns
      {
        get
        {
          return _displayColumns;
        }
        set
        {
          __isset.displayColumns = true;
          this._displayColumns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool userId;
        public bool numRecs;
        public bool displayColumns;
      }

      public makeItemBasedRecommendations_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                NumRecs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  DisplayColumns = new List<string>();
                  TList _list22 = iprot.ReadListBegin();
                  for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                  {
                    string _elem24;
                    _elem24 = iprot.ReadString();
                    DisplayColumns.Add(_elem24);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeItemBasedRecommendations_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.numRecs) {
          field.Name = "numRecs";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(NumRecs);
          oprot.WriteFieldEnd();
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          field.Name = "displayColumns";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DisplayColumns.Count));
            foreach (string _iter25 in DisplayColumns)
            {
              oprot.WriteString(_iter25);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeItemBasedRecommendations_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.numRecs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumRecs: ");
          __sb.Append(NumRecs);
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DisplayColumns: ");
          __sb.Append(DisplayColumns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeItemBasedRecommendations_result : TBase
    {
      private List<Item> _success;

      public List<Item> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public makeItemBasedRecommendations_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Item>();
                  TList _list26 = iprot.ReadListBegin();
                  for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    Item _elem28;
                    _elem28 = new Item();
                    _elem28.Read(iprot);
                    Success.Add(_elem28);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeItemBasedRecommendations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Item _iter29 in Success)
              {
                _iter29.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeItemBasedRecommendations_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPageItems_args : TBase
    {
      private string _key;
      private long _page;
      private long _numPerPage;
      private List<string> _displayColumns;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public long Page
      {
        get
        {
          return _page;
        }
        set
        {
          __isset.page = true;
          this._page = value;
        }
      }

      public long NumPerPage
      {
        get
        {
          return _numPerPage;
        }
        set
        {
          __isset.numPerPage = true;
          this._numPerPage = value;
        }
      }

      public List<string> DisplayColumns
      {
        get
        {
          return _displayColumns;
        }
        set
        {
          __isset.displayColumns = true;
          this._displayColumns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool page;
        public bool numPerPage;
        public bool displayColumns;
      }

      public getPageItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Page = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                NumPerPage = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  DisplayColumns = new List<string>();
                  TList _list30 = iprot.ReadListBegin();
                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                  {
                    string _elem32;
                    _elem32 = iprot.ReadString();
                    DisplayColumns.Add(_elem32);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPageItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.page) {
          field.Name = "page";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Page);
          oprot.WriteFieldEnd();
        }
        if (__isset.numPerPage) {
          field.Name = "numPerPage";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(NumPerPage);
          oprot.WriteFieldEnd();
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          field.Name = "displayColumns";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DisplayColumns.Count));
            foreach (string _iter33 in DisplayColumns)
            {
              oprot.WriteString(_iter33);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPageItems_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (__isset.page) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Page: ");
          __sb.Append(Page);
        }
        if (__isset.numPerPage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumPerPage: ");
          __sb.Append(NumPerPage);
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DisplayColumns: ");
          __sb.Append(DisplayColumns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPageItems_result : TBase
    {
      private List<Item> _success;

      public List<Item> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getPageItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Item>();
                  TList _list34 = iprot.ReadListBegin();
                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)
                  {
                    Item _elem36;
                    _elem36 = new Item();
                    _elem36.Read(iprot);
                    Success.Add(_elem36);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPageItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Item _iter37 in Success)
              {
                _iter37.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getPageItems_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getItemCount_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public getItemCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getItemCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getItemCount_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getItemCount_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getItemCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getItemCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getItemCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recordRatings_args : TBase
    {
      private string _key;
      private long _userId;
      private long _itemId;
      private long _rating;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public long UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public long ItemId
      {
        get
        {
          return _itemId;
        }
        set
        {
          __isset.itemId = true;
          this._itemId = value;
        }
      }

      public long Rating
      {
        get
        {
          return _rating;
        }
        set
        {
          __isset.rating = true;
          this._rating = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool userId;
        public bool itemId;
        public bool rating;
      }

      public recordRatings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ItemId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Rating = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recordRatings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.itemId) {
          field.Name = "itemId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ItemId);
          oprot.WriteFieldEnd();
        }
        if (__isset.rating) {
          field.Name = "rating";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Rating);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("recordRatings_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.itemId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ItemId: ");
          __sb.Append(ItemId);
        }
        if (__isset.rating) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rating: ");
          __sb.Append(Rating);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class recordRatings_result : TBase
    {

      public recordRatings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("recordRatings_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("recordRatings_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteRatings_args : TBase
    {
      private string _key;
      private long _userId;
      private long _itemId;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public long UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public long ItemId
      {
        get
        {
          return _itemId;
        }
        set
        {
          __isset.itemId = true;
          this._itemId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool userId;
        public bool itemId;
      }

      public deleteRatings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ItemId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteRatings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.itemId) {
          field.Name = "itemId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ItemId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteRatings_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (__isset.itemId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ItemId: ");
          __sb.Append(ItemId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteRatings_result : TBase
    {

      public deleteRatings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteRatings_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteRatings_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewUser_args : TBase
    {
      private string _key;
      private string _username;
      private bool _iskibitzuser;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public bool Iskibitzuser
      {
        get
        {
          return _iskibitzuser;
        }
        set
        {
          __isset.iskibitzuser = true;
          this._iskibitzuser = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool username;
        public bool iskibitzuser;
      }

      public createNewUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Iskibitzuser = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (__isset.iskibitzuser) {
          field.Name = "iskibitzuser";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Iskibitzuser);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewUser_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (__isset.iskibitzuser) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Iskibitzuser: ");
          __sb.Append(Iskibitzuser);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewUser_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createNewUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkUsername_args : TBase
    {
      private string _key;
      private string _username;
      private bool _iskibitzuser;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public bool Iskibitzuser
      {
        get
        {
          return _iskibitzuser;
        }
        set
        {
          __isset.iskibitzuser = true;
          this._iskibitzuser = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool username;
        public bool iskibitzuser;
      }

      public checkUsername_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Iskibitzuser = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkUsername_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (__isset.iskibitzuser) {
          field.Name = "iskibitzuser";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Iskibitzuser);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkUsername_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (__isset.iskibitzuser) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Iskibitzuser: ");
          __sb.Append(Iskibitzuser);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkUsername_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public checkUsername_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkUsername_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkUsername_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkLogin_args : TBase
    {
      private string _key;
      private string _username;
      private string _password;
      private bool _iskibitzuser;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public bool Iskibitzuser
      {
        get
        {
          return _iskibitzuser;
        }
        set
        {
          __isset.iskibitzuser = true;
          this._iskibitzuser = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool username;
        public bool password;
        public bool iskibitzuser;
      }

      public checkLogin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Iskibitzuser = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkLogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (__isset.iskibitzuser) {
          field.Name = "iskibitzuser";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Iskibitzuser);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkLogin_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.iskibitzuser) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Iskibitzuser: ");
          __sb.Append(Iskibitzuser);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkLogin_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public checkLogin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkLogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkLogin_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveUserId_args : TBase
    {
      private string _key;
      private string _username;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool username;
      }

      public retrieveUserId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("retrieveUserId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveUserId_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveUserId_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveUserId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("retrieveUserId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveUserId_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewRecommender_args : TBase
    {
      private string _username;
      private string _primaryKey;
      private string _database;
      private string _table;
      private string _title;
      private string _description;
      private string _image;
      private string _ratings_column;
      private string _clientKey;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string PrimaryKey
      {
        get
        {
          return _primaryKey;
        }
        set
        {
          __isset.primaryKey = true;
          this._primaryKey = value;
        }
      }

      public string Database
      {
        get
        {
          return _database;
        }
        set
        {
          __isset.database = true;
          this._database = value;
        }
      }

      public string Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public string Title
      {
        get
        {
          return _title;
        }
        set
        {
          __isset.title = true;
          this._title = value;
        }
      }

      public string Description
      {
        get
        {
          return _description;
        }
        set
        {
          __isset.description = true;
          this._description = value;
        }
      }

      public string Image
      {
        get
        {
          return _image;
        }
        set
        {
          __isset.image = true;
          this._image = value;
        }
      }

      public string Ratings_column
      {
        get
        {
          return _ratings_column;
        }
        set
        {
          __isset.ratings_column = true;
          this._ratings_column = value;
        }
      }

      public string ClientKey
      {
        get
        {
          return _clientKey;
        }
        set
        {
          __isset.clientKey = true;
          this._clientKey = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool primaryKey;
        public bool database;
        public bool table;
        public bool title;
        public bool description;
        public bool image;
        public bool ratings_column;
        public bool clientKey;
      }

      public createNewRecommender_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                PrimaryKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Database = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Table = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Image = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Ratings_column = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                ClientKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewRecommender_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (PrimaryKey != null && __isset.primaryKey) {
          field.Name = "primaryKey";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PrimaryKey);
          oprot.WriteFieldEnd();
        }
        if (Database != null && __isset.database) {
          field.Name = "database";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Database);
          oprot.WriteFieldEnd();
        }
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table);
          oprot.WriteFieldEnd();
        }
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Title);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Image);
          oprot.WriteFieldEnd();
        }
        if (Ratings_column != null && __isset.ratings_column) {
          field.Name = "ratings_column";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ratings_column);
          oprot.WriteFieldEnd();
        }
        if (ClientKey != null && __isset.clientKey) {
          field.Name = "clientKey";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientKey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewRecommender_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (PrimaryKey != null && __isset.primaryKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PrimaryKey: ");
          __sb.Append(PrimaryKey);
        }
        if (Database != null && __isset.database) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Database: ");
          __sb.Append(Database);
        }
        if (Table != null && __isset.table) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table: ");
          __sb.Append(Table);
        }
        if (Title != null && __isset.title) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Title: ");
          __sb.Append(Title);
        }
        if (Description != null && __isset.description) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Description: ");
          __sb.Append(Description);
        }
        if (Image != null && __isset.image) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Image: ");
          __sb.Append(Image);
        }
        if (Ratings_column != null && __isset.ratings_column) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ratings_column: ");
          __sb.Append(Ratings_column);
        }
        if (ClientKey != null && __isset.clientKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientKey: ");
          __sb.Append(ClientKey);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNewRecommender_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createNewRecommender_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createNewRecommender_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNewRecommender_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserRatedItems_args : TBase
    {
      private string _key;
      private long _userId;
      private List<string> _displayColumns;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public long UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public List<string> DisplayColumns
      {
        get
        {
          return _displayColumns;
        }
        set
        {
          __isset.displayColumns = true;
          this._displayColumns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool userId;
        public bool displayColumns;
      }

      public getUserRatedItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                UserId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  DisplayColumns = new List<string>();
                  TList _list38 = iprot.ReadListBegin();
                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    string _elem40;
                    _elem40 = iprot.ReadString();
                    DisplayColumns.Add(_elem40);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserRatedItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UserId);
          oprot.WriteFieldEnd();
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          field.Name = "displayColumns";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DisplayColumns.Count));
            foreach (string _iter41 in DisplayColumns)
            {
              oprot.WriteString(_iter41);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserRatedItems_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (__isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DisplayColumns: ");
          __sb.Append(DisplayColumns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserRatedItems_result : TBase
    {
      private List<Item> _success;

      public List<Item> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getUserRatedItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Item>();
                  TList _list42 = iprot.ReadListBegin();
                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    Item _elem44;
                    _elem44 = new Item();
                    _elem44.Read(iprot);
                    Success.Add(_elem44);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserRatedItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Item _iter45 in Success)
              {
                _iter45.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getUserRatedItems_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initiateModel_args : TBase
    {
      private string _key;
      private string _table;
      private string _username;
      private string _database;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Database
      {
        get
        {
          return _database;
        }
        set
        {
          __isset.database = true;
          this._database = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool table;
        public bool username;
        public bool database;
      }

      public initiateModel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Database = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("initiateModel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Database != null && __isset.database) {
          field.Name = "database";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Database);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initiateModel_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (Table != null && __isset.table) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table: ");
          __sb.Append(Table);
        }
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Database != null && __isset.database) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Database: ");
          __sb.Append(Database);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class initiateModel_result : TBase
    {

      public initiateModel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("initiateModel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("initiateModel_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSearchItems_args : TBase
    {
      private string _table;
      private string _query;
      private List<string> _columnsToSearch;
      private List<string> _displayColumns;

      public string Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public string Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }

      public List<string> ColumnsToSearch
      {
        get
        {
          return _columnsToSearch;
        }
        set
        {
          __isset.columnsToSearch = true;
          this._columnsToSearch = value;
        }
      }

      public List<string> DisplayColumns
      {
        get
        {
          return _displayColumns;
        }
        set
        {
          __isset.displayColumns = true;
          this._displayColumns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool table;
        public bool query;
        public bool columnsToSearch;
        public bool displayColumns;
      }

      public getSearchItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Query = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ColumnsToSearch = new List<string>();
                  TList _list46 = iprot.ReadListBegin();
                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                  {
                    string _elem48;
                    _elem48 = iprot.ReadString();
                    ColumnsToSearch.Add(_elem48);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  DisplayColumns = new List<string>();
                  TList _list49 = iprot.ReadListBegin();
                  for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                  {
                    string _elem51;
                    _elem51 = iprot.ReadString();
                    DisplayColumns.Add(_elem51);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSearchItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table);
          oprot.WriteFieldEnd();
        }
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Query);
          oprot.WriteFieldEnd();
        }
        if (ColumnsToSearch != null && __isset.columnsToSearch) {
          field.Name = "columnsToSearch";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ColumnsToSearch.Count));
            foreach (string _iter52 in ColumnsToSearch)
            {
              oprot.WriteString(_iter52);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          field.Name = "displayColumns";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DisplayColumns.Count));
            foreach (string _iter53 in DisplayColumns)
            {
              oprot.WriteString(_iter53);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSearchItems_args(");
        bool __first = true;
        if (Table != null && __isset.table) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table: ");
          __sb.Append(Table);
        }
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query);
        }
        if (ColumnsToSearch != null && __isset.columnsToSearch) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ColumnsToSearch: ");
          __sb.Append(ColumnsToSearch);
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DisplayColumns: ");
          __sb.Append(DisplayColumns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSearchItems_result : TBase
    {
      private List<Item> _success;

      public List<Item> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getSearchItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Item>();
                  TList _list54 = iprot.ReadListBegin();
                  for( int _i55 = 0; _i55 < _list54.Count; ++_i55)
                  {
                    Item _elem56;
                    _elem56 = new Item();
                    _elem56.Read(iprot);
                    Success.Add(_elem56);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSearchItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Item _iter57 in Success)
              {
                _iter57.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSearchItems_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeOverallRatingBasedOrRandomRecommendation_args : TBase
    {
      private string _key;
      private string _ratingColumnName;
      private long _numRecs;
      private List<string> _displayColumns;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string RatingColumnName
      {
        get
        {
          return _ratingColumnName;
        }
        set
        {
          __isset.ratingColumnName = true;
          this._ratingColumnName = value;
        }
      }

      public long NumRecs
      {
        get
        {
          return _numRecs;
        }
        set
        {
          __isset.numRecs = true;
          this._numRecs = value;
        }
      }

      public List<string> DisplayColumns
      {
        get
        {
          return _displayColumns;
        }
        set
        {
          __isset.displayColumns = true;
          this._displayColumns = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool ratingColumnName;
        public bool numRecs;
        public bool displayColumns;
      }

      public makeOverallRatingBasedOrRandomRecommendation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RatingColumnName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                NumRecs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  DisplayColumns = new List<string>();
                  TList _list58 = iprot.ReadListBegin();
                  for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                  {
                    string _elem60;
                    _elem60 = iprot.ReadString();
                    DisplayColumns.Add(_elem60);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeOverallRatingBasedOrRandomRecommendation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (RatingColumnName != null && __isset.ratingColumnName) {
          field.Name = "ratingColumnName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RatingColumnName);
          oprot.WriteFieldEnd();
        }
        if (__isset.numRecs) {
          field.Name = "numRecs";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(NumRecs);
          oprot.WriteFieldEnd();
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          field.Name = "displayColumns";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DisplayColumns.Count));
            foreach (string _iter61 in DisplayColumns)
            {
              oprot.WriteString(_iter61);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeOverallRatingBasedOrRandomRecommendation_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (RatingColumnName != null && __isset.ratingColumnName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RatingColumnName: ");
          __sb.Append(RatingColumnName);
        }
        if (__isset.numRecs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumRecs: ");
          __sb.Append(NumRecs);
        }
        if (DisplayColumns != null && __isset.displayColumns) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DisplayColumns: ");
          __sb.Append(DisplayColumns);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeOverallRatingBasedOrRandomRecommendation_result : TBase
    {
      private List<Item> _success;

      public List<Item> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public makeOverallRatingBasedOrRandomRecommendation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Item>();
                  TList _list62 = iprot.ReadListBegin();
                  for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                  {
                    Item _elem64;
                    _elem64 = new Item();
                    _elem64.Read(iprot);
                    Success.Add(_elem64);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeOverallRatingBasedOrRandomRecommendation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Item _iter65 in Success)
              {
                _iter65.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeOverallRatingBasedOrRandomRecommendation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addKibitzUser_args : TBase
    {
      private string _email;
      private string _password;

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool email;
        public bool password;
      }

      public addKibitzUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addKibitzUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addKibitzUser_args(");
        bool __first = true;
        if (Email != null && __isset.email) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Email: ");
          __sb.Append(Email);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addKibitzUser_result : TBase
    {

      public addKibitzUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addKibitzUser_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addKibitzUser_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkCorrectDatahubLogin_args : TBase
    {
      private string _username;
      private string _repository;
      private string _table;
      private string _primary_key;
      private string _title;
      private string _description;
      private string _image;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Repository
      {
        get
        {
          return _repository;
        }
        set
        {
          __isset.repository = true;
          this._repository = value;
        }
      }

      public string Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public string Primary_key
      {
        get
        {
          return _primary_key;
        }
        set
        {
          __isset.primary_key = true;
          this._primary_key = value;
        }
      }

      public string Title
      {
        get
        {
          return _title;
        }
        set
        {
          __isset.title = true;
          this._title = value;
        }
      }

      public string Description
      {
        get
        {
          return _description;
        }
        set
        {
          __isset.description = true;
          this._description = value;
        }
      }

      public string Image
      {
        get
        {
          return _image;
        }
        set
        {
          __isset.image = true;
          this._image = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool repository;
        public bool table;
        public bool primary_key;
        public bool title;
        public bool description;
        public bool image;
      }

      public checkCorrectDatahubLogin_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Repository = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Table = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Primary_key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Image = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkCorrectDatahubLogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Repository != null && __isset.repository) {
          field.Name = "repository";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Repository);
          oprot.WriteFieldEnd();
        }
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table);
          oprot.WriteFieldEnd();
        }
        if (Primary_key != null && __isset.primary_key) {
          field.Name = "primary_key";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Primary_key);
          oprot.WriteFieldEnd();
        }
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Title);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Image);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkCorrectDatahubLogin_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Repository != null && __isset.repository) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Repository: ");
          __sb.Append(Repository);
        }
        if (Table != null && __isset.table) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table: ");
          __sb.Append(Table);
        }
        if (Primary_key != null && __isset.primary_key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Primary_key: ");
          __sb.Append(Primary_key);
        }
        if (Title != null && __isset.title) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Title: ");
          __sb.Append(Title);
        }
        if (Description != null && __isset.description) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Description: ");
          __sb.Append(Description);
        }
        if (Image != null && __isset.image) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Image: ");
          __sb.Append(Image);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkCorrectDatahubLogin_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public checkCorrectDatahubLogin_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkCorrectDatahubLogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkCorrectDatahubLogin_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkRatingsColumn_args : TBase
    {
      private string _username;
      private string _table;
      private string _repository;
      private string _ratings_column;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public string Repository
      {
        get
        {
          return _repository;
        }
        set
        {
          __isset.repository = true;
          this._repository = value;
        }
      }

      public string Ratings_column
      {
        get
        {
          return _ratings_column;
        }
        set
        {
          __isset.ratings_column = true;
          this._ratings_column = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool table;
        public bool repository;
        public bool ratings_column;
      }

      public checkRatingsColumn_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Table = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Repository = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Ratings_column = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkRatingsColumn_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table);
          oprot.WriteFieldEnd();
        }
        if (Repository != null && __isset.repository) {
          field.Name = "repository";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Repository);
          oprot.WriteFieldEnd();
        }
        if (Ratings_column != null && __isset.ratings_column) {
          field.Name = "ratings_column";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ratings_column);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkRatingsColumn_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Table != null && __isset.table) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table: ");
          __sb.Append(Table);
        }
        if (Repository != null && __isset.repository) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Repository: ");
          __sb.Append(Repository);
        }
        if (Ratings_column != null && __isset.ratings_column) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ratings_column: ");
          __sb.Append(Ratings_column);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkRatingsColumn_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public checkRatingsColumn_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkRatingsColumn_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkRatingsColumn_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecommenders_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public getRecommenders_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecommenders_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRecommenders_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecommenders_result : TBase
    {
      private List<Recommender> _success;

      public List<Recommender> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getRecommenders_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Recommender>();
                  TList _list66 = iprot.ReadListBegin();
                  for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                  {
                    Recommender _elem68;
                    _elem68 = new Recommender();
                    _elem68.Read(iprot);
                    Success.Add(_elem68);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecommenders_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Recommender _iter69 in Success)
              {
                _iter69.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRecommenders_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProfilePicture_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public getProfilePicture_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProfilePicture_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getProfilePicture_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProfilePicture_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getProfilePicture_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProfilePicture_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getProfilePicture_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveFBProfilePic_args : TBase
    {
      private string _username;
      private string _fbUsername;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string FbUsername
      {
        get
        {
          return _fbUsername;
        }
        set
        {
          __isset.fbUsername = true;
          this._fbUsername = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool fbUsername;
      }

      public saveFBProfilePic_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FbUsername = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveFBProfilePic_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (FbUsername != null && __isset.fbUsername) {
          field.Name = "fbUsername";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FbUsername);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveFBProfilePic_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (FbUsername != null && __isset.fbUsername) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FbUsername: ");
          __sb.Append(FbUsername);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveFBProfilePic_result : TBase
    {

      public saveFBProfilePic_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveFBProfilePic_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveFBProfilePic_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteRecommender_args : TBase
    {
      private string _clientKey;

      public string ClientKey
      {
        get
        {
          return _clientKey;
        }
        set
        {
          __isset.clientKey = true;
          this._clientKey = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientKey;
      }

      public deleteRecommender_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ClientKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteRecommender_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ClientKey != null && __isset.clientKey) {
          field.Name = "clientKey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientKey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteRecommender_args(");
        bool __first = true;
        if (ClientKey != null && __isset.clientKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientKey: ");
          __sb.Append(ClientKey);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteRecommender_result : TBase
    {

      public deleteRecommender_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteRecommender_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteRecommender_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateTemplate_args : TBase
    {
      private string _username;
      private string _primaryKey;
      private string _title;
      private string _description;
      private string _image;
      private string _video;
      private Dictionary<string, string> _itemTypes;
      private List<string> _displayItems;
      private long _maxRatingVal;
      private long _numRecs;
      private string _recommenderName;
      private string _clientKey;
      private string _homepage;
      private string _creatorName;
      private string _repoName;
      private string _tableName;
      private string _ratingsColumn;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string PrimaryKey
      {
        get
        {
          return _primaryKey;
        }
        set
        {
          __isset.primaryKey = true;
          this._primaryKey = value;
        }
      }

      public string Title
      {
        get
        {
          return _title;
        }
        set
        {
          __isset.title = true;
          this._title = value;
        }
      }

      public string Description
      {
        get
        {
          return _description;
        }
        set
        {
          __isset.description = true;
          this._description = value;
        }
      }

      public string Image
      {
        get
        {
          return _image;
        }
        set
        {
          __isset.image = true;
          this._image = value;
        }
      }

      public string Video
      {
        get
        {
          return _video;
        }
        set
        {
          __isset.video = true;
          this._video = value;
        }
      }

      public Dictionary<string, string> ItemTypes
      {
        get
        {
          return _itemTypes;
        }
        set
        {
          __isset.itemTypes = true;
          this._itemTypes = value;
        }
      }

      public List<string> DisplayItems
      {
        get
        {
          return _displayItems;
        }
        set
        {
          __isset.displayItems = true;
          this._displayItems = value;
        }
      }

      public long MaxRatingVal
      {
        get
        {
          return _maxRatingVal;
        }
        set
        {
          __isset.maxRatingVal = true;
          this._maxRatingVal = value;
        }
      }

      public long NumRecs
      {
        get
        {
          return _numRecs;
        }
        set
        {
          __isset.numRecs = true;
          this._numRecs = value;
        }
      }

      public string RecommenderName
      {
        get
        {
          return _recommenderName;
        }
        set
        {
          __isset.recommenderName = true;
          this._recommenderName = value;
        }
      }

      public string ClientKey
      {
        get
        {
          return _clientKey;
        }
        set
        {
          __isset.clientKey = true;
          this._clientKey = value;
        }
      }

      public string Homepage
      {
        get
        {
          return _homepage;
        }
        set
        {
          __isset.homepage = true;
          this._homepage = value;
        }
      }

      public string CreatorName
      {
        get
        {
          return _creatorName;
        }
        set
        {
          __isset.creatorName = true;
          this._creatorName = value;
        }
      }

      public string RepoName
      {
        get
        {
          return _repoName;
        }
        set
        {
          __isset.repoName = true;
          this._repoName = value;
        }
      }

      public string TableName
      {
        get
        {
          return _tableName;
        }
        set
        {
          __isset.tableName = true;
          this._tableName = value;
        }
      }

      public string RatingsColumn
      {
        get
        {
          return _ratingsColumn;
        }
        set
        {
          __isset.ratingsColumn = true;
          this._ratingsColumn = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool primaryKey;
        public bool title;
        public bool description;
        public bool image;
        public bool video;
        public bool itemTypes;
        public bool displayItems;
        public bool maxRatingVal;
        public bool numRecs;
        public bool recommenderName;
        public bool clientKey;
        public bool homepage;
        public bool creatorName;
        public bool repoName;
        public bool tableName;
        public bool ratingsColumn;
      }

      public updateTemplate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                PrimaryKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Image = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Video = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Map) {
                {
                  ItemTypes = new Dictionary<string, string>();
                  TMap _map70 = iprot.ReadMapBegin();
                  for( int _i71 = 0; _i71 < _map70.Count; ++_i71)
                  {
                    string _key72;
                    string _val73;
                    _key72 = iprot.ReadString();
                    _val73 = iprot.ReadString();
                    ItemTypes[_key72] = _val73;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  DisplayItems = new List<string>();
                  TList _list74 = iprot.ReadListBegin();
                  for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                  {
                    string _elem76;
                    _elem76 = iprot.ReadString();
                    DisplayItems.Add(_elem76);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                MaxRatingVal = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                NumRecs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                RecommenderName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                ClientKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                Homepage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                CreatorName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                RepoName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                TableName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.String) {
                RatingsColumn = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateTemplate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (PrimaryKey != null && __isset.primaryKey) {
          field.Name = "primaryKey";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PrimaryKey);
          oprot.WriteFieldEnd();
        }
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Title);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Image);
          oprot.WriteFieldEnd();
        }
        if (Video != null && __isset.video) {
          field.Name = "video";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Video);
          oprot.WriteFieldEnd();
        }
        if (ItemTypes != null && __isset.itemTypes) {
          field.Name = "itemTypes";
          field.Type = TType.Map;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ItemTypes.Count));
            foreach (string _iter77 in ItemTypes.Keys)
            {
              oprot.WriteString(_iter77);
              oprot.WriteString(ItemTypes[_iter77]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DisplayItems != null && __isset.displayItems) {
          field.Name = "displayItems";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DisplayItems.Count));
            foreach (string _iter78 in DisplayItems)
            {
              oprot.WriteString(_iter78);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.maxRatingVal) {
          field.Name = "maxRatingVal";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MaxRatingVal);
          oprot.WriteFieldEnd();
        }
        if (__isset.numRecs) {
          field.Name = "numRecs";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(NumRecs);
          oprot.WriteFieldEnd();
        }
        if (RecommenderName != null && __isset.recommenderName) {
          field.Name = "recommenderName";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RecommenderName);
          oprot.WriteFieldEnd();
        }
        if (ClientKey != null && __isset.clientKey) {
          field.Name = "clientKey";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientKey);
          oprot.WriteFieldEnd();
        }
        if (Homepage != null && __isset.homepage) {
          field.Name = "homepage";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Homepage);
          oprot.WriteFieldEnd();
        }
        if (CreatorName != null && __isset.creatorName) {
          field.Name = "creatorName";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CreatorName);
          oprot.WriteFieldEnd();
        }
        if (RepoName != null && __isset.repoName) {
          field.Name = "repoName";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RepoName);
          oprot.WriteFieldEnd();
        }
        if (TableName != null && __isset.tableName) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TableName);
          oprot.WriteFieldEnd();
        }
        if (RatingsColumn != null && __isset.ratingsColumn) {
          field.Name = "ratingsColumn";
          field.Type = TType.String;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RatingsColumn);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateTemplate_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (PrimaryKey != null && __isset.primaryKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PrimaryKey: ");
          __sb.Append(PrimaryKey);
        }
        if (Title != null && __isset.title) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Title: ");
          __sb.Append(Title);
        }
        if (Description != null && __isset.description) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Description: ");
          __sb.Append(Description);
        }
        if (Image != null && __isset.image) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Image: ");
          __sb.Append(Image);
        }
        if (Video != null && __isset.video) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Video: ");
          __sb.Append(Video);
        }
        if (ItemTypes != null && __isset.itemTypes) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ItemTypes: ");
          __sb.Append(ItemTypes);
        }
        if (DisplayItems != null && __isset.displayItems) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DisplayItems: ");
          __sb.Append(DisplayItems);
        }
        if (__isset.maxRatingVal) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxRatingVal: ");
          __sb.Append(MaxRatingVal);
        }
        if (__isset.numRecs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumRecs: ");
          __sb.Append(NumRecs);
        }
        if (RecommenderName != null && __isset.recommenderName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RecommenderName: ");
          __sb.Append(RecommenderName);
        }
        if (ClientKey != null && __isset.clientKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientKey: ");
          __sb.Append(ClientKey);
        }
        if (Homepage != null && __isset.homepage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Homepage: ");
          __sb.Append(Homepage);
        }
        if (CreatorName != null && __isset.creatorName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CreatorName: ");
          __sb.Append(CreatorName);
        }
        if (RepoName != null && __isset.repoName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RepoName: ");
          __sb.Append(RepoName);
        }
        if (TableName != null && __isset.tableName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TableName: ");
          __sb.Append(TableName);
        }
        if (RatingsColumn != null && __isset.ratingsColumn) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RatingsColumn: ");
          __sb.Append(RatingsColumn);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateTemplate_result : TBase
    {

      public updateTemplate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateTemplate_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateTemplate_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class configurePrefilledUserRatings_args : TBase
    {
      private string _username;
      private string _repoName;
      private string _primaryKey;
      private string _itemTable;
      private string _tableName;
      private string _userIdCol;
      private string _itemIdCol;
      private string _userRatingCol;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string RepoName
      {
        get
        {
          return _repoName;
        }
        set
        {
          __isset.repoName = true;
          this._repoName = value;
        }
      }

      public string PrimaryKey
      {
        get
        {
          return _primaryKey;
        }
        set
        {
          __isset.primaryKey = true;
          this._primaryKey = value;
        }
      }

      public string ItemTable
      {
        get
        {
          return _itemTable;
        }
        set
        {
          __isset.itemTable = true;
          this._itemTable = value;
        }
      }

      public string TableName
      {
        get
        {
          return _tableName;
        }
        set
        {
          __isset.tableName = true;
          this._tableName = value;
        }
      }

      public string UserIdCol
      {
        get
        {
          return _userIdCol;
        }
        set
        {
          __isset.userIdCol = true;
          this._userIdCol = value;
        }
      }

      public string ItemIdCol
      {
        get
        {
          return _itemIdCol;
        }
        set
        {
          __isset.itemIdCol = true;
          this._itemIdCol = value;
        }
      }

      public string UserRatingCol
      {
        get
        {
          return _userRatingCol;
        }
        set
        {
          __isset.userRatingCol = true;
          this._userRatingCol = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool repoName;
        public bool primaryKey;
        public bool itemTable;
        public bool tableName;
        public bool userIdCol;
        public bool itemIdCol;
        public bool userRatingCol;
      }

      public configurePrefilledUserRatings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RepoName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PrimaryKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ItemTable = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                TableName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                UserIdCol = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                ItemIdCol = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                UserRatingCol = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("configurePrefilledUserRatings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (RepoName != null && __isset.repoName) {
          field.Name = "repoName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RepoName);
          oprot.WriteFieldEnd();
        }
        if (PrimaryKey != null && __isset.primaryKey) {
          field.Name = "primaryKey";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PrimaryKey);
          oprot.WriteFieldEnd();
        }
        if (ItemTable != null && __isset.itemTable) {
          field.Name = "itemTable";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ItemTable);
          oprot.WriteFieldEnd();
        }
        if (TableName != null && __isset.tableName) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TableName);
          oprot.WriteFieldEnd();
        }
        if (UserIdCol != null && __isset.userIdCol) {
          field.Name = "userIdCol";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserIdCol);
          oprot.WriteFieldEnd();
        }
        if (ItemIdCol != null && __isset.itemIdCol) {
          field.Name = "itemIdCol";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ItemIdCol);
          oprot.WriteFieldEnd();
        }
        if (UserRatingCol != null && __isset.userRatingCol) {
          field.Name = "userRatingCol";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserRatingCol);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("configurePrefilledUserRatings_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (RepoName != null && __isset.repoName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RepoName: ");
          __sb.Append(RepoName);
        }
        if (PrimaryKey != null && __isset.primaryKey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PrimaryKey: ");
          __sb.Append(PrimaryKey);
        }
        if (ItemTable != null && __isset.itemTable) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ItemTable: ");
          __sb.Append(ItemTable);
        }
        if (TableName != null && __isset.tableName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TableName: ");
          __sb.Append(TableName);
        }
        if (UserIdCol != null && __isset.userIdCol) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserIdCol: ");
          __sb.Append(UserIdCol);
        }
        if (ItemIdCol != null && __isset.itemIdCol) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ItemIdCol: ");
          __sb.Append(ItemIdCol);
        }
        if (UserRatingCol != null && __isset.userRatingCol) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserRatingCol: ");
          __sb.Append(UserRatingCol);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class configurePrefilledUserRatings_result : TBase
    {

      public configurePrefilledUserRatings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("configurePrefilledUserRatings_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("configurePrefilledUserRatings_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTables_args : TBase
    {
      private string _username;
      private string _repo;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Repo
      {
        get
        {
          return _repo;
        }
        set
        {
          __isset.repo = true;
          this._repo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool repo;
      }

      public getTables_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Repo = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTables_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Repo != null && __isset.repo) {
          field.Name = "repo";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Repo);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTables_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Repo != null && __isset.repo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Repo: ");
          __sb.Append(Repo);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTables_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getTables_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list79 = iprot.ReadListBegin();
                  for( int _i80 = 0; _i80 < _list79.Count; ++_i80)
                  {
                    string _elem81;
                    _elem81 = iprot.ReadString();
                    Success.Add(_elem81);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTables_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter82 in Success)
              {
                oprot.WriteString(_iter82);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTables_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getColumns_args : TBase
    {
      private string _username;
      private string _repo;
      private string _table;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Repo
      {
        get
        {
          return _repo;
        }
        set
        {
          __isset.repo = true;
          this._repo = value;
        }
      }

      public string Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool repo;
        public bool table;
      }

      public getColumns_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Repo = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Table = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getColumns_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Repo != null && __isset.repo) {
          field.Name = "repo";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Repo);
          oprot.WriteFieldEnd();
        }
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Table);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getColumns_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Repo != null && __isset.repo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Repo: ");
          __sb.Append(Repo);
        }
        if (Table != null && __isset.table) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Table: ");
          __sb.Append(Table);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getColumns_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getColumns_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list83 = iprot.ReadListBegin();
                  for( int _i84 = 0; _i84 < _list83.Count; ++_i84)
                  {
                    string _elem85;
                    _elem85 = iprot.ReadString();
                    Success.Add(_elem85);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getColumns_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter86 in Success)
              {
                oprot.WriteString(_iter86);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getColumns_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFirstRepo_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public getFirstRepo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFirstRepo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFirstRepo_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFirstRepo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getFirstRepo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFirstRepo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFirstRepo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNumRepos_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public getNumRepos_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNumRepos_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNumRepos_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNumRepos_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getNumRepos_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNumRepos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getNumRepos_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllRepos_args : TBase
    {
      private string _username;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
      }

      public getAllRepos_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllRepos_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllRepos_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllRepos_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAllRepos_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list87 = iprot.ReadListBegin();
                  for( int _i88 = 0; _i88 < _list87.Count; ++_i88)
                  {
                    string _elem89;
                    _elem89 = iprot.ReadString();
                    Success.Add(_elem89);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllRepos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter90 in Success)
              {
                oprot.WriteString(_iter90);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getAllRepos_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveCSSData_args : TBase
    {
      private string _path;
      private string _data;

      public string Path
      {
        get
        {
          return _path;
        }
        set
        {
          __isset.path = true;
          this._path = value;
        }
      }

      public string Data
      {
        get
        {
          return _data;
        }
        set
        {
          __isset.data = true;
          this._data = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool path;
        public bool data;
      }

      public saveCSSData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Data = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveCSSData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Data);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveCSSData_args(");
        bool __first = true;
        if (Path != null && __isset.path) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Path: ");
          __sb.Append(Path);
        }
        if (Data != null && __isset.data) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Data: ");
          __sb.Append(Data);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveCSSData_result : TBase
    {

      public saveCSSData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveCSSData_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveCSSData_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
