#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from kibitz import RecommenderService
from kibitz.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void createNewIndividualServer(string key)'
  print '  void terminateSession(string key)'
  print '   makeRecommendation(string key, i64 userId, i64 numRecs, bool isBoolean,  displayColumns)'
  print '   makeItemBasedRecommendations(string key, i64 userId, i64 numRecs,  displayColumns)'
  print '   getPageItems(string key, i64 page, i64 numPerPage,  displayColumns)'
  print '  i64 getItemCount(string key)'
  print '  void recordRatings(string key, i64 userId, i64 itemId, i64 rating)'
  print '  void deleteRatings(string key, i64 userId, i64 itemId)'
  print '  string createNewUser(string key, string username, bool iskibitzuser)'
  print '  bool checkUsername(string key, string username, bool iskibitzuser)'
  print '  bool checkLogin(string key, string username, string password, bool iskibitzuser)'
  print '  i64 retrieveUserId(string key, string username)'
  print '  bool createNewRecommender(string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey)'
  print '   getUserRatedItems(string key, i64 userId,  displayColumns)'
  print '  void initiateModel(string key, string table, string username, string database)'
  print '   getSearchItems(string table, string query,  columnsToSearch,  displayColumns)'
  print '   makeOverallRatingBasedOrRandomRecommendation(string key, string ratingColumnName, i64 numRecs,  displayColumns)'
  print '  void addKibitzUser(string email, string password)'
  print '  bool checkCorrectDatahubLogin(string username, string repository, string table, string primary_key, string title, string description, string image)'
  print '  bool checkRatingsColumn(string username, string table, string repository, string ratings_column)'
  print '   getRecommenders(string username)'
  print '  string getProfilePicture(string username)'
  print '  void saveFBProfilePic(string username, string fbUsername)'
  print '  void deleteRecommender(string clientKey)'
  print '  void updateTemplate(string username, string primaryKey, string title, string description, string image, string video,  itemTypes,  displayItems, i64 maxRatingVal, i64 numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn)'
  print '  void configurePrefilledUserRatings(string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol)'
  print '   getTables(string username, string repo)'
  print '   getColumns(string username, string repo, string table)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RecommenderService.Client(protocol)
transport.open()

if cmd == 'createNewIndividualServer':
  if len(args) != 1:
    print 'createNewIndividualServer requires 1 args'
    sys.exit(1)
  pp.pprint(client.createNewIndividualServer(args[0],))

elif cmd == 'terminateSession':
  if len(args) != 1:
    print 'terminateSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.terminateSession(args[0],))

elif cmd == 'makeRecommendation':
  if len(args) != 5:
    print 'makeRecommendation requires 5 args'
    sys.exit(1)
  pp.pprint(client.makeRecommendation(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'makeItemBasedRecommendations':
  if len(args) != 4:
    print 'makeItemBasedRecommendations requires 4 args'
    sys.exit(1)
  pp.pprint(client.makeItemBasedRecommendations(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'getPageItems':
  if len(args) != 4:
    print 'getPageItems requires 4 args'
    sys.exit(1)
  pp.pprint(client.getPageItems(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'getItemCount':
  if len(args) != 1:
    print 'getItemCount requires 1 args'
    sys.exit(1)
  pp.pprint(client.getItemCount(args[0],))

elif cmd == 'recordRatings':
  if len(args) != 4:
    print 'recordRatings requires 4 args'
    sys.exit(1)
  pp.pprint(client.recordRatings(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'deleteRatings':
  if len(args) != 3:
    print 'deleteRatings requires 3 args'
    sys.exit(1)
  pp.pprint(client.deleteRatings(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'createNewUser':
  if len(args) != 3:
    print 'createNewUser requires 3 args'
    sys.exit(1)
  pp.pprint(client.createNewUser(args[0],args[1],eval(args[2]),))

elif cmd == 'checkUsername':
  if len(args) != 3:
    print 'checkUsername requires 3 args'
    sys.exit(1)
  pp.pprint(client.checkUsername(args[0],args[1],eval(args[2]),))

elif cmd == 'checkLogin':
  if len(args) != 4:
    print 'checkLogin requires 4 args'
    sys.exit(1)
  pp.pprint(client.checkLogin(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'retrieveUserId':
  if len(args) != 2:
    print 'retrieveUserId requires 2 args'
    sys.exit(1)
  pp.pprint(client.retrieveUserId(args[0],args[1],))

elif cmd == 'createNewRecommender':
  if len(args) != 9:
    print 'createNewRecommender requires 9 args'
    sys.exit(1)
  pp.pprint(client.createNewRecommender(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],))

elif cmd == 'getUserRatedItems':
  if len(args) != 3:
    print 'getUserRatedItems requires 3 args'
    sys.exit(1)
  pp.pprint(client.getUserRatedItems(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'initiateModel':
  if len(args) != 4:
    print 'initiateModel requires 4 args'
    sys.exit(1)
  pp.pprint(client.initiateModel(args[0],args[1],args[2],args[3],))

elif cmd == 'getSearchItems':
  if len(args) != 4:
    print 'getSearchItems requires 4 args'
    sys.exit(1)
  pp.pprint(client.getSearchItems(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'makeOverallRatingBasedOrRandomRecommendation':
  if len(args) != 4:
    print 'makeOverallRatingBasedOrRandomRecommendation requires 4 args'
    sys.exit(1)
  pp.pprint(client.makeOverallRatingBasedOrRandomRecommendation(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'addKibitzUser':
  if len(args) != 2:
    print 'addKibitzUser requires 2 args'
    sys.exit(1)
  pp.pprint(client.addKibitzUser(args[0],args[1],))

elif cmd == 'checkCorrectDatahubLogin':
  if len(args) != 7:
    print 'checkCorrectDatahubLogin requires 7 args'
    sys.exit(1)
  pp.pprint(client.checkCorrectDatahubLogin(args[0],args[1],args[2],args[3],args[4],args[5],args[6],))

elif cmd == 'checkRatingsColumn':
  if len(args) != 4:
    print 'checkRatingsColumn requires 4 args'
    sys.exit(1)
  pp.pprint(client.checkRatingsColumn(args[0],args[1],args[2],args[3],))

elif cmd == 'getRecommenders':
  if len(args) != 1:
    print 'getRecommenders requires 1 args'
    sys.exit(1)
  pp.pprint(client.getRecommenders(args[0],))

elif cmd == 'getProfilePicture':
  if len(args) != 1:
    print 'getProfilePicture requires 1 args'
    sys.exit(1)
  pp.pprint(client.getProfilePicture(args[0],))

elif cmd == 'saveFBProfilePic':
  if len(args) != 2:
    print 'saveFBProfilePic requires 2 args'
    sys.exit(1)
  pp.pprint(client.saveFBProfilePic(args[0],args[1],))

elif cmd == 'deleteRecommender':
  if len(args) != 1:
    print 'deleteRecommender requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteRecommender(args[0],))

elif cmd == 'updateTemplate':
  if len(args) != 17:
    print 'updateTemplate requires 17 args'
    sys.exit(1)
  pp.pprint(client.updateTemplate(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),eval(args[7]),eval(args[8]),eval(args[9]),args[10],args[11],args[12],args[13],args[14],args[15],args[16],))

elif cmd == 'configurePrefilledUserRatings':
  if len(args) != 8:
    print 'configurePrefilledUserRatings requires 8 args'
    sys.exit(1)
  pp.pprint(client.configurePrefilledUserRatings(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],))

elif cmd == 'getTables':
  if len(args) != 2:
    print 'getTables requires 2 args'
    sys.exit(1)
  pp.pprint(client.getTables(args[0],args[1],))

elif cmd == 'getColumns':
  if len(args) != 3:
    print 'getColumns requires 3 args'
    sys.exit(1)
  pp.pprint(client.getColumns(args[0],args[1],args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
