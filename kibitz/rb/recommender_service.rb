#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'kibitz_types'

module RecommenderService
  class Client
    include ::Thrift::Client

    def createNewIndividualServer(key)
      send_createNewIndividualServer(key)
      recv_createNewIndividualServer()
    end

    def send_createNewIndividualServer(key)
      send_message('createNewIndividualServer', CreateNewIndividualServer_args, :key => key)
    end

    def recv_createNewIndividualServer()
      result = receive_message(CreateNewIndividualServer_result)
      return
    end

    def terminateSession(key)
      send_terminateSession(key)
      recv_terminateSession()
    end

    def send_terminateSession(key)
      send_message('terminateSession', TerminateSession_args, :key => key)
    end

    def recv_terminateSession()
      result = receive_message(TerminateSession_result)
      return
    end

    def makeRecommendation(key, userId, numRecs, isBoolean, displayColumns)
      send_makeRecommendation(key, userId, numRecs, isBoolean, displayColumns)
      return recv_makeRecommendation()
    end

    def send_makeRecommendation(key, userId, numRecs, isBoolean, displayColumns)
      send_message('makeRecommendation', MakeRecommendation_args, :key => key, :userId => userId, :numRecs => numRecs, :isBoolean => isBoolean, :displayColumns => displayColumns)
    end

    def recv_makeRecommendation()
      result = receive_message(MakeRecommendation_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makeRecommendation failed: unknown result')
    end

    def makeItemBasedRecommendations(key, userId, numRecs, displayColumns)
      send_makeItemBasedRecommendations(key, userId, numRecs, displayColumns)
      return recv_makeItemBasedRecommendations()
    end

    def send_makeItemBasedRecommendations(key, userId, numRecs, displayColumns)
      send_message('makeItemBasedRecommendations', MakeItemBasedRecommendations_args, :key => key, :userId => userId, :numRecs => numRecs, :displayColumns => displayColumns)
    end

    def recv_makeItemBasedRecommendations()
      result = receive_message(MakeItemBasedRecommendations_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makeItemBasedRecommendations failed: unknown result')
    end

    def getPageItems(key, page, numPerPage, displayColumns)
      send_getPageItems(key, page, numPerPage, displayColumns)
      return recv_getPageItems()
    end

    def send_getPageItems(key, page, numPerPage, displayColumns)
      send_message('getPageItems', GetPageItems_args, :key => key, :page => page, :numPerPage => numPerPage, :displayColumns => displayColumns)
    end

    def recv_getPageItems()
      result = receive_message(GetPageItems_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPageItems failed: unknown result')
    end

    def getItemCount(key)
      send_getItemCount(key)
      return recv_getItemCount()
    end

    def send_getItemCount(key)
      send_message('getItemCount', GetItemCount_args, :key => key)
    end

    def recv_getItemCount()
      result = receive_message(GetItemCount_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getItemCount failed: unknown result')
    end

    def recordRatings(key, userId, itemId, rating)
      send_recordRatings(key, userId, itemId, rating)
      recv_recordRatings()
    end

    def send_recordRatings(key, userId, itemId, rating)
      send_message('recordRatings', RecordRatings_args, :key => key, :userId => userId, :itemId => itemId, :rating => rating)
    end

    def recv_recordRatings()
      result = receive_message(RecordRatings_result)
      return
    end

    def deleteRatings(key, userId, itemId)
      send_deleteRatings(key, userId, itemId)
      recv_deleteRatings()
    end

    def send_deleteRatings(key, userId, itemId)
      send_message('deleteRatings', DeleteRatings_args, :key => key, :userId => userId, :itemId => itemId)
    end

    def recv_deleteRatings()
      result = receive_message(DeleteRatings_result)
      return
    end

    def createNewUser(key, username, iskibitzuser)
      send_createNewUser(key, username, iskibitzuser)
      return recv_createNewUser()
    end

    def send_createNewUser(key, username, iskibitzuser)
      send_message('createNewUser', CreateNewUser_args, :key => key, :username => username, :iskibitzuser => iskibitzuser)
    end

    def recv_createNewUser()
      result = receive_message(CreateNewUser_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createNewUser failed: unknown result')
    end

    def checkUsername(key, username, iskibitzuser)
      send_checkUsername(key, username, iskibitzuser)
      return recv_checkUsername()
    end

    def send_checkUsername(key, username, iskibitzuser)
      send_message('checkUsername', CheckUsername_args, :key => key, :username => username, :iskibitzuser => iskibitzuser)
    end

    def recv_checkUsername()
      result = receive_message(CheckUsername_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'checkUsername failed: unknown result')
    end

    def checkLogin(key, username, password, iskibitzuser)
      send_checkLogin(key, username, password, iskibitzuser)
      return recv_checkLogin()
    end

    def send_checkLogin(key, username, password, iskibitzuser)
      send_message('checkLogin', CheckLogin_args, :key => key, :username => username, :password => password, :iskibitzuser => iskibitzuser)
    end

    def recv_checkLogin()
      result = receive_message(CheckLogin_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'checkLogin failed: unknown result')
    end

    def retrieveUserId(key, username)
      send_retrieveUserId(key, username)
      return recv_retrieveUserId()
    end

    def send_retrieveUserId(key, username)
      send_message('retrieveUserId', RetrieveUserId_args, :key => key, :username => username)
    end

    def recv_retrieveUserId()
      result = receive_message(RetrieveUserId_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'retrieveUserId failed: unknown result')
    end

    def createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey)
      send_createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey)
      return recv_createNewRecommender()
    end

    def send_createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey)
      send_message('createNewRecommender', CreateNewRecommender_args, :username => username, :primaryKey => primaryKey, :database => database, :table => table, :title => title, :description => description, :image => image, :ratings_column => ratings_column, :clientKey => clientKey)
    end

    def recv_createNewRecommender()
      result = receive_message(CreateNewRecommender_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createNewRecommender failed: unknown result')
    end

    def getUserRatedItems(key, userId, displayColumns)
      send_getUserRatedItems(key, userId, displayColumns)
      return recv_getUserRatedItems()
    end

    def send_getUserRatedItems(key, userId, displayColumns)
      send_message('getUserRatedItems', GetUserRatedItems_args, :key => key, :userId => userId, :displayColumns => displayColumns)
    end

    def recv_getUserRatedItems()
      result = receive_message(GetUserRatedItems_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserRatedItems failed: unknown result')
    end

    def initiateModel(key, table, username, database)
      send_initiateModel(key, table, username, database)
      recv_initiateModel()
    end

    def send_initiateModel(key, table, username, database)
      send_message('initiateModel', InitiateModel_args, :key => key, :table => table, :username => username, :database => database)
    end

    def recv_initiateModel()
      result = receive_message(InitiateModel_result)
      return
    end

    def getSearchItems(table, query, columnsToSearch, displayColumns)
      send_getSearchItems(table, query, columnsToSearch, displayColumns)
      return recv_getSearchItems()
    end

    def send_getSearchItems(table, query, columnsToSearch, displayColumns)
      send_message('getSearchItems', GetSearchItems_args, :table => table, :query => query, :columnsToSearch => columnsToSearch, :displayColumns => displayColumns)
    end

    def recv_getSearchItems()
      result = receive_message(GetSearchItems_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSearchItems failed: unknown result')
    end

    def makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns)
      send_makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns)
      return recv_makeOverallRatingBasedOrRandomRecommendation()
    end

    def send_makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns)
      send_message('makeOverallRatingBasedOrRandomRecommendation', MakeOverallRatingBasedOrRandomRecommendation_args, :key => key, :ratingColumnName => ratingColumnName, :numRecs => numRecs, :displayColumns => displayColumns)
    end

    def recv_makeOverallRatingBasedOrRandomRecommendation()
      result = receive_message(MakeOverallRatingBasedOrRandomRecommendation_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makeOverallRatingBasedOrRandomRecommendation failed: unknown result')
    end

    def addKibitzUser(email, password)
      send_addKibitzUser(email, password)
      recv_addKibitzUser()
    end

    def send_addKibitzUser(email, password)
      send_message('addKibitzUser', AddKibitzUser_args, :email => email, :password => password)
    end

    def recv_addKibitzUser()
      result = receive_message(AddKibitzUser_result)
      return
    end

    def checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image)
      send_checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image)
      return recv_checkCorrectDatahubLogin()
    end

    def send_checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image)
      send_message('checkCorrectDatahubLogin', CheckCorrectDatahubLogin_args, :username => username, :repository => repository, :table => table, :primary_key => primary_key, :title => title, :description => description, :image => image)
    end

    def recv_checkCorrectDatahubLogin()
      result = receive_message(CheckCorrectDatahubLogin_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'checkCorrectDatahubLogin failed: unknown result')
    end

    def checkRatingsColumn(username, table, repository, ratings_column)
      send_checkRatingsColumn(username, table, repository, ratings_column)
      return recv_checkRatingsColumn()
    end

    def send_checkRatingsColumn(username, table, repository, ratings_column)
      send_message('checkRatingsColumn', CheckRatingsColumn_args, :username => username, :table => table, :repository => repository, :ratings_column => ratings_column)
    end

    def recv_checkRatingsColumn()
      result = receive_message(CheckRatingsColumn_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'checkRatingsColumn failed: unknown result')
    end

    def getRecommenders(username)
      send_getRecommenders(username)
      return recv_getRecommenders()
    end

    def send_getRecommenders(username)
      send_message('getRecommenders', GetRecommenders_args, :username => username)
    end

    def recv_getRecommenders()
      result = receive_message(GetRecommenders_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRecommenders failed: unknown result')
    end

    def getProfilePicture(username)
      send_getProfilePicture(username)
      return recv_getProfilePicture()
    end

    def send_getProfilePicture(username)
      send_message('getProfilePicture', GetProfilePicture_args, :username => username)
    end

    def recv_getProfilePicture()
      result = receive_message(GetProfilePicture_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfilePicture failed: unknown result')
    end

    def saveFBProfilePic(username, fbUsername)
      send_saveFBProfilePic(username, fbUsername)
      recv_saveFBProfilePic()
    end

    def send_saveFBProfilePic(username, fbUsername)
      send_message('saveFBProfilePic', SaveFBProfilePic_args, :username => username, :fbUsername => fbUsername)
    end

    def recv_saveFBProfilePic()
      result = receive_message(SaveFBProfilePic_result)
      return
    end

    def deleteRecommender(clientKey)
      send_deleteRecommender(clientKey)
      recv_deleteRecommender()
    end

    def send_deleteRecommender(clientKey)
      send_message('deleteRecommender', DeleteRecommender_args, :clientKey => clientKey)
    end

    def recv_deleteRecommender()
      result = receive_message(DeleteRecommender_result)
      return
    end

    def updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn)
      send_updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn)
      recv_updateTemplate()
    end

    def send_updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn)
      send_message('updateTemplate', UpdateTemplate_args, :username => username, :primaryKey => primaryKey, :title => title, :description => description, :image => image, :video => video, :itemTypes => itemTypes, :displayItems => displayItems, :maxRatingVal => maxRatingVal, :numRecs => numRecs, :recommenderName => recommenderName, :clientKey => clientKey, :homepage => homepage, :creatorName => creatorName, :repoName => repoName, :tableName => tableName, :ratingsColumn => ratingsColumn)
    end

    def recv_updateTemplate()
      result = receive_message(UpdateTemplate_result)
      return
    end

    def configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol)
      send_configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol)
      recv_configurePrefilledUserRatings()
    end

    def send_configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol)
      send_message('configurePrefilledUserRatings', ConfigurePrefilledUserRatings_args, :username => username, :repoName => repoName, :primaryKey => primaryKey, :itemTable => itemTable, :tableName => tableName, :userIdCol => userIdCol, :itemIdCol => itemIdCol, :userRatingCol => userRatingCol)
    end

    def recv_configurePrefilledUserRatings()
      result = receive_message(ConfigurePrefilledUserRatings_result)
      return
    end

    def getTables(username, repo)
      send_getTables(username, repo)
      return recv_getTables()
    end

    def send_getTables(username, repo)
      send_message('getTables', GetTables_args, :username => username, :repo => repo)
    end

    def recv_getTables()
      result = receive_message(GetTables_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTables failed: unknown result')
    end

    def getColumns(username, repo, table)
      send_getColumns(username, repo, table)
      return recv_getColumns()
    end

    def send_getColumns(username, repo, table)
      send_message('getColumns', GetColumns_args, :username => username, :repo => repo, :table => table)
    end

    def recv_getColumns()
      result = receive_message(GetColumns_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getColumns failed: unknown result')
    end

    def getFirstRepo(username)
      send_getFirstRepo(username)
      return recv_getFirstRepo()
    end

    def send_getFirstRepo(username)
      send_message('getFirstRepo', GetFirstRepo_args, :username => username)
    end

    def recv_getFirstRepo()
      result = receive_message(GetFirstRepo_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFirstRepo failed: unknown result')
    end

    def getNumRepos(username)
      send_getNumRepos(username)
      return recv_getNumRepos()
    end

    def send_getNumRepos(username)
      send_message('getNumRepos', GetNumRepos_args, :username => username)
    end

    def recv_getNumRepos()
      result = receive_message(GetNumRepos_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNumRepos failed: unknown result')
    end

    def getAllRepos(username)
      send_getAllRepos(username)
      return recv_getAllRepos()
    end

    def send_getAllRepos(username)
      send_message('getAllRepos', GetAllRepos_args, :username => username)
    end

    def recv_getAllRepos()
      result = receive_message(GetAllRepos_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllRepos failed: unknown result')
    end

    def saveCSSData(path, data)
      send_saveCSSData(path, data)
      recv_saveCSSData()
    end

    def send_saveCSSData(path, data)
      send_message('saveCSSData', SaveCSSData_args, :path => path, :data => data)
    end

    def recv_saveCSSData()
      result = receive_message(SaveCSSData_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_createNewIndividualServer(seqid, iprot, oprot)
      args = read_args(iprot, CreateNewIndividualServer_args)
      result = CreateNewIndividualServer_result.new()
      @handler.createNewIndividualServer(args.key)
      write_result(result, oprot, 'createNewIndividualServer', seqid)
    end

    def process_terminateSession(seqid, iprot, oprot)
      args = read_args(iprot, TerminateSession_args)
      result = TerminateSession_result.new()
      @handler.terminateSession(args.key)
      write_result(result, oprot, 'terminateSession', seqid)
    end

    def process_makeRecommendation(seqid, iprot, oprot)
      args = read_args(iprot, MakeRecommendation_args)
      result = MakeRecommendation_result.new()
      result.success = @handler.makeRecommendation(args.key, args.userId, args.numRecs, args.isBoolean, args.displayColumns)
      write_result(result, oprot, 'makeRecommendation', seqid)
    end

    def process_makeItemBasedRecommendations(seqid, iprot, oprot)
      args = read_args(iprot, MakeItemBasedRecommendations_args)
      result = MakeItemBasedRecommendations_result.new()
      result.success = @handler.makeItemBasedRecommendations(args.key, args.userId, args.numRecs, args.displayColumns)
      write_result(result, oprot, 'makeItemBasedRecommendations', seqid)
    end

    def process_getPageItems(seqid, iprot, oprot)
      args = read_args(iprot, GetPageItems_args)
      result = GetPageItems_result.new()
      result.success = @handler.getPageItems(args.key, args.page, args.numPerPage, args.displayColumns)
      write_result(result, oprot, 'getPageItems', seqid)
    end

    def process_getItemCount(seqid, iprot, oprot)
      args = read_args(iprot, GetItemCount_args)
      result = GetItemCount_result.new()
      result.success = @handler.getItemCount(args.key)
      write_result(result, oprot, 'getItemCount', seqid)
    end

    def process_recordRatings(seqid, iprot, oprot)
      args = read_args(iprot, RecordRatings_args)
      result = RecordRatings_result.new()
      @handler.recordRatings(args.key, args.userId, args.itemId, args.rating)
      write_result(result, oprot, 'recordRatings', seqid)
    end

    def process_deleteRatings(seqid, iprot, oprot)
      args = read_args(iprot, DeleteRatings_args)
      result = DeleteRatings_result.new()
      @handler.deleteRatings(args.key, args.userId, args.itemId)
      write_result(result, oprot, 'deleteRatings', seqid)
    end

    def process_createNewUser(seqid, iprot, oprot)
      args = read_args(iprot, CreateNewUser_args)
      result = CreateNewUser_result.new()
      result.success = @handler.createNewUser(args.key, args.username, args.iskibitzuser)
      write_result(result, oprot, 'createNewUser', seqid)
    end

    def process_checkUsername(seqid, iprot, oprot)
      args = read_args(iprot, CheckUsername_args)
      result = CheckUsername_result.new()
      result.success = @handler.checkUsername(args.key, args.username, args.iskibitzuser)
      write_result(result, oprot, 'checkUsername', seqid)
    end

    def process_checkLogin(seqid, iprot, oprot)
      args = read_args(iprot, CheckLogin_args)
      result = CheckLogin_result.new()
      result.success = @handler.checkLogin(args.key, args.username, args.password, args.iskibitzuser)
      write_result(result, oprot, 'checkLogin', seqid)
    end

    def process_retrieveUserId(seqid, iprot, oprot)
      args = read_args(iprot, RetrieveUserId_args)
      result = RetrieveUserId_result.new()
      result.success = @handler.retrieveUserId(args.key, args.username)
      write_result(result, oprot, 'retrieveUserId', seqid)
    end

    def process_createNewRecommender(seqid, iprot, oprot)
      args = read_args(iprot, CreateNewRecommender_args)
      result = CreateNewRecommender_result.new()
      result.success = @handler.createNewRecommender(args.username, args.primaryKey, args.database, args.table, args.title, args.description, args.image, args.ratings_column, args.clientKey)
      write_result(result, oprot, 'createNewRecommender', seqid)
    end

    def process_getUserRatedItems(seqid, iprot, oprot)
      args = read_args(iprot, GetUserRatedItems_args)
      result = GetUserRatedItems_result.new()
      result.success = @handler.getUserRatedItems(args.key, args.userId, args.displayColumns)
      write_result(result, oprot, 'getUserRatedItems', seqid)
    end

    def process_initiateModel(seqid, iprot, oprot)
      args = read_args(iprot, InitiateModel_args)
      result = InitiateModel_result.new()
      @handler.initiateModel(args.key, args.table, args.username, args.database)
      write_result(result, oprot, 'initiateModel', seqid)
    end

    def process_getSearchItems(seqid, iprot, oprot)
      args = read_args(iprot, GetSearchItems_args)
      result = GetSearchItems_result.new()
      result.success = @handler.getSearchItems(args.table, args.query, args.columnsToSearch, args.displayColumns)
      write_result(result, oprot, 'getSearchItems', seqid)
    end

    def process_makeOverallRatingBasedOrRandomRecommendation(seqid, iprot, oprot)
      args = read_args(iprot, MakeOverallRatingBasedOrRandomRecommendation_args)
      result = MakeOverallRatingBasedOrRandomRecommendation_result.new()
      result.success = @handler.makeOverallRatingBasedOrRandomRecommendation(args.key, args.ratingColumnName, args.numRecs, args.displayColumns)
      write_result(result, oprot, 'makeOverallRatingBasedOrRandomRecommendation', seqid)
    end

    def process_addKibitzUser(seqid, iprot, oprot)
      args = read_args(iprot, AddKibitzUser_args)
      result = AddKibitzUser_result.new()
      @handler.addKibitzUser(args.email, args.password)
      write_result(result, oprot, 'addKibitzUser', seqid)
    end

    def process_checkCorrectDatahubLogin(seqid, iprot, oprot)
      args = read_args(iprot, CheckCorrectDatahubLogin_args)
      result = CheckCorrectDatahubLogin_result.new()
      result.success = @handler.checkCorrectDatahubLogin(args.username, args.repository, args.table, args.primary_key, args.title, args.description, args.image)
      write_result(result, oprot, 'checkCorrectDatahubLogin', seqid)
    end

    def process_checkRatingsColumn(seqid, iprot, oprot)
      args = read_args(iprot, CheckRatingsColumn_args)
      result = CheckRatingsColumn_result.new()
      result.success = @handler.checkRatingsColumn(args.username, args.table, args.repository, args.ratings_column)
      write_result(result, oprot, 'checkRatingsColumn', seqid)
    end

    def process_getRecommenders(seqid, iprot, oprot)
      args = read_args(iprot, GetRecommenders_args)
      result = GetRecommenders_result.new()
      result.success = @handler.getRecommenders(args.username)
      write_result(result, oprot, 'getRecommenders', seqid)
    end

    def process_getProfilePicture(seqid, iprot, oprot)
      args = read_args(iprot, GetProfilePicture_args)
      result = GetProfilePicture_result.new()
      result.success = @handler.getProfilePicture(args.username)
      write_result(result, oprot, 'getProfilePicture', seqid)
    end

    def process_saveFBProfilePic(seqid, iprot, oprot)
      args = read_args(iprot, SaveFBProfilePic_args)
      result = SaveFBProfilePic_result.new()
      @handler.saveFBProfilePic(args.username, args.fbUsername)
      write_result(result, oprot, 'saveFBProfilePic', seqid)
    end

    def process_deleteRecommender(seqid, iprot, oprot)
      args = read_args(iprot, DeleteRecommender_args)
      result = DeleteRecommender_result.new()
      @handler.deleteRecommender(args.clientKey)
      write_result(result, oprot, 'deleteRecommender', seqid)
    end

    def process_updateTemplate(seqid, iprot, oprot)
      args = read_args(iprot, UpdateTemplate_args)
      result = UpdateTemplate_result.new()
      @handler.updateTemplate(args.username, args.primaryKey, args.title, args.description, args.image, args.video, args.itemTypes, args.displayItems, args.maxRatingVal, args.numRecs, args.recommenderName, args.clientKey, args.homepage, args.creatorName, args.repoName, args.tableName, args.ratingsColumn)
      write_result(result, oprot, 'updateTemplate', seqid)
    end

    def process_configurePrefilledUserRatings(seqid, iprot, oprot)
      args = read_args(iprot, ConfigurePrefilledUserRatings_args)
      result = ConfigurePrefilledUserRatings_result.new()
      @handler.configurePrefilledUserRatings(args.username, args.repoName, args.primaryKey, args.itemTable, args.tableName, args.userIdCol, args.itemIdCol, args.userRatingCol)
      write_result(result, oprot, 'configurePrefilledUserRatings', seqid)
    end

    def process_getTables(seqid, iprot, oprot)
      args = read_args(iprot, GetTables_args)
      result = GetTables_result.new()
      result.success = @handler.getTables(args.username, args.repo)
      write_result(result, oprot, 'getTables', seqid)
    end

    def process_getColumns(seqid, iprot, oprot)
      args = read_args(iprot, GetColumns_args)
      result = GetColumns_result.new()
      result.success = @handler.getColumns(args.username, args.repo, args.table)
      write_result(result, oprot, 'getColumns', seqid)
    end

    def process_getFirstRepo(seqid, iprot, oprot)
      args = read_args(iprot, GetFirstRepo_args)
      result = GetFirstRepo_result.new()
      result.success = @handler.getFirstRepo(args.username)
      write_result(result, oprot, 'getFirstRepo', seqid)
    end

    def process_getNumRepos(seqid, iprot, oprot)
      args = read_args(iprot, GetNumRepos_args)
      result = GetNumRepos_result.new()
      result.success = @handler.getNumRepos(args.username)
      write_result(result, oprot, 'getNumRepos', seqid)
    end

    def process_getAllRepos(seqid, iprot, oprot)
      args = read_args(iprot, GetAllRepos_args)
      result = GetAllRepos_result.new()
      result.success = @handler.getAllRepos(args.username)
      write_result(result, oprot, 'getAllRepos', seqid)
    end

    def process_saveCSSData(seqid, iprot, oprot)
      args = read_args(iprot, SaveCSSData_args)
      result = SaveCSSData_result.new()
      @handler.saveCSSData(args.path, args.data)
      write_result(result, oprot, 'saveCSSData', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class CreateNewIndividualServer_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateNewIndividualServer_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TerminateSession_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TerminateSession_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeRecommendation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERID = 2
    NUMRECS = 3
    ISBOOLEAN = 4
    DISPLAYCOLUMNS = 5

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
      NUMRECS => {:type => ::Thrift::Types::I64, :name => 'numRecs'},
      ISBOOLEAN => {:type => ::Thrift::Types::BOOL, :name => 'isBoolean'},
      DISPLAYCOLUMNS => {:type => ::Thrift::Types::LIST, :name => 'displayColumns', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeRecommendation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Item}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeItemBasedRecommendations_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERID = 2
    NUMRECS = 3
    DISPLAYCOLUMNS = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
      NUMRECS => {:type => ::Thrift::Types::I64, :name => 'numRecs'},
      DISPLAYCOLUMNS => {:type => ::Thrift::Types::LIST, :name => 'displayColumns', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeItemBasedRecommendations_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Item}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPageItems_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    PAGE = 2
    NUMPERPAGE = 3
    DISPLAYCOLUMNS = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      PAGE => {:type => ::Thrift::Types::I64, :name => 'page'},
      NUMPERPAGE => {:type => ::Thrift::Types::I64, :name => 'numPerPage'},
      DISPLAYCOLUMNS => {:type => ::Thrift::Types::LIST, :name => 'displayColumns', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPageItems_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Item}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetItemCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetItemCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RecordRatings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERID = 2
    ITEMID = 3
    RATING = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
      ITEMID => {:type => ::Thrift::Types::I64, :name => 'itemId'},
      RATING => {:type => ::Thrift::Types::I64, :name => 'rating'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RecordRatings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteRatings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERID = 2
    ITEMID = 3

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
      ITEMID => {:type => ::Thrift::Types::I64, :name => 'itemId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteRatings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateNewUser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERNAME = 2
    ISKIBITZUSER = 3

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      ISKIBITZUSER => {:type => ::Thrift::Types::BOOL, :name => 'iskibitzuser'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateNewUser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckUsername_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERNAME = 2
    ISKIBITZUSER = 3

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      ISKIBITZUSER => {:type => ::Thrift::Types::BOOL, :name => 'iskibitzuser'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckUsername_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckLogin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERNAME = 2
    PASSWORD = 3
    ISKIBITZUSER = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
      ISKIBITZUSER => {:type => ::Thrift::Types::BOOL, :name => 'iskibitzuser'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckLogin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RetrieveUserId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERNAME = 2

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RetrieveUserId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateNewRecommender_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    PRIMARYKEY = 2
    DATABASE = 3
    TABLE = 5
    TITLE = 6
    DESCRIPTION = 7
    IMAGE = 8
    RATINGS_COLUMN = 9
    CLIENTKEY = 10

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      PRIMARYKEY => {:type => ::Thrift::Types::STRING, :name => 'primaryKey'},
      DATABASE => {:type => ::Thrift::Types::STRING, :name => 'database'},
      TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'},
      TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
      DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
      IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'},
      RATINGS_COLUMN => {:type => ::Thrift::Types::STRING, :name => 'ratings_column'},
      CLIENTKEY => {:type => ::Thrift::Types::STRING, :name => 'clientKey'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateNewRecommender_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserRatedItems_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    USERID = 2
    DISPLAYCOLUMNS = 3

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
      DISPLAYCOLUMNS => {:type => ::Thrift::Types::LIST, :name => 'displayColumns', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserRatedItems_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Item}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InitiateModel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    TABLE = 2
    USERNAME = 3
    DATABASE = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      DATABASE => {:type => ::Thrift::Types::STRING, :name => 'database'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InitiateModel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSearchItems_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TABLE = 1
    QUERY = 2
    COLUMNSTOSEARCH = 3
    DISPLAYCOLUMNS = 4

    FIELDS = {
      TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'},
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      COLUMNSTOSEARCH => {:type => ::Thrift::Types::LIST, :name => 'columnsToSearch', :element => {:type => ::Thrift::Types::STRING}},
      DISPLAYCOLUMNS => {:type => ::Thrift::Types::LIST, :name => 'displayColumns', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSearchItems_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Item}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeOverallRatingBasedOrRandomRecommendation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    RATINGCOLUMNNAME = 2
    NUMRECS = 3
    DISPLAYCOLUMNS = 4

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      RATINGCOLUMNNAME => {:type => ::Thrift::Types::STRING, :name => 'ratingColumnName'},
      NUMRECS => {:type => ::Thrift::Types::I64, :name => 'numRecs'},
      DISPLAYCOLUMNS => {:type => ::Thrift::Types::LIST, :name => 'displayColumns', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeOverallRatingBasedOrRandomRecommendation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Item}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKibitzUser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EMAIL = 1
    PASSWORD = 2

    FIELDS = {
      EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddKibitzUser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckCorrectDatahubLogin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    REPOSITORY = 2
    TABLE = 3
    PRIMARY_KEY = 4
    TITLE = 5
    DESCRIPTION = 6
    IMAGE = 7

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      REPOSITORY => {:type => ::Thrift::Types::STRING, :name => 'repository'},
      TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'},
      PRIMARY_KEY => {:type => ::Thrift::Types::STRING, :name => 'primary_key'},
      TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
      DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
      IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckCorrectDatahubLogin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckRatingsColumn_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    TABLE = 2
    REPOSITORY = 3
    RATINGS_COLUMN = 4

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'},
      REPOSITORY => {:type => ::Thrift::Types::STRING, :name => 'repository'},
      RATINGS_COLUMN => {:type => ::Thrift::Types::STRING, :name => 'ratings_column'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckRatingsColumn_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecommenders_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecommenders_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Recommender}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfilePicture_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfilePicture_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveFBProfilePic_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    FBUSERNAME = 2

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      FBUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'fbUsername'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveFBProfilePic_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteRecommender_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLIENTKEY = 1

    FIELDS = {
      CLIENTKEY => {:type => ::Thrift::Types::STRING, :name => 'clientKey'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteRecommender_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateTemplate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    PRIMARYKEY = 2
    TITLE = 3
    DESCRIPTION = 4
    IMAGE = 5
    VIDEO = 6
    ITEMTYPES = 7
    DISPLAYITEMS = 8
    MAXRATINGVAL = 9
    NUMRECS = 10
    RECOMMENDERNAME = 11
    CLIENTKEY = 12
    HOMEPAGE = 13
    CREATORNAME = 14
    REPONAME = 15
    TABLENAME = 16
    RATINGSCOLUMN = 17

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      PRIMARYKEY => {:type => ::Thrift::Types::STRING, :name => 'primaryKey'},
      TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
      DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
      IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'},
      VIDEO => {:type => ::Thrift::Types::STRING, :name => 'video'},
      ITEMTYPES => {:type => ::Thrift::Types::MAP, :name => 'itemTypes', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      DISPLAYITEMS => {:type => ::Thrift::Types::LIST, :name => 'displayItems', :element => {:type => ::Thrift::Types::STRING}},
      MAXRATINGVAL => {:type => ::Thrift::Types::I64, :name => 'maxRatingVal'},
      NUMRECS => {:type => ::Thrift::Types::I64, :name => 'numRecs'},
      RECOMMENDERNAME => {:type => ::Thrift::Types::STRING, :name => 'recommenderName'},
      CLIENTKEY => {:type => ::Thrift::Types::STRING, :name => 'clientKey'},
      HOMEPAGE => {:type => ::Thrift::Types::STRING, :name => 'homepage'},
      CREATORNAME => {:type => ::Thrift::Types::STRING, :name => 'creatorName'},
      REPONAME => {:type => ::Thrift::Types::STRING, :name => 'repoName'},
      TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
      RATINGSCOLUMN => {:type => ::Thrift::Types::STRING, :name => 'ratingsColumn'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateTemplate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConfigurePrefilledUserRatings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    REPONAME = 2
    PRIMARYKEY = 3
    ITEMTABLE = 4
    TABLENAME = 5
    USERIDCOL = 6
    ITEMIDCOL = 7
    USERRATINGCOL = 8

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      REPONAME => {:type => ::Thrift::Types::STRING, :name => 'repoName'},
      PRIMARYKEY => {:type => ::Thrift::Types::STRING, :name => 'primaryKey'},
      ITEMTABLE => {:type => ::Thrift::Types::STRING, :name => 'itemTable'},
      TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
      USERIDCOL => {:type => ::Thrift::Types::STRING, :name => 'userIdCol'},
      ITEMIDCOL => {:type => ::Thrift::Types::STRING, :name => 'itemIdCol'},
      USERRATINGCOL => {:type => ::Thrift::Types::STRING, :name => 'userRatingCol'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConfigurePrefilledUserRatings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTables_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    REPO = 2

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      REPO => {:type => ::Thrift::Types::STRING, :name => 'repo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTables_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetColumns_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1
    REPO = 2
    TABLE = 3

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      REPO => {:type => ::Thrift::Types::STRING, :name => 'repo'},
      TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetColumns_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFirstRepo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFirstRepo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNumRepos_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNumRepos_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllRepos_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USERNAME = 1

    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllRepos_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveCSSData_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PATH = 1
    DATA = 2

    FIELDS = {
      PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
      DATA => {:type => ::Thrift::Types::STRING, :name => 'data'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveCSSData_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

