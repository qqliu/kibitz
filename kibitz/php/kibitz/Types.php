<?php
namespace kibitz;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Item {
  static $_TSPEC;

  public $attributes = null;
  public $kibitz_generated_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'attributes',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'kibitz_generated_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['kibitz_generated_id'])) {
        $this->kibitz_generated_id = $vals['kibitz_generated_id'];
      }
    }
  }

  public function getName() {
    return 'Item';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->attributes = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->attributes[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->kibitz_generated_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Item');
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->attributes));
        {
          foreach ($this->attributes as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kibitz_generated_id !== null) {
      $xfer += $output->writeFieldBegin('kibitz_generated_id', TType::I64, 2);
      $xfer += $output->writeI64($this->kibitz_generated_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Recommender {
  static $_TSPEC;

  public $username = null;
  public $recommenderName = null;
  public $clientKey = null;
  public $homepage = null;
  public $repoName = null;
  public $title = null;
  public $description = null;
  public $image = null;
  public $video = null;
  public $itemTypes = null;
  public $displayItems = null;
  public $numRecs = null;
  public $maxRatingVal = null;
  public $ratingsColumn = null;
  public $primaryKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'recommenderName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'homepage',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'repoName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'image',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'video',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'itemTypes',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'displayItems',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'numRecs',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'maxRatingVal',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'ratingsColumn',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'primaryKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['recommenderName'])) {
        $this->recommenderName = $vals['recommenderName'];
      }
      if (isset($vals['clientKey'])) {
        $this->clientKey = $vals['clientKey'];
      }
      if (isset($vals['homepage'])) {
        $this->homepage = $vals['homepage'];
      }
      if (isset($vals['repoName'])) {
        $this->repoName = $vals['repoName'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['image'])) {
        $this->image = $vals['image'];
      }
      if (isset($vals['video'])) {
        $this->video = $vals['video'];
      }
      if (isset($vals['itemTypes'])) {
        $this->itemTypes = $vals['itemTypes'];
      }
      if (isset($vals['displayItems'])) {
        $this->displayItems = $vals['displayItems'];
      }
      if (isset($vals['numRecs'])) {
        $this->numRecs = $vals['numRecs'];
      }
      if (isset($vals['maxRatingVal'])) {
        $this->maxRatingVal = $vals['maxRatingVal'];
      }
      if (isset($vals['ratingsColumn'])) {
        $this->ratingsColumn = $vals['ratingsColumn'];
      }
      if (isset($vals['primaryKey'])) {
        $this->primaryKey = $vals['primaryKey'];
      }
    }
  }

  public function getName() {
    return 'Recommender';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommenderName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->homepage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->repoName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->video);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->itemTypes = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = '';
              $val15 = '';
              $xfer += $input->readString($key14);
              $xfer += $input->readString($val15);
              $this->itemTypes[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->displayItems = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readString($elem21);
              $this->displayItems []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numRecs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->maxRatingVal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ratingsColumn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->primaryKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Recommender');
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 1);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommenderName !== null) {
      $xfer += $output->writeFieldBegin('recommenderName', TType::STRING, 2);
      $xfer += $output->writeString($this->recommenderName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientKey !== null) {
      $xfer += $output->writeFieldBegin('clientKey', TType::STRING, 3);
      $xfer += $output->writeString($this->clientKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->homepage !== null) {
      $xfer += $output->writeFieldBegin('homepage', TType::STRING, 4);
      $xfer += $output->writeString($this->homepage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repoName !== null) {
      $xfer += $output->writeFieldBegin('repoName', TType::STRING, 5);
      $xfer += $output->writeString($this->repoName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 6);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 7);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image !== null) {
      $xfer += $output->writeFieldBegin('image', TType::STRING, 8);
      $xfer += $output->writeString($this->image);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->video !== null) {
      $xfer += $output->writeFieldBegin('video', TType::STRING, 9);
      $xfer += $output->writeString($this->video);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemTypes !== null) {
      if (!is_array($this->itemTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemTypes', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->itemTypes));
        {
          foreach ($this->itemTypes as $kiter22 => $viter23)
          {
            $xfer += $output->writeString($kiter22);
            $xfer += $output->writeString($viter23);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayItems !== null) {
      if (!is_array($this->displayItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('displayItems', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->displayItems));
        {
          foreach ($this->displayItems as $iter24)
          {
            $xfer += $output->writeString($iter24);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numRecs !== null) {
      $xfer += $output->writeFieldBegin('numRecs', TType::I64, 12);
      $xfer += $output->writeI64($this->numRecs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxRatingVal !== null) {
      $xfer += $output->writeFieldBegin('maxRatingVal', TType::I64, 13);
      $xfer += $output->writeI64($this->maxRatingVal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ratingsColumn !== null) {
      $xfer += $output->writeFieldBegin('ratingsColumn', TType::STRING, 14);
      $xfer += $output->writeString($this->ratingsColumn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->primaryKey !== null) {
      $xfer += $output->writeFieldBegin('primaryKey', TType::STRING, 15);
      $xfer += $output->writeString($this->primaryKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


