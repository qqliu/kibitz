(*
 Autogenerated by Thrift Compiler (0.9.2)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Kibitz_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class createNewIndividualServer_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "createNewIndividualServer_args.key") | Some _x51 -> _x51
  method set_key _x51 = _key <- Some _x51
  method unset_key = _key <- None
  method reset_key = _key <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewIndividualServer_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewIndividualServer_args (iprot : Protocol.t) =
  let _str54 = new createNewIndividualServer_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t55,_id56) = iprot#readFieldBegin in
        if _t55 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id56 with 
          | 1 -> (if _t55 = Protocol.T_STRING then
              _str54#set_key iprot#readString
            else
              iprot#skip _t55)
          | _ -> iprot#skip _t55);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str54

class createNewIndividualServer_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewIndividualServer_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewIndividualServer_result (iprot : Protocol.t) =
  let _str59 = new createNewIndividualServer_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t60,_id61) = iprot#readFieldBegin in
        if _t60 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id61 with 
          | _ -> iprot#skip _t60);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str59

class terminateSession_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "terminateSession_args.key") | Some _x62 -> _x62
  method set_key _x62 = _key <- Some _x62
  method unset_key = _key <- None
  method reset_key = _key <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "terminateSession_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_terminateSession_args (iprot : Protocol.t) =
  let _str65 = new terminateSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t66,_id67) = iprot#readFieldBegin in
        if _t66 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id67 with 
          | 1 -> (if _t66 = Protocol.T_STRING then
              _str65#set_key iprot#readString
            else
              iprot#skip _t66)
          | _ -> iprot#skip _t66);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str65

class terminateSession_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "terminateSession_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_terminateSession_result (iprot : Protocol.t) =
  let _str70 = new terminateSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t71,_id72) = iprot#readFieldBegin in
        if _t71 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id72 with 
          | _ -> iprot#skip _t71);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str70

class makeRecommendation_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "makeRecommendation_args.key") | Some _x73 -> _x73
  method set_key _x73 = _key <- Some _x73
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "makeRecommendation_args.userId") | Some _x74 -> _x74
  method set_userId _x74 = _userId <- Some _x74
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "makeRecommendation_args.numRecs") | Some _x75 -> _x75
  method set_numRecs _x75 = _numRecs <- Some _x75
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _isBoolean : bool option = None
  method get_isBoolean = _isBoolean
  method grab_isBoolean = match _isBoolean with None->raise (Field_empty "makeRecommendation_args.isBoolean") | Some _x76 -> _x76
  method set_isBoolean _x76 = _isBoolean <- Some _x76
  method unset_isBoolean = _isBoolean <- None
  method reset_isBoolean = _isBoolean <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "makeRecommendation_args.displayColumns") | Some _x77 -> _x77
  method set_displayColumns _x77 = _displayColumns <- Some _x77
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeRecommendation_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _isBoolean with None -> () | Some _v -> 
      oprot#writeFieldBegin("isBoolean",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,5);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter80 ->         oprot#writeString(_iter80);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeRecommendation_args (iprot : Protocol.t) =
  let _str81 = new makeRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t82,_id83) = iprot#readFieldBegin in
        if _t82 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id83 with 
          | 1 -> (if _t82 = Protocol.T_STRING then
              _str81#set_key iprot#readString
            else
              iprot#skip _t82)
          | 2 -> (if _t82 = Protocol.T_I64 then
              _str81#set_userId iprot#readI64
            else
              iprot#skip _t82)
          | 3 -> (if _t82 = Protocol.T_I64 then
              _str81#set_numRecs iprot#readI64
            else
              iprot#skip _t82)
          | 4 -> (if _t82 = Protocol.T_BOOL then
              _str81#set_isBoolean iprot#readBool
            else
              iprot#skip _t82)
          | 5 -> (if _t82 = Protocol.T_LIST then
              _str81#set_displayColumns 
                (let (_etype87,_size84) = iprot#readListBegin in
                  let _con88 = (Array.to_list (Array.init _size84 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con88)
            else
              iprot#skip _t82)
          | _ -> iprot#skip _t82);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str81

class makeRecommendation_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeRecommendation_result.success") | Some _x89 -> _x89
  method set_success _x89 = _success <- Some _x89
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeRecommendation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter92 ->         _iter92#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeRecommendation_result (iprot : Protocol.t) =
  let _str93 = new makeRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t94,_id95) = iprot#readFieldBegin in
        if _t94 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id95 with 
          | 0 -> (if _t94 = Protocol.T_LIST then
              _str93#set_success 
                (let (_etype99,_size96) = iprot#readListBegin in
                  let _con100 = (Array.to_list (Array.init _size96 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con100)
            else
              iprot#skip _t94)
          | _ -> iprot#skip _t94);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str93

class makeItemBasedRecommendations_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "makeItemBasedRecommendations_args.key") | Some _x101 -> _x101
  method set_key _x101 = _key <- Some _x101
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "makeItemBasedRecommendations_args.userId") | Some _x102 -> _x102
  method set_userId _x102 = _userId <- Some _x102
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "makeItemBasedRecommendations_args.numRecs") | Some _x103 -> _x103
  method set_numRecs _x103 = _numRecs <- Some _x103
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "makeItemBasedRecommendations_args.displayColumns") | Some _x104 -> _x104
  method set_displayColumns _x104 = _displayColumns <- Some _x104
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeItemBasedRecommendations_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter107 ->         oprot#writeString(_iter107);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeItemBasedRecommendations_args (iprot : Protocol.t) =
  let _str108 = new makeItemBasedRecommendations_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t109,_id110) = iprot#readFieldBegin in
        if _t109 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id110 with 
          | 1 -> (if _t109 = Protocol.T_STRING then
              _str108#set_key iprot#readString
            else
              iprot#skip _t109)
          | 2 -> (if _t109 = Protocol.T_I64 then
              _str108#set_userId iprot#readI64
            else
              iprot#skip _t109)
          | 3 -> (if _t109 = Protocol.T_I64 then
              _str108#set_numRecs iprot#readI64
            else
              iprot#skip _t109)
          | 4 -> (if _t109 = Protocol.T_LIST then
              _str108#set_displayColumns 
                (let (_etype114,_size111) = iprot#readListBegin in
                  let _con115 = (Array.to_list (Array.init _size111 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con115)
            else
              iprot#skip _t109)
          | _ -> iprot#skip _t109);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str108

class makeItemBasedRecommendations_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeItemBasedRecommendations_result.success") | Some _x116 -> _x116
  method set_success _x116 = _success <- Some _x116
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeItemBasedRecommendations_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter119 ->         _iter119#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeItemBasedRecommendations_result (iprot : Protocol.t) =
  let _str120 = new makeItemBasedRecommendations_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t121,_id122) = iprot#readFieldBegin in
        if _t121 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id122 with 
          | 0 -> (if _t121 = Protocol.T_LIST then
              _str120#set_success 
                (let (_etype126,_size123) = iprot#readListBegin in
                  let _con127 = (Array.to_list (Array.init _size123 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con127)
            else
              iprot#skip _t121)
          | _ -> iprot#skip _t121);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str120

class getPageItems_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "getPageItems_args.key") | Some _x128 -> _x128
  method set_key _x128 = _key <- Some _x128
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _page : Int64.t option = None
  method get_page = _page
  method grab_page = match _page with None->raise (Field_empty "getPageItems_args.page") | Some _x129 -> _x129
  method set_page _x129 = _page <- Some _x129
  method unset_page = _page <- None
  method reset_page = _page <- None

  val mutable _numPerPage : Int64.t option = None
  method get_numPerPage = _numPerPage
  method grab_numPerPage = match _numPerPage with None->raise (Field_empty "getPageItems_args.numPerPage") | Some _x130 -> _x130
  method set_numPerPage _x130 = _numPerPage <- Some _x130
  method unset_numPerPage = _numPerPage <- None
  method reset_numPerPage = _numPerPage <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "getPageItems_args.displayColumns") | Some _x131 -> _x131
  method set_displayColumns _x131 = _displayColumns <- Some _x131
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPageItems_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _page with None -> () | Some _v -> 
      oprot#writeFieldBegin("page",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numPerPage with None -> () | Some _v -> 
      oprot#writeFieldBegin("numPerPage",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter134 ->         oprot#writeString(_iter134);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPageItems_args (iprot : Protocol.t) =
  let _str135 = new getPageItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t136,_id137) = iprot#readFieldBegin in
        if _t136 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id137 with 
          | 1 -> (if _t136 = Protocol.T_STRING then
              _str135#set_key iprot#readString
            else
              iprot#skip _t136)
          | 2 -> (if _t136 = Protocol.T_I64 then
              _str135#set_page iprot#readI64
            else
              iprot#skip _t136)
          | 3 -> (if _t136 = Protocol.T_I64 then
              _str135#set_numPerPage iprot#readI64
            else
              iprot#skip _t136)
          | 4 -> (if _t136 = Protocol.T_LIST then
              _str135#set_displayColumns 
                (let (_etype141,_size138) = iprot#readListBegin in
                  let _con142 = (Array.to_list (Array.init _size138 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con142)
            else
              iprot#skip _t136)
          | _ -> iprot#skip _t136);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str135

class getPageItems_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPageItems_result.success") | Some _x143 -> _x143
  method set_success _x143 = _success <- Some _x143
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPageItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter146 ->         _iter146#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPageItems_result (iprot : Protocol.t) =
  let _str147 = new getPageItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t148,_id149) = iprot#readFieldBegin in
        if _t148 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id149 with 
          | 0 -> (if _t148 = Protocol.T_LIST then
              _str147#set_success 
                (let (_etype153,_size150) = iprot#readListBegin in
                  let _con154 = (Array.to_list (Array.init _size150 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con154)
            else
              iprot#skip _t148)
          | _ -> iprot#skip _t148);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str147

class getItemCount_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "getItemCount_args.key") | Some _x155 -> _x155
  method set_key _x155 = _key <- Some _x155
  method unset_key = _key <- None
  method reset_key = _key <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getItemCount_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getItemCount_args (iprot : Protocol.t) =
  let _str158 = new getItemCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t159,_id160) = iprot#readFieldBegin in
        if _t159 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id160 with 
          | 1 -> (if _t159 = Protocol.T_STRING then
              _str158#set_key iprot#readString
            else
              iprot#skip _t159)
          | _ -> iprot#skip _t159);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str158

class getItemCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getItemCount_result.success") | Some _x161 -> _x161
  method set_success _x161 = _success <- Some _x161
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getItemCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getItemCount_result (iprot : Protocol.t) =
  let _str164 = new getItemCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t165,_id166) = iprot#readFieldBegin in
        if _t165 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id166 with 
          | 0 -> (if _t165 = Protocol.T_I64 then
              _str164#set_success iprot#readI64
            else
              iprot#skip _t165)
          | _ -> iprot#skip _t165);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str164

class recordRatings_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "recordRatings_args.key") | Some _x167 -> _x167
  method set_key _x167 = _key <- Some _x167
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "recordRatings_args.userId") | Some _x168 -> _x168
  method set_userId _x168 = _userId <- Some _x168
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _itemId : Int64.t option = None
  method get_itemId = _itemId
  method grab_itemId = match _itemId with None->raise (Field_empty "recordRatings_args.itemId") | Some _x169 -> _x169
  method set_itemId _x169 = _itemId <- Some _x169
  method unset_itemId = _itemId <- None
  method reset_itemId = _itemId <- None

  val mutable _rating : Int64.t option = None
  method get_rating = _rating
  method grab_rating = match _rating with None->raise (Field_empty "recordRatings_args.rating") | Some _x170 -> _x170
  method set_rating _x170 = _rating <- Some _x170
  method unset_rating = _rating <- None
  method reset_rating = _rating <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "recordRatings_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _itemId with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemId",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _rating with None -> () | Some _v -> 
      oprot#writeFieldBegin("rating",Protocol.T_I64,4);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_recordRatings_args (iprot : Protocol.t) =
  let _str173 = new recordRatings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t174,_id175) = iprot#readFieldBegin in
        if _t174 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id175 with 
          | 1 -> (if _t174 = Protocol.T_STRING then
              _str173#set_key iprot#readString
            else
              iprot#skip _t174)
          | 2 -> (if _t174 = Protocol.T_I64 then
              _str173#set_userId iprot#readI64
            else
              iprot#skip _t174)
          | 3 -> (if _t174 = Protocol.T_I64 then
              _str173#set_itemId iprot#readI64
            else
              iprot#skip _t174)
          | 4 -> (if _t174 = Protocol.T_I64 then
              _str173#set_rating iprot#readI64
            else
              iprot#skip _t174)
          | _ -> iprot#skip _t174);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str173

class recordRatings_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "recordRatings_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_recordRatings_result (iprot : Protocol.t) =
  let _str178 = new recordRatings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t179,_id180) = iprot#readFieldBegin in
        if _t179 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id180 with 
          | _ -> iprot#skip _t179);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str178

class deleteRatings_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "deleteRatings_args.key") | Some _x181 -> _x181
  method set_key _x181 = _key <- Some _x181
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "deleteRatings_args.userId") | Some _x182 -> _x182
  method set_userId _x182 = _userId <- Some _x182
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _itemId : Int64.t option = None
  method get_itemId = _itemId
  method grab_itemId = match _itemId with None->raise (Field_empty "deleteRatings_args.itemId") | Some _x183 -> _x183
  method set_itemId _x183 = _itemId <- Some _x183
  method unset_itemId = _itemId <- None
  method reset_itemId = _itemId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRatings_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _itemId with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemId",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRatings_args (iprot : Protocol.t) =
  let _str186 = new deleteRatings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t187,_id188) = iprot#readFieldBegin in
        if _t187 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id188 with 
          | 1 -> (if _t187 = Protocol.T_STRING then
              _str186#set_key iprot#readString
            else
              iprot#skip _t187)
          | 2 -> (if _t187 = Protocol.T_I64 then
              _str186#set_userId iprot#readI64
            else
              iprot#skip _t187)
          | 3 -> (if _t187 = Protocol.T_I64 then
              _str186#set_itemId iprot#readI64
            else
              iprot#skip _t187)
          | _ -> iprot#skip _t187);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str186

class deleteRatings_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRatings_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRatings_result (iprot : Protocol.t) =
  let _str191 = new deleteRatings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t192,_id193) = iprot#readFieldBegin in
        if _t192 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id193 with 
          | _ -> iprot#skip _t192);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str191

class createNewUser_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "createNewUser_args.key") | Some _x194 -> _x194
  method set_key _x194 = _key <- Some _x194
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "createNewUser_args.username") | Some _x195 -> _x195
  method set_username _x195 = _username <- Some _x195
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _iskibitzuser : bool option = None
  method get_iskibitzuser = _iskibitzuser
  method grab_iskibitzuser = match _iskibitzuser with None->raise (Field_empty "createNewUser_args.iskibitzuser") | Some _x196 -> _x196
  method set_iskibitzuser _x196 = _iskibitzuser <- Some _x196
  method unset_iskibitzuser = _iskibitzuser <- None
  method reset_iskibitzuser = _iskibitzuser <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewUser_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _iskibitzuser with None -> () | Some _v -> 
      oprot#writeFieldBegin("iskibitzuser",Protocol.T_BOOL,3);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewUser_args (iprot : Protocol.t) =
  let _str199 = new createNewUser_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t200,_id201) = iprot#readFieldBegin in
        if _t200 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id201 with 
          | 1 -> (if _t200 = Protocol.T_STRING then
              _str199#set_key iprot#readString
            else
              iprot#skip _t200)
          | 2 -> (if _t200 = Protocol.T_STRING then
              _str199#set_username iprot#readString
            else
              iprot#skip _t200)
          | 3 -> (if _t200 = Protocol.T_BOOL then
              _str199#set_iskibitzuser iprot#readBool
            else
              iprot#skip _t200)
          | _ -> iprot#skip _t200);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str199

class createNewUser_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createNewUser_result.success") | Some _x202 -> _x202
  method set_success _x202 = _success <- Some _x202
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewUser_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewUser_result (iprot : Protocol.t) =
  let _str205 = new createNewUser_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t206,_id207) = iprot#readFieldBegin in
        if _t206 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id207 with 
          | 0 -> (if _t206 = Protocol.T_STRING then
              _str205#set_success iprot#readString
            else
              iprot#skip _t206)
          | _ -> iprot#skip _t206);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str205

class checkUsername_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "checkUsername_args.key") | Some _x208 -> _x208
  method set_key _x208 = _key <- Some _x208
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkUsername_args.username") | Some _x209 -> _x209
  method set_username _x209 = _username <- Some _x209
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _iskibitzuser : bool option = None
  method get_iskibitzuser = _iskibitzuser
  method grab_iskibitzuser = match _iskibitzuser with None->raise (Field_empty "checkUsername_args.iskibitzuser") | Some _x210 -> _x210
  method set_iskibitzuser _x210 = _iskibitzuser <- Some _x210
  method unset_iskibitzuser = _iskibitzuser <- None
  method reset_iskibitzuser = _iskibitzuser <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkUsername_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _iskibitzuser with None -> () | Some _v -> 
      oprot#writeFieldBegin("iskibitzuser",Protocol.T_BOOL,3);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkUsername_args (iprot : Protocol.t) =
  let _str213 = new checkUsername_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t214,_id215) = iprot#readFieldBegin in
        if _t214 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id215 with 
          | 1 -> (if _t214 = Protocol.T_STRING then
              _str213#set_key iprot#readString
            else
              iprot#skip _t214)
          | 2 -> (if _t214 = Protocol.T_STRING then
              _str213#set_username iprot#readString
            else
              iprot#skip _t214)
          | 3 -> (if _t214 = Protocol.T_BOOL then
              _str213#set_iskibitzuser iprot#readBool
            else
              iprot#skip _t214)
          | _ -> iprot#skip _t214);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str213

class checkUsername_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkUsername_result.success") | Some _x216 -> _x216
  method set_success _x216 = _success <- Some _x216
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkUsername_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkUsername_result (iprot : Protocol.t) =
  let _str219 = new checkUsername_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t220,_id221) = iprot#readFieldBegin in
        if _t220 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id221 with 
          | 0 -> (if _t220 = Protocol.T_BOOL then
              _str219#set_success iprot#readBool
            else
              iprot#skip _t220)
          | _ -> iprot#skip _t220);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str219

class checkLogin_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "checkLogin_args.key") | Some _x222 -> _x222
  method set_key _x222 = _key <- Some _x222
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkLogin_args.username") | Some _x223 -> _x223
  method set_username _x223 = _username <- Some _x223
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "checkLogin_args.password") | Some _x224 -> _x224
  method set_password _x224 = _password <- Some _x224
  method unset_password = _password <- None
  method reset_password = _password <- None

  val mutable _iskibitzuser : bool option = None
  method get_iskibitzuser = _iskibitzuser
  method grab_iskibitzuser = match _iskibitzuser with None->raise (Field_empty "checkLogin_args.iskibitzuser") | Some _x225 -> _x225
  method set_iskibitzuser _x225 = _iskibitzuser <- Some _x225
  method unset_iskibitzuser = _iskibitzuser <- None
  method reset_iskibitzuser = _iskibitzuser <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkLogin_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _iskibitzuser with None -> () | Some _v -> 
      oprot#writeFieldBegin("iskibitzuser",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkLogin_args (iprot : Protocol.t) =
  let _str228 = new checkLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t229,_id230) = iprot#readFieldBegin in
        if _t229 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id230 with 
          | 1 -> (if _t229 = Protocol.T_STRING then
              _str228#set_key iprot#readString
            else
              iprot#skip _t229)
          | 2 -> (if _t229 = Protocol.T_STRING then
              _str228#set_username iprot#readString
            else
              iprot#skip _t229)
          | 3 -> (if _t229 = Protocol.T_STRING then
              _str228#set_password iprot#readString
            else
              iprot#skip _t229)
          | 4 -> (if _t229 = Protocol.T_BOOL then
              _str228#set_iskibitzuser iprot#readBool
            else
              iprot#skip _t229)
          | _ -> iprot#skip _t229);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str228

class checkLogin_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkLogin_result.success") | Some _x231 -> _x231
  method set_success _x231 = _success <- Some _x231
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkLogin_result (iprot : Protocol.t) =
  let _str234 = new checkLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t235,_id236) = iprot#readFieldBegin in
        if _t235 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id236 with 
          | 0 -> (if _t235 = Protocol.T_BOOL then
              _str234#set_success iprot#readBool
            else
              iprot#skip _t235)
          | _ -> iprot#skip _t235);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str234

class retrieveUserId_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "retrieveUserId_args.key") | Some _x237 -> _x237
  method set_key _x237 = _key <- Some _x237
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "retrieveUserId_args.username") | Some _x238 -> _x238
  method set_username _x238 = _username <- Some _x238
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "retrieveUserId_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_retrieveUserId_args (iprot : Protocol.t) =
  let _str241 = new retrieveUserId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t242,_id243) = iprot#readFieldBegin in
        if _t242 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id243 with 
          | 1 -> (if _t242 = Protocol.T_STRING then
              _str241#set_key iprot#readString
            else
              iprot#skip _t242)
          | 2 -> (if _t242 = Protocol.T_STRING then
              _str241#set_username iprot#readString
            else
              iprot#skip _t242)
          | _ -> iprot#skip _t242);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str241

class retrieveUserId_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "retrieveUserId_result.success") | Some _x244 -> _x244
  method set_success _x244 = _success <- Some _x244
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "retrieveUserId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_retrieveUserId_result (iprot : Protocol.t) =
  let _str247 = new retrieveUserId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t248,_id249) = iprot#readFieldBegin in
        if _t248 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id249 with 
          | 0 -> (if _t248 = Protocol.T_I64 then
              _str247#set_success iprot#readI64
            else
              iprot#skip _t248)
          | _ -> iprot#skip _t248);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str247

class createNewRecommender_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "createNewRecommender_args.username") | Some _x250 -> _x250
  method set_username _x250 = _username <- Some _x250
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _primaryKey : string option = None
  method get_primaryKey = _primaryKey
  method grab_primaryKey = match _primaryKey with None->raise (Field_empty "createNewRecommender_args.primaryKey") | Some _x251 -> _x251
  method set_primaryKey _x251 = _primaryKey <- Some _x251
  method unset_primaryKey = _primaryKey <- None
  method reset_primaryKey = _primaryKey <- None

  val mutable _database : string option = None
  method get_database = _database
  method grab_database = match _database with None->raise (Field_empty "createNewRecommender_args.database") | Some _x252 -> _x252
  method set_database _x252 = _database <- Some _x252
  method unset_database = _database <- None
  method reset_database = _database <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "createNewRecommender_args.table") | Some _x253 -> _x253
  method set_table _x253 = _table <- Some _x253
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _title : string option = None
  method get_title = _title
  method grab_title = match _title with None->raise (Field_empty "createNewRecommender_args.title") | Some _x254 -> _x254
  method set_title _x254 = _title <- Some _x254
  method unset_title = _title <- None
  method reset_title = _title <- None

  val mutable _description : string option = None
  method get_description = _description
  method grab_description = match _description with None->raise (Field_empty "createNewRecommender_args.description") | Some _x255 -> _x255
  method set_description _x255 = _description <- Some _x255
  method unset_description = _description <- None
  method reset_description = _description <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "createNewRecommender_args.image") | Some _x256 -> _x256
  method set_image _x256 = _image <- Some _x256
  method unset_image = _image <- None
  method reset_image = _image <- None

  val mutable _ratings_column : string option = None
  method get_ratings_column = _ratings_column
  method grab_ratings_column = match _ratings_column with None->raise (Field_empty "createNewRecommender_args.ratings_column") | Some _x257 -> _x257
  method set_ratings_column _x257 = _ratings_column <- Some _x257
  method unset_ratings_column = _ratings_column <- None
  method reset_ratings_column = _ratings_column <- None

  val mutable _clientKey : string option = None
  method get_clientKey = _clientKey
  method grab_clientKey = match _clientKey with None->raise (Field_empty "createNewRecommender_args.clientKey") | Some _x258 -> _x258
  method set_clientKey _x258 = _clientKey <- Some _x258
  method unset_clientKey = _clientKey <- None
  method reset_clientKey = _clientKey <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewRecommender_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primaryKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("primaryKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _database with None -> () | Some _v -> 
      oprot#writeFieldBegin("database",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _title with None -> () | Some _v -> 
      oprot#writeFieldBegin("title",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _description with None -> () | Some _v -> 
      oprot#writeFieldBegin("description",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratings_column with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratings_column",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _clientKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("clientKey",Protocol.T_STRING,10);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewRecommender_args (iprot : Protocol.t) =
  let _str261 = new createNewRecommender_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t262,_id263) = iprot#readFieldBegin in
        if _t262 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id263 with 
          | 1 -> (if _t262 = Protocol.T_STRING then
              _str261#set_username iprot#readString
            else
              iprot#skip _t262)
          | 2 -> (if _t262 = Protocol.T_STRING then
              _str261#set_primaryKey iprot#readString
            else
              iprot#skip _t262)
          | 3 -> (if _t262 = Protocol.T_STRING then
              _str261#set_database iprot#readString
            else
              iprot#skip _t262)
          | 5 -> (if _t262 = Protocol.T_STRING then
              _str261#set_table iprot#readString
            else
              iprot#skip _t262)
          | 6 -> (if _t262 = Protocol.T_STRING then
              _str261#set_title iprot#readString
            else
              iprot#skip _t262)
          | 7 -> (if _t262 = Protocol.T_STRING then
              _str261#set_description iprot#readString
            else
              iprot#skip _t262)
          | 8 -> (if _t262 = Protocol.T_STRING then
              _str261#set_image iprot#readString
            else
              iprot#skip _t262)
          | 9 -> (if _t262 = Protocol.T_STRING then
              _str261#set_ratings_column iprot#readString
            else
              iprot#skip _t262)
          | 10 -> (if _t262 = Protocol.T_STRING then
              _str261#set_clientKey iprot#readString
            else
              iprot#skip _t262)
          | _ -> iprot#skip _t262);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str261

class createNewRecommender_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createNewRecommender_result.success") | Some _x264 -> _x264
  method set_success _x264 = _success <- Some _x264
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewRecommender_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewRecommender_result (iprot : Protocol.t) =
  let _str267 = new createNewRecommender_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t268,_id269) = iprot#readFieldBegin in
        if _t268 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id269 with 
          | 0 -> (if _t268 = Protocol.T_BOOL then
              _str267#set_success iprot#readBool
            else
              iprot#skip _t268)
          | _ -> iprot#skip _t268);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str267

class getUserRatedItems_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "getUserRatedItems_args.key") | Some _x270 -> _x270
  method set_key _x270 = _key <- Some _x270
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "getUserRatedItems_args.userId") | Some _x271 -> _x271
  method set_userId _x271 = _userId <- Some _x271
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "getUserRatedItems_args.displayColumns") | Some _x272 -> _x272
  method set_displayColumns _x272 = _displayColumns <- Some _x272
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserRatedItems_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter275 ->         oprot#writeString(_iter275);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserRatedItems_args (iprot : Protocol.t) =
  let _str276 = new getUserRatedItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t277,_id278) = iprot#readFieldBegin in
        if _t277 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id278 with 
          | 1 -> (if _t277 = Protocol.T_STRING then
              _str276#set_key iprot#readString
            else
              iprot#skip _t277)
          | 2 -> (if _t277 = Protocol.T_I64 then
              _str276#set_userId iprot#readI64
            else
              iprot#skip _t277)
          | 3 -> (if _t277 = Protocol.T_LIST then
              _str276#set_displayColumns 
                (let (_etype282,_size279) = iprot#readListBegin in
                  let _con283 = (Array.to_list (Array.init _size279 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con283)
            else
              iprot#skip _t277)
          | _ -> iprot#skip _t277);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str276

class getUserRatedItems_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserRatedItems_result.success") | Some _x284 -> _x284
  method set_success _x284 = _success <- Some _x284
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserRatedItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter287 ->         _iter287#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserRatedItems_result (iprot : Protocol.t) =
  let _str288 = new getUserRatedItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t289,_id290) = iprot#readFieldBegin in
        if _t289 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id290 with 
          | 0 -> (if _t289 = Protocol.T_LIST then
              _str288#set_success 
                (let (_etype294,_size291) = iprot#readListBegin in
                  let _con295 = (Array.to_list (Array.init _size291 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con295)
            else
              iprot#skip _t289)
          | _ -> iprot#skip _t289);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str288

class initiateModel_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "initiateModel_args.key") | Some _x296 -> _x296
  method set_key _x296 = _key <- Some _x296
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "initiateModel_args.table") | Some _x297 -> _x297
  method set_table _x297 = _table <- Some _x297
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "initiateModel_args.username") | Some _x298 -> _x298
  method set_username _x298 = _username <- Some _x298
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _database : string option = None
  method get_database = _database
  method grab_database = match _database with None->raise (Field_empty "initiateModel_args.database") | Some _x299 -> _x299
  method set_database _x299 = _database <- Some _x299
  method unset_database = _database <- None
  method reset_database = _database <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "initiateModel_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _database with None -> () | Some _v -> 
      oprot#writeFieldBegin("database",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_initiateModel_args (iprot : Protocol.t) =
  let _str302 = new initiateModel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t303,_id304) = iprot#readFieldBegin in
        if _t303 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id304 with 
          | 1 -> (if _t303 = Protocol.T_STRING then
              _str302#set_key iprot#readString
            else
              iprot#skip _t303)
          | 2 -> (if _t303 = Protocol.T_STRING then
              _str302#set_table iprot#readString
            else
              iprot#skip _t303)
          | 3 -> (if _t303 = Protocol.T_STRING then
              _str302#set_username iprot#readString
            else
              iprot#skip _t303)
          | 4 -> (if _t303 = Protocol.T_STRING then
              _str302#set_database iprot#readString
            else
              iprot#skip _t303)
          | _ -> iprot#skip _t303);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str302

class initiateModel_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "initiateModel_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_initiateModel_result (iprot : Protocol.t) =
  let _str307 = new initiateModel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t308,_id309) = iprot#readFieldBegin in
        if _t308 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id309 with 
          | _ -> iprot#skip _t308);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str307

class getSearchItems_args =
object (self)
  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "getSearchItems_args.table") | Some _x310 -> _x310
  method set_table _x310 = _table <- Some _x310
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _query : string option = None
  method get_query = _query
  method grab_query = match _query with None->raise (Field_empty "getSearchItems_args.query") | Some _x311 -> _x311
  method set_query _x311 = _query <- Some _x311
  method unset_query = _query <- None
  method reset_query = _query <- None

  val mutable _columnsToSearch : string list option = None
  method get_columnsToSearch = _columnsToSearch
  method grab_columnsToSearch = match _columnsToSearch with None->raise (Field_empty "getSearchItems_args.columnsToSearch") | Some _x312 -> _x312
  method set_columnsToSearch _x312 = _columnsToSearch <- Some _x312
  method unset_columnsToSearch = _columnsToSearch <- None
  method reset_columnsToSearch = _columnsToSearch <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "getSearchItems_args.displayColumns") | Some _x313 -> _x313
  method set_displayColumns _x313 = _displayColumns <- Some _x313
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSearchItems_args";
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _query with None -> () | Some _v -> 
      oprot#writeFieldBegin("query",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _columnsToSearch with None -> () | Some _v -> 
      oprot#writeFieldBegin("columnsToSearch",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter316 ->         oprot#writeString(_iter316);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter317 ->         oprot#writeString(_iter317);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSearchItems_args (iprot : Protocol.t) =
  let _str318 = new getSearchItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t319,_id320) = iprot#readFieldBegin in
        if _t319 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id320 with 
          | 1 -> (if _t319 = Protocol.T_STRING then
              _str318#set_table iprot#readString
            else
              iprot#skip _t319)
          | 2 -> (if _t319 = Protocol.T_STRING then
              _str318#set_query iprot#readString
            else
              iprot#skip _t319)
          | 3 -> (if _t319 = Protocol.T_LIST then
              _str318#set_columnsToSearch 
                (let (_etype324,_size321) = iprot#readListBegin in
                  let _con325 = (Array.to_list (Array.init _size321 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con325)
            else
              iprot#skip _t319)
          | 4 -> (if _t319 = Protocol.T_LIST then
              _str318#set_displayColumns 
                (let (_etype329,_size326) = iprot#readListBegin in
                  let _con330 = (Array.to_list (Array.init _size326 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con330)
            else
              iprot#skip _t319)
          | _ -> iprot#skip _t319);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str318

class getSearchItems_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSearchItems_result.success") | Some _x331 -> _x331
  method set_success _x331 = _success <- Some _x331
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSearchItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter334 ->         _iter334#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSearchItems_result (iprot : Protocol.t) =
  let _str335 = new getSearchItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t336,_id337) = iprot#readFieldBegin in
        if _t336 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id337 with 
          | 0 -> (if _t336 = Protocol.T_LIST then
              _str335#set_success 
                (let (_etype341,_size338) = iprot#readListBegin in
                  let _con342 = (Array.to_list (Array.init _size338 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con342)
            else
              iprot#skip _t336)
          | _ -> iprot#skip _t336);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str335

class makeOverallRatingBasedOrRandomRecommendation_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.key") | Some _x343 -> _x343
  method set_key _x343 = _key <- Some _x343
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _ratingColumnName : string option = None
  method get_ratingColumnName = _ratingColumnName
  method grab_ratingColumnName = match _ratingColumnName with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.ratingColumnName") | Some _x344 -> _x344
  method set_ratingColumnName _x344 = _ratingColumnName <- Some _x344
  method unset_ratingColumnName = _ratingColumnName <- None
  method reset_ratingColumnName = _ratingColumnName <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.numRecs") | Some _x345 -> _x345
  method set_numRecs _x345 = _numRecs <- Some _x345
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.displayColumns") | Some _x346 -> _x346
  method set_displayColumns _x346 = _displayColumns <- Some _x346
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeOverallRatingBasedOrRandomRecommendation_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratingColumnName with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratingColumnName",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter349 ->         oprot#writeString(_iter349);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeOverallRatingBasedOrRandomRecommendation_args (iprot : Protocol.t) =
  let _str350 = new makeOverallRatingBasedOrRandomRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t351,_id352) = iprot#readFieldBegin in
        if _t351 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id352 with 
          | 1 -> (if _t351 = Protocol.T_STRING then
              _str350#set_key iprot#readString
            else
              iprot#skip _t351)
          | 2 -> (if _t351 = Protocol.T_STRING then
              _str350#set_ratingColumnName iprot#readString
            else
              iprot#skip _t351)
          | 3 -> (if _t351 = Protocol.T_I64 then
              _str350#set_numRecs iprot#readI64
            else
              iprot#skip _t351)
          | 4 -> (if _t351 = Protocol.T_LIST then
              _str350#set_displayColumns 
                (let (_etype356,_size353) = iprot#readListBegin in
                  let _con357 = (Array.to_list (Array.init _size353 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con357)
            else
              iprot#skip _t351)
          | _ -> iprot#skip _t351);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str350

class makeOverallRatingBasedOrRandomRecommendation_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_result.success") | Some _x358 -> _x358
  method set_success _x358 = _success <- Some _x358
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeOverallRatingBasedOrRandomRecommendation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter361 ->         _iter361#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeOverallRatingBasedOrRandomRecommendation_result (iprot : Protocol.t) =
  let _str362 = new makeOverallRatingBasedOrRandomRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t363,_id364) = iprot#readFieldBegin in
        if _t363 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id364 with 
          | 0 -> (if _t363 = Protocol.T_LIST then
              _str362#set_success 
                (let (_etype368,_size365) = iprot#readListBegin in
                  let _con369 = (Array.to_list (Array.init _size365 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con369)
            else
              iprot#skip _t363)
          | _ -> iprot#skip _t363);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str362

class addKibitzUser_args =
object (self)
  val mutable _email : string option = None
  method get_email = _email
  method grab_email = match _email with None->raise (Field_empty "addKibitzUser_args.email") | Some _x370 -> _x370
  method set_email _x370 = _email <- Some _x370
  method unset_email = _email <- None
  method reset_email = _email <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "addKibitzUser_args.password") | Some _x371 -> _x371
  method set_password _x371 = _password <- Some _x371
  method unset_password = _password <- None
  method reset_password = _password <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addKibitzUser_args";
    (match _email with None -> () | Some _v -> 
      oprot#writeFieldBegin("email",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addKibitzUser_args (iprot : Protocol.t) =
  let _str374 = new addKibitzUser_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t375,_id376) = iprot#readFieldBegin in
        if _t375 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id376 with 
          | 1 -> (if _t375 = Protocol.T_STRING then
              _str374#set_email iprot#readString
            else
              iprot#skip _t375)
          | 2 -> (if _t375 = Protocol.T_STRING then
              _str374#set_password iprot#readString
            else
              iprot#skip _t375)
          | _ -> iprot#skip _t375);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str374

class addKibitzUser_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addKibitzUser_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addKibitzUser_result (iprot : Protocol.t) =
  let _str379 = new addKibitzUser_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t380,_id381) = iprot#readFieldBegin in
        if _t380 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id381 with 
          | _ -> iprot#skip _t380);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str379

class checkCorrectDatahubLogin_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkCorrectDatahubLogin_args.username") | Some _x382 -> _x382
  method set_username _x382 = _username <- Some _x382
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repository : string option = None
  method get_repository = _repository
  method grab_repository = match _repository with None->raise (Field_empty "checkCorrectDatahubLogin_args.repository") | Some _x383 -> _x383
  method set_repository _x383 = _repository <- Some _x383
  method unset_repository = _repository <- None
  method reset_repository = _repository <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "checkCorrectDatahubLogin_args.table") | Some _x384 -> _x384
  method set_table _x384 = _table <- Some _x384
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _primary_key : string option = None
  method get_primary_key = _primary_key
  method grab_primary_key = match _primary_key with None->raise (Field_empty "checkCorrectDatahubLogin_args.primary_key") | Some _x385 -> _x385
  method set_primary_key _x385 = _primary_key <- Some _x385
  method unset_primary_key = _primary_key <- None
  method reset_primary_key = _primary_key <- None

  val mutable _title : string option = None
  method get_title = _title
  method grab_title = match _title with None->raise (Field_empty "checkCorrectDatahubLogin_args.title") | Some _x386 -> _x386
  method set_title _x386 = _title <- Some _x386
  method unset_title = _title <- None
  method reset_title = _title <- None

  val mutable _description : string option = None
  method get_description = _description
  method grab_description = match _description with None->raise (Field_empty "checkCorrectDatahubLogin_args.description") | Some _x387 -> _x387
  method set_description _x387 = _description <- Some _x387
  method unset_description = _description <- None
  method reset_description = _description <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "checkCorrectDatahubLogin_args.image") | Some _x388 -> _x388
  method set_image _x388 = _image <- Some _x388
  method unset_image = _image <- None
  method reset_image = _image <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCorrectDatahubLogin_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repository with None -> () | Some _v -> 
      oprot#writeFieldBegin("repository",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primary_key with None -> () | Some _v -> 
      oprot#writeFieldBegin("primary_key",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _title with None -> () | Some _v -> 
      oprot#writeFieldBegin("title",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _description with None -> () | Some _v -> 
      oprot#writeFieldBegin("description",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCorrectDatahubLogin_args (iprot : Protocol.t) =
  let _str391 = new checkCorrectDatahubLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t392,_id393) = iprot#readFieldBegin in
        if _t392 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id393 with 
          | 1 -> (if _t392 = Protocol.T_STRING then
              _str391#set_username iprot#readString
            else
              iprot#skip _t392)
          | 2 -> (if _t392 = Protocol.T_STRING then
              _str391#set_repository iprot#readString
            else
              iprot#skip _t392)
          | 3 -> (if _t392 = Protocol.T_STRING then
              _str391#set_table iprot#readString
            else
              iprot#skip _t392)
          | 4 -> (if _t392 = Protocol.T_STRING then
              _str391#set_primary_key iprot#readString
            else
              iprot#skip _t392)
          | 5 -> (if _t392 = Protocol.T_STRING then
              _str391#set_title iprot#readString
            else
              iprot#skip _t392)
          | 6 -> (if _t392 = Protocol.T_STRING then
              _str391#set_description iprot#readString
            else
              iprot#skip _t392)
          | 7 -> (if _t392 = Protocol.T_STRING then
              _str391#set_image iprot#readString
            else
              iprot#skip _t392)
          | _ -> iprot#skip _t392);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str391

class checkCorrectDatahubLogin_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkCorrectDatahubLogin_result.success") | Some _x394 -> _x394
  method set_success _x394 = _success <- Some _x394
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCorrectDatahubLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCorrectDatahubLogin_result (iprot : Protocol.t) =
  let _str397 = new checkCorrectDatahubLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t398,_id399) = iprot#readFieldBegin in
        if _t398 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id399 with 
          | 0 -> (if _t398 = Protocol.T_BOOL then
              _str397#set_success iprot#readBool
            else
              iprot#skip _t398)
          | _ -> iprot#skip _t398);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str397

class checkRatingsColumn_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkRatingsColumn_args.username") | Some _x400 -> _x400
  method set_username _x400 = _username <- Some _x400
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "checkRatingsColumn_args.table") | Some _x401 -> _x401
  method set_table _x401 = _table <- Some _x401
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _repository : string option = None
  method get_repository = _repository
  method grab_repository = match _repository with None->raise (Field_empty "checkRatingsColumn_args.repository") | Some _x402 -> _x402
  method set_repository _x402 = _repository <- Some _x402
  method unset_repository = _repository <- None
  method reset_repository = _repository <- None

  val mutable _ratings_column : string option = None
  method get_ratings_column = _ratings_column
  method grab_ratings_column = match _ratings_column with None->raise (Field_empty "checkRatingsColumn_args.ratings_column") | Some _x403 -> _x403
  method set_ratings_column _x403 = _ratings_column <- Some _x403
  method unset_ratings_column = _ratings_column <- None
  method reset_ratings_column = _ratings_column <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkRatingsColumn_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repository with None -> () | Some _v -> 
      oprot#writeFieldBegin("repository",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratings_column with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratings_column",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkRatingsColumn_args (iprot : Protocol.t) =
  let _str406 = new checkRatingsColumn_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t407,_id408) = iprot#readFieldBegin in
        if _t407 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id408 with 
          | 1 -> (if _t407 = Protocol.T_STRING then
              _str406#set_username iprot#readString
            else
              iprot#skip _t407)
          | 2 -> (if _t407 = Protocol.T_STRING then
              _str406#set_table iprot#readString
            else
              iprot#skip _t407)
          | 3 -> (if _t407 = Protocol.T_STRING then
              _str406#set_repository iprot#readString
            else
              iprot#skip _t407)
          | 4 -> (if _t407 = Protocol.T_STRING then
              _str406#set_ratings_column iprot#readString
            else
              iprot#skip _t407)
          | _ -> iprot#skip _t407);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str406

class checkRatingsColumn_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkRatingsColumn_result.success") | Some _x409 -> _x409
  method set_success _x409 = _success <- Some _x409
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkRatingsColumn_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkRatingsColumn_result (iprot : Protocol.t) =
  let _str412 = new checkRatingsColumn_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t413,_id414) = iprot#readFieldBegin in
        if _t413 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id414 with 
          | 0 -> (if _t413 = Protocol.T_BOOL then
              _str412#set_success iprot#readBool
            else
              iprot#skip _t413)
          | _ -> iprot#skip _t413);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str412

class getRecommenders_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getRecommenders_args.username") | Some _x415 -> _x415
  method set_username _x415 = _username <- Some _x415
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommenders_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommenders_args (iprot : Protocol.t) =
  let _str418 = new getRecommenders_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t419,_id420) = iprot#readFieldBegin in
        if _t419 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id420 with 
          | 1 -> (if _t419 = Protocol.T_STRING then
              _str418#set_username iprot#readString
            else
              iprot#skip _t419)
          | _ -> iprot#skip _t419);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str418

class getRecommenders_result =
object (self)
  val mutable _success : recommender list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecommenders_result.success") | Some _x421 -> _x421
  method set_success _x421 = _success <- Some _x421
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommenders_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter424 ->         _iter424#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommenders_result (iprot : Protocol.t) =
  let _str425 = new getRecommenders_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t426,_id427) = iprot#readFieldBegin in
        if _t426 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id427 with 
          | 0 -> (if _t426 = Protocol.T_LIST then
              _str425#set_success 
                (let (_etype431,_size428) = iprot#readListBegin in
                  let _con432 = (Array.to_list (Array.init _size428 (fun _ -> (read_recommender iprot)))) in
                    iprot#readListEnd; _con432)
            else
              iprot#skip _t426)
          | _ -> iprot#skip _t426);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str425

class getProfilePicture_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getProfilePicture_args.username") | Some _x433 -> _x433
  method set_username _x433 = _username <- Some _x433
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfilePicture_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfilePicture_args (iprot : Protocol.t) =
  let _str436 = new getProfilePicture_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t437,_id438) = iprot#readFieldBegin in
        if _t437 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id438 with 
          | 1 -> (if _t437 = Protocol.T_STRING then
              _str436#set_username iprot#readString
            else
              iprot#skip _t437)
          | _ -> iprot#skip _t437);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str436

class getProfilePicture_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfilePicture_result.success") | Some _x439 -> _x439
  method set_success _x439 = _success <- Some _x439
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfilePicture_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfilePicture_result (iprot : Protocol.t) =
  let _str442 = new getProfilePicture_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t443,_id444) = iprot#readFieldBegin in
        if _t443 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id444 with 
          | 0 -> (if _t443 = Protocol.T_STRING then
              _str442#set_success iprot#readString
            else
              iprot#skip _t443)
          | _ -> iprot#skip _t443);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str442

class saveFBProfilePic_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "saveFBProfilePic_args.username") | Some _x445 -> _x445
  method set_username _x445 = _username <- Some _x445
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _fbUsername : string option = None
  method get_fbUsername = _fbUsername
  method grab_fbUsername = match _fbUsername with None->raise (Field_empty "saveFBProfilePic_args.fbUsername") | Some _x446 -> _x446
  method set_fbUsername _x446 = _fbUsername <- Some _x446
  method unset_fbUsername = _fbUsername <- None
  method reset_fbUsername = _fbUsername <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "saveFBProfilePic_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _fbUsername with None -> () | Some _v -> 
      oprot#writeFieldBegin("fbUsername",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_saveFBProfilePic_args (iprot : Protocol.t) =
  let _str449 = new saveFBProfilePic_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t450,_id451) = iprot#readFieldBegin in
        if _t450 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id451 with 
          | 1 -> (if _t450 = Protocol.T_STRING then
              _str449#set_username iprot#readString
            else
              iprot#skip _t450)
          | 2 -> (if _t450 = Protocol.T_STRING then
              _str449#set_fbUsername iprot#readString
            else
              iprot#skip _t450)
          | _ -> iprot#skip _t450);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str449

class saveFBProfilePic_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "saveFBProfilePic_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_saveFBProfilePic_result (iprot : Protocol.t) =
  let _str454 = new saveFBProfilePic_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t455,_id456) = iprot#readFieldBegin in
        if _t455 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id456 with 
          | _ -> iprot#skip _t455);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str454

class deleteRecommender_args =
object (self)
  val mutable _clientKey : string option = None
  method get_clientKey = _clientKey
  method grab_clientKey = match _clientKey with None->raise (Field_empty "deleteRecommender_args.clientKey") | Some _x457 -> _x457
  method set_clientKey _x457 = _clientKey <- Some _x457
  method unset_clientKey = _clientKey <- None
  method reset_clientKey = _clientKey <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRecommender_args";
    (match _clientKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("clientKey",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRecommender_args (iprot : Protocol.t) =
  let _str460 = new deleteRecommender_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t461,_id462) = iprot#readFieldBegin in
        if _t461 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id462 with 
          | 1 -> (if _t461 = Protocol.T_STRING then
              _str460#set_clientKey iprot#readString
            else
              iprot#skip _t461)
          | _ -> iprot#skip _t461);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str460

class deleteRecommender_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRecommender_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRecommender_result (iprot : Protocol.t) =
  let _str465 = new deleteRecommender_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t466,_id467) = iprot#readFieldBegin in
        if _t466 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id467 with 
          | _ -> iprot#skip _t466);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str465

class updateTemplate_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "updateTemplate_args.username") | Some _x468 -> _x468
  method set_username _x468 = _username <- Some _x468
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _primaryKey : string option = None
  method get_primaryKey = _primaryKey
  method grab_primaryKey = match _primaryKey with None->raise (Field_empty "updateTemplate_args.primaryKey") | Some _x469 -> _x469
  method set_primaryKey _x469 = _primaryKey <- Some _x469
  method unset_primaryKey = _primaryKey <- None
  method reset_primaryKey = _primaryKey <- None

  val mutable _title : string option = None
  method get_title = _title
  method grab_title = match _title with None->raise (Field_empty "updateTemplate_args.title") | Some _x470 -> _x470
  method set_title _x470 = _title <- Some _x470
  method unset_title = _title <- None
  method reset_title = _title <- None

  val mutable _description : string option = None
  method get_description = _description
  method grab_description = match _description with None->raise (Field_empty "updateTemplate_args.description") | Some _x471 -> _x471
  method set_description _x471 = _description <- Some _x471
  method unset_description = _description <- None
  method reset_description = _description <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "updateTemplate_args.image") | Some _x472 -> _x472
  method set_image _x472 = _image <- Some _x472
  method unset_image = _image <- None
  method reset_image = _image <- None

  val mutable _video : string option = None
  method get_video = _video
  method grab_video = match _video with None->raise (Field_empty "updateTemplate_args.video") | Some _x473 -> _x473
  method set_video _x473 = _video <- Some _x473
  method unset_video = _video <- None
  method reset_video = _video <- None

  val mutable _itemTypes : (string,string) Hashtbl.t option = None
  method get_itemTypes = _itemTypes
  method grab_itemTypes = match _itemTypes with None->raise (Field_empty "updateTemplate_args.itemTypes") | Some _x474 -> _x474
  method set_itemTypes _x474 = _itemTypes <- Some _x474
  method unset_itemTypes = _itemTypes <- None
  method reset_itemTypes = _itemTypes <- None

  val mutable _displayItems : string list option = None
  method get_displayItems = _displayItems
  method grab_displayItems = match _displayItems with None->raise (Field_empty "updateTemplate_args.displayItems") | Some _x475 -> _x475
  method set_displayItems _x475 = _displayItems <- Some _x475
  method unset_displayItems = _displayItems <- None
  method reset_displayItems = _displayItems <- None

  val mutable _maxRatingVal : Int64.t option = None
  method get_maxRatingVal = _maxRatingVal
  method grab_maxRatingVal = match _maxRatingVal with None->raise (Field_empty "updateTemplate_args.maxRatingVal") | Some _x476 -> _x476
  method set_maxRatingVal _x476 = _maxRatingVal <- Some _x476
  method unset_maxRatingVal = _maxRatingVal <- None
  method reset_maxRatingVal = _maxRatingVal <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "updateTemplate_args.numRecs") | Some _x477 -> _x477
  method set_numRecs _x477 = _numRecs <- Some _x477
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _recommenderName : string option = None
  method get_recommenderName = _recommenderName
  method grab_recommenderName = match _recommenderName with None->raise (Field_empty "updateTemplate_args.recommenderName") | Some _x478 -> _x478
  method set_recommenderName _x478 = _recommenderName <- Some _x478
  method unset_recommenderName = _recommenderName <- None
  method reset_recommenderName = _recommenderName <- None

  val mutable _clientKey : string option = None
  method get_clientKey = _clientKey
  method grab_clientKey = match _clientKey with None->raise (Field_empty "updateTemplate_args.clientKey") | Some _x479 -> _x479
  method set_clientKey _x479 = _clientKey <- Some _x479
  method unset_clientKey = _clientKey <- None
  method reset_clientKey = _clientKey <- None

  val mutable _homepage : string option = None
  method get_homepage = _homepage
  method grab_homepage = match _homepage with None->raise (Field_empty "updateTemplate_args.homepage") | Some _x480 -> _x480
  method set_homepage _x480 = _homepage <- Some _x480
  method unset_homepage = _homepage <- None
  method reset_homepage = _homepage <- None

  val mutable _creatorName : string option = None
  method get_creatorName = _creatorName
  method grab_creatorName = match _creatorName with None->raise (Field_empty "updateTemplate_args.creatorName") | Some _x481 -> _x481
  method set_creatorName _x481 = _creatorName <- Some _x481
  method unset_creatorName = _creatorName <- None
  method reset_creatorName = _creatorName <- None

  val mutable _repoName : string option = None
  method get_repoName = _repoName
  method grab_repoName = match _repoName with None->raise (Field_empty "updateTemplate_args.repoName") | Some _x482 -> _x482
  method set_repoName _x482 = _repoName <- Some _x482
  method unset_repoName = _repoName <- None
  method reset_repoName = _repoName <- None

  val mutable _tableName : string option = None
  method get_tableName = _tableName
  method grab_tableName = match _tableName with None->raise (Field_empty "updateTemplate_args.tableName") | Some _x483 -> _x483
  method set_tableName _x483 = _tableName <- Some _x483
  method unset_tableName = _tableName <- None
  method reset_tableName = _tableName <- None

  val mutable _ratingsColumn : string option = None
  method get_ratingsColumn = _ratingsColumn
  method grab_ratingsColumn = match _ratingsColumn with None->raise (Field_empty "updateTemplate_args.ratingsColumn") | Some _x484 -> _x484
  method set_ratingsColumn _x484 = _ratingsColumn <- Some _x484
  method unset_ratingsColumn = _ratingsColumn <- None
  method reset_ratingsColumn = _ratingsColumn <- None

  method copy =
      let _new = Oo.copy self in
      if _itemTypes <> None then
        _new#set_itemTypes (Hashtbl.copy self#grab_itemTypes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateTemplate_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primaryKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("primaryKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _title with None -> () | Some _v -> 
      oprot#writeFieldBegin("title",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _description with None -> () | Some _v -> 
      oprot#writeFieldBegin("description",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _video with None -> () | Some _v -> 
      oprot#writeFieldBegin("video",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _itemTypes with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemTypes",Protocol.T_MAP,7);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter487 -> fun _viter488 -> 
        oprot#writeString(_kiter487);
        oprot#writeString(_viter488);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _displayItems with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayItems",Protocol.T_LIST,8);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter489 ->         oprot#writeString(_iter489);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _maxRatingVal with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxRatingVal",Protocol.T_I64,9);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,10);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _recommenderName with None -> () | Some _v -> 
      oprot#writeFieldBegin("recommenderName",Protocol.T_STRING,11);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _clientKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("clientKey",Protocol.T_STRING,12);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _homepage with None -> () | Some _v -> 
      oprot#writeFieldBegin("homepage",Protocol.T_STRING,13);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _creatorName with None -> () | Some _v -> 
      oprot#writeFieldBegin("creatorName",Protocol.T_STRING,14);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repoName with None -> () | Some _v -> 
      oprot#writeFieldBegin("repoName",Protocol.T_STRING,15);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _tableName with None -> () | Some _v -> 
      oprot#writeFieldBegin("tableName",Protocol.T_STRING,16);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratingsColumn with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratingsColumn",Protocol.T_STRING,17);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateTemplate_args (iprot : Protocol.t) =
  let _str490 = new updateTemplate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t491,_id492) = iprot#readFieldBegin in
        if _t491 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id492 with 
          | 1 -> (if _t491 = Protocol.T_STRING then
              _str490#set_username iprot#readString
            else
              iprot#skip _t491)
          | 2 -> (if _t491 = Protocol.T_STRING then
              _str490#set_primaryKey iprot#readString
            else
              iprot#skip _t491)
          | 3 -> (if _t491 = Protocol.T_STRING then
              _str490#set_title iprot#readString
            else
              iprot#skip _t491)
          | 4 -> (if _t491 = Protocol.T_STRING then
              _str490#set_description iprot#readString
            else
              iprot#skip _t491)
          | 5 -> (if _t491 = Protocol.T_STRING then
              _str490#set_image iprot#readString
            else
              iprot#skip _t491)
          | 6 -> (if _t491 = Protocol.T_STRING then
              _str490#set_video iprot#readString
            else
              iprot#skip _t491)
          | 7 -> (if _t491 = Protocol.T_MAP then
              _str490#set_itemTypes 
                (let (_ktype494,_vtype495,_size493) = iprot#readMapBegin in
                let _con497 = Hashtbl.create _size493 in
                  for i = 1 to _size493 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con497 _k _v
                  done; iprot#readMapEnd; _con497)
            else
              iprot#skip _t491)
          | 8 -> (if _t491 = Protocol.T_LIST then
              _str490#set_displayItems 
                (let (_etype501,_size498) = iprot#readListBegin in
                  let _con502 = (Array.to_list (Array.init _size498 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con502)
            else
              iprot#skip _t491)
          | 9 -> (if _t491 = Protocol.T_I64 then
              _str490#set_maxRatingVal iprot#readI64
            else
              iprot#skip _t491)
          | 10 -> (if _t491 = Protocol.T_I64 then
              _str490#set_numRecs iprot#readI64
            else
              iprot#skip _t491)
          | 11 -> (if _t491 = Protocol.T_STRING then
              _str490#set_recommenderName iprot#readString
            else
              iprot#skip _t491)
          | 12 -> (if _t491 = Protocol.T_STRING then
              _str490#set_clientKey iprot#readString
            else
              iprot#skip _t491)
          | 13 -> (if _t491 = Protocol.T_STRING then
              _str490#set_homepage iprot#readString
            else
              iprot#skip _t491)
          | 14 -> (if _t491 = Protocol.T_STRING then
              _str490#set_creatorName iprot#readString
            else
              iprot#skip _t491)
          | 15 -> (if _t491 = Protocol.T_STRING then
              _str490#set_repoName iprot#readString
            else
              iprot#skip _t491)
          | 16 -> (if _t491 = Protocol.T_STRING then
              _str490#set_tableName iprot#readString
            else
              iprot#skip _t491)
          | 17 -> (if _t491 = Protocol.T_STRING then
              _str490#set_ratingsColumn iprot#readString
            else
              iprot#skip _t491)
          | _ -> iprot#skip _t491);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str490

class updateTemplate_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateTemplate_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateTemplate_result (iprot : Protocol.t) =
  let _str505 = new updateTemplate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t506,_id507) = iprot#readFieldBegin in
        if _t506 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id507 with 
          | _ -> iprot#skip _t506);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str505

class configurePrefilledUserRatings_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "configurePrefilledUserRatings_args.username") | Some _x508 -> _x508
  method set_username _x508 = _username <- Some _x508
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repoName : string option = None
  method get_repoName = _repoName
  method grab_repoName = match _repoName with None->raise (Field_empty "configurePrefilledUserRatings_args.repoName") | Some _x509 -> _x509
  method set_repoName _x509 = _repoName <- Some _x509
  method unset_repoName = _repoName <- None
  method reset_repoName = _repoName <- None

  val mutable _primaryKey : string option = None
  method get_primaryKey = _primaryKey
  method grab_primaryKey = match _primaryKey with None->raise (Field_empty "configurePrefilledUserRatings_args.primaryKey") | Some _x510 -> _x510
  method set_primaryKey _x510 = _primaryKey <- Some _x510
  method unset_primaryKey = _primaryKey <- None
  method reset_primaryKey = _primaryKey <- None

  val mutable _itemTable : string option = None
  method get_itemTable = _itemTable
  method grab_itemTable = match _itemTable with None->raise (Field_empty "configurePrefilledUserRatings_args.itemTable") | Some _x511 -> _x511
  method set_itemTable _x511 = _itemTable <- Some _x511
  method unset_itemTable = _itemTable <- None
  method reset_itemTable = _itemTable <- None

  val mutable _tableName : string option = None
  method get_tableName = _tableName
  method grab_tableName = match _tableName with None->raise (Field_empty "configurePrefilledUserRatings_args.tableName") | Some _x512 -> _x512
  method set_tableName _x512 = _tableName <- Some _x512
  method unset_tableName = _tableName <- None
  method reset_tableName = _tableName <- None

  val mutable _userIdCol : string option = None
  method get_userIdCol = _userIdCol
  method grab_userIdCol = match _userIdCol with None->raise (Field_empty "configurePrefilledUserRatings_args.userIdCol") | Some _x513 -> _x513
  method set_userIdCol _x513 = _userIdCol <- Some _x513
  method unset_userIdCol = _userIdCol <- None
  method reset_userIdCol = _userIdCol <- None

  val mutable _itemIdCol : string option = None
  method get_itemIdCol = _itemIdCol
  method grab_itemIdCol = match _itemIdCol with None->raise (Field_empty "configurePrefilledUserRatings_args.itemIdCol") | Some _x514 -> _x514
  method set_itemIdCol _x514 = _itemIdCol <- Some _x514
  method unset_itemIdCol = _itemIdCol <- None
  method reset_itemIdCol = _itemIdCol <- None

  val mutable _userRatingCol : string option = None
  method get_userRatingCol = _userRatingCol
  method grab_userRatingCol = match _userRatingCol with None->raise (Field_empty "configurePrefilledUserRatings_args.userRatingCol") | Some _x515 -> _x515
  method set_userRatingCol _x515 = _userRatingCol <- Some _x515
  method unset_userRatingCol = _userRatingCol <- None
  method reset_userRatingCol = _userRatingCol <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "configurePrefilledUserRatings_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repoName with None -> () | Some _v -> 
      oprot#writeFieldBegin("repoName",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primaryKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("primaryKey",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _itemTable with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemTable",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _tableName with None -> () | Some _v -> 
      oprot#writeFieldBegin("tableName",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userIdCol with None -> () | Some _v -> 
      oprot#writeFieldBegin("userIdCol",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _itemIdCol with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemIdCol",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userRatingCol with None -> () | Some _v -> 
      oprot#writeFieldBegin("userRatingCol",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_configurePrefilledUserRatings_args (iprot : Protocol.t) =
  let _str518 = new configurePrefilledUserRatings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t519,_id520) = iprot#readFieldBegin in
        if _t519 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id520 with 
          | 1 -> (if _t519 = Protocol.T_STRING then
              _str518#set_username iprot#readString
            else
              iprot#skip _t519)
          | 2 -> (if _t519 = Protocol.T_STRING then
              _str518#set_repoName iprot#readString
            else
              iprot#skip _t519)
          | 3 -> (if _t519 = Protocol.T_STRING then
              _str518#set_primaryKey iprot#readString
            else
              iprot#skip _t519)
          | 4 -> (if _t519 = Protocol.T_STRING then
              _str518#set_itemTable iprot#readString
            else
              iprot#skip _t519)
          | 5 -> (if _t519 = Protocol.T_STRING then
              _str518#set_tableName iprot#readString
            else
              iprot#skip _t519)
          | 6 -> (if _t519 = Protocol.T_STRING then
              _str518#set_userIdCol iprot#readString
            else
              iprot#skip _t519)
          | 7 -> (if _t519 = Protocol.T_STRING then
              _str518#set_itemIdCol iprot#readString
            else
              iprot#skip _t519)
          | 8 -> (if _t519 = Protocol.T_STRING then
              _str518#set_userRatingCol iprot#readString
            else
              iprot#skip _t519)
          | _ -> iprot#skip _t519);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str518

class configurePrefilledUserRatings_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "configurePrefilledUserRatings_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_configurePrefilledUserRatings_result (iprot : Protocol.t) =
  let _str523 = new configurePrefilledUserRatings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t524,_id525) = iprot#readFieldBegin in
        if _t524 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id525 with 
          | _ -> iprot#skip _t524);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str523

class getTables_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getTables_args.username") | Some _x526 -> _x526
  method set_username _x526 = _username <- Some _x526
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repo : string option = None
  method get_repo = _repo
  method grab_repo = match _repo with None->raise (Field_empty "getTables_args.repo") | Some _x527 -> _x527
  method set_repo _x527 = _repo <- Some _x527
  method unset_repo = _repo <- None
  method reset_repo = _repo <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTables_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repo with None -> () | Some _v -> 
      oprot#writeFieldBegin("repo",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTables_args (iprot : Protocol.t) =
  let _str530 = new getTables_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t531,_id532) = iprot#readFieldBegin in
        if _t531 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id532 with 
          | 1 -> (if _t531 = Protocol.T_STRING then
              _str530#set_username iprot#readString
            else
              iprot#skip _t531)
          | 2 -> (if _t531 = Protocol.T_STRING then
              _str530#set_repo iprot#readString
            else
              iprot#skip _t531)
          | _ -> iprot#skip _t531);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str530

class getTables_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getTables_result.success") | Some _x533 -> _x533
  method set_success _x533 = _success <- Some _x533
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTables_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter536 ->         oprot#writeString(_iter536);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTables_result (iprot : Protocol.t) =
  let _str537 = new getTables_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t538,_id539) = iprot#readFieldBegin in
        if _t538 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id539 with 
          | 0 -> (if _t538 = Protocol.T_LIST then
              _str537#set_success 
                (let (_etype543,_size540) = iprot#readListBegin in
                  let _con544 = (Array.to_list (Array.init _size540 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con544)
            else
              iprot#skip _t538)
          | _ -> iprot#skip _t538);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str537

class getColumns_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getColumns_args.username") | Some _x545 -> _x545
  method set_username _x545 = _username <- Some _x545
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repo : string option = None
  method get_repo = _repo
  method grab_repo = match _repo with None->raise (Field_empty "getColumns_args.repo") | Some _x546 -> _x546
  method set_repo _x546 = _repo <- Some _x546
  method unset_repo = _repo <- None
  method reset_repo = _repo <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "getColumns_args.table") | Some _x547 -> _x547
  method set_table _x547 = _table <- Some _x547
  method unset_table = _table <- None
  method reset_table = _table <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getColumns_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repo with None -> () | Some _v -> 
      oprot#writeFieldBegin("repo",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getColumns_args (iprot : Protocol.t) =
  let _str550 = new getColumns_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t551,_id552) = iprot#readFieldBegin in
        if _t551 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id552 with 
          | 1 -> (if _t551 = Protocol.T_STRING then
              _str550#set_username iprot#readString
            else
              iprot#skip _t551)
          | 2 -> (if _t551 = Protocol.T_STRING then
              _str550#set_repo iprot#readString
            else
              iprot#skip _t551)
          | 3 -> (if _t551 = Protocol.T_STRING then
              _str550#set_table iprot#readString
            else
              iprot#skip _t551)
          | _ -> iprot#skip _t551);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str550

class getColumns_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getColumns_result.success") | Some _x553 -> _x553
  method set_success _x553 = _success <- Some _x553
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getColumns_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter556 ->         oprot#writeString(_iter556);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getColumns_result (iprot : Protocol.t) =
  let _str557 = new getColumns_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t558,_id559) = iprot#readFieldBegin in
        if _t558 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id559 with 
          | 0 -> (if _t558 = Protocol.T_LIST then
              _str557#set_success 
                (let (_etype563,_size560) = iprot#readListBegin in
                  let _con564 = (Array.to_list (Array.init _size560 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con564)
            else
              iprot#skip _t558)
          | _ -> iprot#skip _t558);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str557

class getFirstRepo_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getFirstRepo_args.username") | Some _x565 -> _x565
  method set_username _x565 = _username <- Some _x565
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFirstRepo_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFirstRepo_args (iprot : Protocol.t) =
  let _str568 = new getFirstRepo_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t569,_id570) = iprot#readFieldBegin in
        if _t569 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id570 with 
          | 1 -> (if _t569 = Protocol.T_STRING then
              _str568#set_username iprot#readString
            else
              iprot#skip _t569)
          | _ -> iprot#skip _t569);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str568

class getFirstRepo_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getFirstRepo_result.success") | Some _x571 -> _x571
  method set_success _x571 = _success <- Some _x571
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getFirstRepo_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getFirstRepo_result (iprot : Protocol.t) =
  let _str574 = new getFirstRepo_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t575,_id576) = iprot#readFieldBegin in
        if _t575 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id576 with 
          | 0 -> (if _t575 = Protocol.T_STRING then
              _str574#set_success iprot#readString
            else
              iprot#skip _t575)
          | _ -> iprot#skip _t575);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str574

class getNumRepos_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getNumRepos_args.username") | Some _x577 -> _x577
  method set_username _x577 = _username <- Some _x577
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNumRepos_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNumRepos_args (iprot : Protocol.t) =
  let _str580 = new getNumRepos_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t581,_id582) = iprot#readFieldBegin in
        if _t581 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id582 with 
          | 1 -> (if _t581 = Protocol.T_STRING then
              _str580#set_username iprot#readString
            else
              iprot#skip _t581)
          | _ -> iprot#skip _t581);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str580

class getNumRepos_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getNumRepos_result.success") | Some _x583 -> _x583
  method set_success _x583 = _success <- Some _x583
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getNumRepos_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getNumRepos_result (iprot : Protocol.t) =
  let _str586 = new getNumRepos_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t587,_id588) = iprot#readFieldBegin in
        if _t587 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id588 with 
          | 0 -> (if _t587 = Protocol.T_I64 then
              _str586#set_success iprot#readI64
            else
              iprot#skip _t587)
          | _ -> iprot#skip _t587);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str586

class getAllRepos_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getAllRepos_args.username") | Some _x589 -> _x589
  method set_username _x589 = _username <- Some _x589
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllRepos_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllRepos_args (iprot : Protocol.t) =
  let _str592 = new getAllRepos_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t593,_id594) = iprot#readFieldBegin in
        if _t593 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id594 with 
          | 1 -> (if _t593 = Protocol.T_STRING then
              _str592#set_username iprot#readString
            else
              iprot#skip _t593)
          | _ -> iprot#skip _t593);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str592

class getAllRepos_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getAllRepos_result.success") | Some _x595 -> _x595
  method set_success _x595 = _success <- Some _x595
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getAllRepos_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter598 ->         oprot#writeString(_iter598);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getAllRepos_result (iprot : Protocol.t) =
  let _str599 = new getAllRepos_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t600,_id601) = iprot#readFieldBegin in
        if _t600 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id601 with 
          | 0 -> (if _t600 = Protocol.T_LIST then
              _str599#set_success 
                (let (_etype605,_size602) = iprot#readListBegin in
                  let _con606 = (Array.to_list (Array.init _size602 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con606)
            else
              iprot#skip _t600)
          | _ -> iprot#skip _t600);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str599

class saveCSSData_args =
object (self)
  val mutable _path : string option = None
  method get_path = _path
  method grab_path = match _path with None->raise (Field_empty "saveCSSData_args.path") | Some _x607 -> _x607
  method set_path _x607 = _path <- Some _x607
  method unset_path = _path <- None
  method reset_path = _path <- None

  val mutable _data : string option = None
  method get_data = _data
  method grab_data = match _data with None->raise (Field_empty "saveCSSData_args.data") | Some _x608 -> _x608
  method set_data _x608 = _data <- Some _x608
  method unset_data = _data <- None
  method reset_data = _data <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "saveCSSData_args";
    (match _path with None -> () | Some _v -> 
      oprot#writeFieldBegin("path",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _data with None -> () | Some _v -> 
      oprot#writeFieldBegin("data",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_saveCSSData_args (iprot : Protocol.t) =
  let _str611 = new saveCSSData_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t612,_id613) = iprot#readFieldBegin in
        if _t612 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id613 with 
          | 1 -> (if _t612 = Protocol.T_STRING then
              _str611#set_path iprot#readString
            else
              iprot#skip _t612)
          | 2 -> (if _t612 = Protocol.T_STRING then
              _str611#set_data iprot#readString
            else
              iprot#skip _t612)
          | _ -> iprot#skip _t612);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str611

class saveCSSData_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "saveCSSData_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_saveCSSData_result (iprot : Protocol.t) =
  let _str616 = new saveCSSData_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t617,_id618) = iprot#readFieldBegin in
        if _t617 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id618 with 
          | _ -> iprot#skip _t617);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str616

class virtual iface =
object (self)
  method virtual createNewIndividualServer : string option -> unit
  method virtual terminateSession : string option -> unit
  method virtual makeRecommendation : string option -> Int64.t option -> Int64.t option -> bool option -> string list option -> item list
  method virtual makeItemBasedRecommendations : string option -> Int64.t option -> Int64.t option -> string list option -> item list
  method virtual getPageItems : string option -> Int64.t option -> Int64.t option -> string list option -> item list
  method virtual getItemCount : string option -> Int64.t
  method virtual recordRatings : string option -> Int64.t option -> Int64.t option -> Int64.t option -> unit
  method virtual deleteRatings : string option -> Int64.t option -> Int64.t option -> unit
  method virtual createNewUser : string option -> string option -> bool option -> string
  method virtual checkUsername : string option -> string option -> bool option -> bool
  method virtual checkLogin : string option -> string option -> string option -> bool option -> bool
  method virtual retrieveUserId : string option -> string option -> Int64.t
  method virtual createNewRecommender : string option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> bool
  method virtual getUserRatedItems : string option -> Int64.t option -> string list option -> item list
  method virtual initiateModel : string option -> string option -> string option -> string option -> unit
  method virtual getSearchItems : string option -> string option -> string list option -> string list option -> item list
  method virtual makeOverallRatingBasedOrRandomRecommendation : string option -> string option -> Int64.t option -> string list option -> item list
  method virtual addKibitzUser : string option -> string option -> unit
  method virtual checkCorrectDatahubLogin : string option -> string option -> string option -> string option -> string option -> string option -> string option -> bool
  method virtual checkRatingsColumn : string option -> string option -> string option -> string option -> bool
  method virtual getRecommenders : string option -> recommender list
  method virtual getProfilePicture : string option -> string
  method virtual saveFBProfilePic : string option -> string option -> unit
  method virtual deleteRecommender : string option -> unit
  method virtual updateTemplate : string option -> string option -> string option -> string option -> string option -> string option -> (string,string) Hashtbl.t option -> string list option -> Int64.t option -> Int64.t option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> unit
  method virtual configurePrefilledUserRatings : string option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> unit
  method virtual getTables : string option -> string option -> string list
  method virtual getColumns : string option -> string option -> string option -> string list
  method virtual getFirstRepo : string option -> string
  method virtual getNumRepos : string option -> Int64.t
  method virtual getAllRepos : string option -> string list
  method virtual saveCSSData : string option -> string option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method createNewIndividualServer key = 
    self#send_createNewIndividualServer key;
    self#recv_createNewIndividualServer
  method private send_createNewIndividualServer key = 
    oprot#writeMessageBegin ("createNewIndividualServer", Protocol.CALL, seqid);
    let args = new createNewIndividualServer_args in
      args#set_key key;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createNewIndividualServer  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_createNewIndividualServer_result iprot in
        iprot#readMessageEnd;
        ()
  method terminateSession key = 
    self#send_terminateSession key;
    self#recv_terminateSession
  method private send_terminateSession key = 
    oprot#writeMessageBegin ("terminateSession", Protocol.CALL, seqid);
    let args = new terminateSession_args in
      args#set_key key;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_terminateSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_terminateSession_result iprot in
        iprot#readMessageEnd;
        ()
  method makeRecommendation key userId numRecs isBoolean displayColumns = 
    self#send_makeRecommendation key userId numRecs isBoolean displayColumns;
    self#recv_makeRecommendation
  method private send_makeRecommendation key userId numRecs isBoolean displayColumns = 
    oprot#writeMessageBegin ("makeRecommendation", Protocol.CALL, seqid);
    let args = new makeRecommendation_args in
      args#set_key key;
      args#set_userId userId;
      args#set_numRecs numRecs;
      args#set_isBoolean isBoolean;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeRecommendation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeRecommendation failed: unknown result")))
  method makeItemBasedRecommendations key userId numRecs displayColumns = 
    self#send_makeItemBasedRecommendations key userId numRecs displayColumns;
    self#recv_makeItemBasedRecommendations
  method private send_makeItemBasedRecommendations key userId numRecs displayColumns = 
    oprot#writeMessageBegin ("makeItemBasedRecommendations", Protocol.CALL, seqid);
    let args = new makeItemBasedRecommendations_args in
      args#set_key key;
      args#set_userId userId;
      args#set_numRecs numRecs;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeItemBasedRecommendations  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeItemBasedRecommendations_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeItemBasedRecommendations failed: unknown result")))
  method getPageItems key page numPerPage displayColumns = 
    self#send_getPageItems key page numPerPage displayColumns;
    self#recv_getPageItems
  method private send_getPageItems key page numPerPage displayColumns = 
    oprot#writeMessageBegin ("getPageItems", Protocol.CALL, seqid);
    let args = new getPageItems_args in
      args#set_key key;
      args#set_page page;
      args#set_numPerPage numPerPage;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPageItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPageItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPageItems failed: unknown result")))
  method getItemCount key = 
    self#send_getItemCount key;
    self#recv_getItemCount
  method private send_getItemCount key = 
    oprot#writeMessageBegin ("getItemCount", Protocol.CALL, seqid);
    let args = new getItemCount_args in
      args#set_key key;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getItemCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getItemCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getItemCount failed: unknown result")))
  method recordRatings key userId itemId rating = 
    self#send_recordRatings key userId itemId rating;
    self#recv_recordRatings
  method private send_recordRatings key userId itemId rating = 
    oprot#writeMessageBegin ("recordRatings", Protocol.CALL, seqid);
    let args = new recordRatings_args in
      args#set_key key;
      args#set_userId userId;
      args#set_itemId itemId;
      args#set_rating rating;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_recordRatings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_recordRatings_result iprot in
        iprot#readMessageEnd;
        ()
  method deleteRatings key userId itemId = 
    self#send_deleteRatings key userId itemId;
    self#recv_deleteRatings
  method private send_deleteRatings key userId itemId = 
    oprot#writeMessageBegin ("deleteRatings", Protocol.CALL, seqid);
    let args = new deleteRatings_args in
      args#set_key key;
      args#set_userId userId;
      args#set_itemId itemId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteRatings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_deleteRatings_result iprot in
        iprot#readMessageEnd;
        ()
  method createNewUser key username iskibitzuser = 
    self#send_createNewUser key username iskibitzuser;
    self#recv_createNewUser
  method private send_createNewUser key username iskibitzuser = 
    oprot#writeMessageBegin ("createNewUser", Protocol.CALL, seqid);
    let args = new createNewUser_args in
      args#set_key key;
      args#set_username username;
      args#set_iskibitzuser iskibitzuser;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createNewUser  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createNewUser_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createNewUser failed: unknown result")))
  method checkUsername key username iskibitzuser = 
    self#send_checkUsername key username iskibitzuser;
    self#recv_checkUsername
  method private send_checkUsername key username iskibitzuser = 
    oprot#writeMessageBegin ("checkUsername", Protocol.CALL, seqid);
    let args = new checkUsername_args in
      args#set_key key;
      args#set_username username;
      args#set_iskibitzuser iskibitzuser;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkUsername  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkUsername_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkUsername failed: unknown result")))
  method checkLogin key username password iskibitzuser = 
    self#send_checkLogin key username password iskibitzuser;
    self#recv_checkLogin
  method private send_checkLogin key username password iskibitzuser = 
    oprot#writeMessageBegin ("checkLogin", Protocol.CALL, seqid);
    let args = new checkLogin_args in
      args#set_key key;
      args#set_username username;
      args#set_password password;
      args#set_iskibitzuser iskibitzuser;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkLogin failed: unknown result")))
  method retrieveUserId key username = 
    self#send_retrieveUserId key username;
    self#recv_retrieveUserId
  method private send_retrieveUserId key username = 
    oprot#writeMessageBegin ("retrieveUserId", Protocol.CALL, seqid);
    let args = new retrieveUserId_args in
      args#set_key key;
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_retrieveUserId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_retrieveUserId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "retrieveUserId failed: unknown result")))
  method createNewRecommender username primaryKey database table title description image ratings_column clientKey = 
    self#send_createNewRecommender username primaryKey database table title description image ratings_column clientKey;
    self#recv_createNewRecommender
  method private send_createNewRecommender username primaryKey database table title description image ratings_column clientKey = 
    oprot#writeMessageBegin ("createNewRecommender", Protocol.CALL, seqid);
    let args = new createNewRecommender_args in
      args#set_username username;
      args#set_primaryKey primaryKey;
      args#set_database database;
      args#set_table table;
      args#set_title title;
      args#set_description description;
      args#set_image image;
      args#set_ratings_column ratings_column;
      args#set_clientKey clientKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createNewRecommender  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createNewRecommender_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createNewRecommender failed: unknown result")))
  method getUserRatedItems key userId displayColumns = 
    self#send_getUserRatedItems key userId displayColumns;
    self#recv_getUserRatedItems
  method private send_getUserRatedItems key userId displayColumns = 
    oprot#writeMessageBegin ("getUserRatedItems", Protocol.CALL, seqid);
    let args = new getUserRatedItems_args in
      args#set_key key;
      args#set_userId userId;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserRatedItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserRatedItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserRatedItems failed: unknown result")))
  method initiateModel key table username database = 
    self#send_initiateModel key table username database;
    self#recv_initiateModel
  method private send_initiateModel key table username database = 
    oprot#writeMessageBegin ("initiateModel", Protocol.CALL, seqid);
    let args = new initiateModel_args in
      args#set_key key;
      args#set_table table;
      args#set_username username;
      args#set_database database;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_initiateModel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_initiateModel_result iprot in
        iprot#readMessageEnd;
        ()
  method getSearchItems table query columnsToSearch displayColumns = 
    self#send_getSearchItems table query columnsToSearch displayColumns;
    self#recv_getSearchItems
  method private send_getSearchItems table query columnsToSearch displayColumns = 
    oprot#writeMessageBegin ("getSearchItems", Protocol.CALL, seqid);
    let args = new getSearchItems_args in
      args#set_table table;
      args#set_query query;
      args#set_columnsToSearch columnsToSearch;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSearchItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSearchItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSearchItems failed: unknown result")))
  method makeOverallRatingBasedOrRandomRecommendation key ratingColumnName numRecs displayColumns = 
    self#send_makeOverallRatingBasedOrRandomRecommendation key ratingColumnName numRecs displayColumns;
    self#recv_makeOverallRatingBasedOrRandomRecommendation
  method private send_makeOverallRatingBasedOrRandomRecommendation key ratingColumnName numRecs displayColumns = 
    oprot#writeMessageBegin ("makeOverallRatingBasedOrRandomRecommendation", Protocol.CALL, seqid);
    let args = new makeOverallRatingBasedOrRandomRecommendation_args in
      args#set_key key;
      args#set_ratingColumnName ratingColumnName;
      args#set_numRecs numRecs;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeOverallRatingBasedOrRandomRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeOverallRatingBasedOrRandomRecommendation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeOverallRatingBasedOrRandomRecommendation failed: unknown result")))
  method addKibitzUser email password = 
    self#send_addKibitzUser email password;
    self#recv_addKibitzUser
  method private send_addKibitzUser email password = 
    oprot#writeMessageBegin ("addKibitzUser", Protocol.CALL, seqid);
    let args = new addKibitzUser_args in
      args#set_email email;
      args#set_password password;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addKibitzUser  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_addKibitzUser_result iprot in
        iprot#readMessageEnd;
        ()
  method checkCorrectDatahubLogin username repository table primary_key title description image = 
    self#send_checkCorrectDatahubLogin username repository table primary_key title description image;
    self#recv_checkCorrectDatahubLogin
  method private send_checkCorrectDatahubLogin username repository table primary_key title description image = 
    oprot#writeMessageBegin ("checkCorrectDatahubLogin", Protocol.CALL, seqid);
    let args = new checkCorrectDatahubLogin_args in
      args#set_username username;
      args#set_repository repository;
      args#set_table table;
      args#set_primary_key primary_key;
      args#set_title title;
      args#set_description description;
      args#set_image image;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkCorrectDatahubLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkCorrectDatahubLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkCorrectDatahubLogin failed: unknown result")))
  method checkRatingsColumn username table repository ratings_column = 
    self#send_checkRatingsColumn username table repository ratings_column;
    self#recv_checkRatingsColumn
  method private send_checkRatingsColumn username table repository ratings_column = 
    oprot#writeMessageBegin ("checkRatingsColumn", Protocol.CALL, seqid);
    let args = new checkRatingsColumn_args in
      args#set_username username;
      args#set_table table;
      args#set_repository repository;
      args#set_ratings_column ratings_column;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkRatingsColumn  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkRatingsColumn_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkRatingsColumn failed: unknown result")))
  method getRecommenders username = 
    self#send_getRecommenders username;
    self#recv_getRecommenders
  method private send_getRecommenders username = 
    oprot#writeMessageBegin ("getRecommenders", Protocol.CALL, seqid);
    let args = new getRecommenders_args in
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecommenders  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecommenders_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecommenders failed: unknown result")))
  method getProfilePicture username = 
    self#send_getProfilePicture username;
    self#recv_getProfilePicture
  method private send_getProfilePicture username = 
    oprot#writeMessageBegin ("getProfilePicture", Protocol.CALL, seqid);
    let args = new getProfilePicture_args in
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfilePicture  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfilePicture_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfilePicture failed: unknown result")))
  method saveFBProfilePic username fbUsername = 
    self#send_saveFBProfilePic username fbUsername;
    self#recv_saveFBProfilePic
  method private send_saveFBProfilePic username fbUsername = 
    oprot#writeMessageBegin ("saveFBProfilePic", Protocol.CALL, seqid);
    let args = new saveFBProfilePic_args in
      args#set_username username;
      args#set_fbUsername fbUsername;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_saveFBProfilePic  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_saveFBProfilePic_result iprot in
        iprot#readMessageEnd;
        ()
  method deleteRecommender clientKey = 
    self#send_deleteRecommender clientKey;
    self#recv_deleteRecommender
  method private send_deleteRecommender clientKey = 
    oprot#writeMessageBegin ("deleteRecommender", Protocol.CALL, seqid);
    let args = new deleteRecommender_args in
      args#set_clientKey clientKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteRecommender  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_deleteRecommender_result iprot in
        iprot#readMessageEnd;
        ()
  method updateTemplate username primaryKey title description image video itemTypes displayItems maxRatingVal numRecs recommenderName clientKey homepage creatorName repoName tableName ratingsColumn = 
    self#send_updateTemplate username primaryKey title description image video itemTypes displayItems maxRatingVal numRecs recommenderName clientKey homepage creatorName repoName tableName ratingsColumn;
    self#recv_updateTemplate
  method private send_updateTemplate username primaryKey title description image video itemTypes displayItems maxRatingVal numRecs recommenderName clientKey homepage creatorName repoName tableName ratingsColumn = 
    oprot#writeMessageBegin ("updateTemplate", Protocol.CALL, seqid);
    let args = new updateTemplate_args in
      args#set_username username;
      args#set_primaryKey primaryKey;
      args#set_title title;
      args#set_description description;
      args#set_image image;
      args#set_video video;
      args#set_itemTypes itemTypes;
      args#set_displayItems displayItems;
      args#set_maxRatingVal maxRatingVal;
      args#set_numRecs numRecs;
      args#set_recommenderName recommenderName;
      args#set_clientKey clientKey;
      args#set_homepage homepage;
      args#set_creatorName creatorName;
      args#set_repoName repoName;
      args#set_tableName tableName;
      args#set_ratingsColumn ratingsColumn;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateTemplate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_updateTemplate_result iprot in
        iprot#readMessageEnd;
        ()
  method configurePrefilledUserRatings username repoName primaryKey itemTable tableName userIdCol itemIdCol userRatingCol = 
    self#send_configurePrefilledUserRatings username repoName primaryKey itemTable tableName userIdCol itemIdCol userRatingCol;
    self#recv_configurePrefilledUserRatings
  method private send_configurePrefilledUserRatings username repoName primaryKey itemTable tableName userIdCol itemIdCol userRatingCol = 
    oprot#writeMessageBegin ("configurePrefilledUserRatings", Protocol.CALL, seqid);
    let args = new configurePrefilledUserRatings_args in
      args#set_username username;
      args#set_repoName repoName;
      args#set_primaryKey primaryKey;
      args#set_itemTable itemTable;
      args#set_tableName tableName;
      args#set_userIdCol userIdCol;
      args#set_itemIdCol itemIdCol;
      args#set_userRatingCol userRatingCol;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_configurePrefilledUserRatings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_configurePrefilledUserRatings_result iprot in
        iprot#readMessageEnd;
        ()
  method getTables username repo = 
    self#send_getTables username repo;
    self#recv_getTables
  method private send_getTables username repo = 
    oprot#writeMessageBegin ("getTables", Protocol.CALL, seqid);
    let args = new getTables_args in
      args#set_username username;
      args#set_repo repo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getTables  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getTables_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getTables failed: unknown result")))
  method getColumns username repo table = 
    self#send_getColumns username repo table;
    self#recv_getColumns
  method private send_getColumns username repo table = 
    oprot#writeMessageBegin ("getColumns", Protocol.CALL, seqid);
    let args = new getColumns_args in
      args#set_username username;
      args#set_repo repo;
      args#set_table table;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getColumns  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getColumns_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getColumns failed: unknown result")))
  method getFirstRepo username = 
    self#send_getFirstRepo username;
    self#recv_getFirstRepo
  method private send_getFirstRepo username = 
    oprot#writeMessageBegin ("getFirstRepo", Protocol.CALL, seqid);
    let args = new getFirstRepo_args in
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getFirstRepo  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getFirstRepo_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getFirstRepo failed: unknown result")))
  method getNumRepos username = 
    self#send_getNumRepos username;
    self#recv_getNumRepos
  method private send_getNumRepos username = 
    oprot#writeMessageBegin ("getNumRepos", Protocol.CALL, seqid);
    let args = new getNumRepos_args in
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getNumRepos  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getNumRepos_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getNumRepos failed: unknown result")))
  method getAllRepos username = 
    self#send_getAllRepos username;
    self#recv_getAllRepos
  method private send_getAllRepos username = 
    oprot#writeMessageBegin ("getAllRepos", Protocol.CALL, seqid);
    let args = new getAllRepos_args in
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getAllRepos  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getAllRepos_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getAllRepos failed: unknown result")))
  method saveCSSData path data = 
    self#send_saveCSSData path data;
    self#recv_saveCSSData
  method private send_saveCSSData path data = 
    oprot#writeMessageBegin ("saveCSSData", Protocol.CALL, seqid);
    let args = new saveCSSData_args in
      args#set_path path;
      args#set_data data;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_saveCSSData  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_saveCSSData_result iprot in
        iprot#readMessageEnd;
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 32
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_createNewIndividualServer (seqid, iprot, oprot) =
    let args = read_createNewIndividualServer_args iprot in
      iprot#readMessageEnd;
      let result = new createNewIndividualServer_result in
        (handler#createNewIndividualServer args#get_key);
        oprot#writeMessageBegin ("createNewIndividualServer", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_terminateSession (seqid, iprot, oprot) =
    let args = read_terminateSession_args iprot in
      iprot#readMessageEnd;
      let result = new terminateSession_result in
        (handler#terminateSession args#get_key);
        oprot#writeMessageBegin ("terminateSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeRecommendation (seqid, iprot, oprot) =
    let args = read_makeRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new makeRecommendation_result in
        result#set_success (handler#makeRecommendation args#get_key args#get_userId args#get_numRecs args#get_isBoolean args#get_displayColumns);
        oprot#writeMessageBegin ("makeRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeItemBasedRecommendations (seqid, iprot, oprot) =
    let args = read_makeItemBasedRecommendations_args iprot in
      iprot#readMessageEnd;
      let result = new makeItemBasedRecommendations_result in
        result#set_success (handler#makeItemBasedRecommendations args#get_key args#get_userId args#get_numRecs args#get_displayColumns);
        oprot#writeMessageBegin ("makeItemBasedRecommendations", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPageItems (seqid, iprot, oprot) =
    let args = read_getPageItems_args iprot in
      iprot#readMessageEnd;
      let result = new getPageItems_result in
        result#set_success (handler#getPageItems args#get_key args#get_page args#get_numPerPage args#get_displayColumns);
        oprot#writeMessageBegin ("getPageItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getItemCount (seqid, iprot, oprot) =
    let args = read_getItemCount_args iprot in
      iprot#readMessageEnd;
      let result = new getItemCount_result in
        result#set_success (handler#getItemCount args#get_key);
        oprot#writeMessageBegin ("getItemCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_recordRatings (seqid, iprot, oprot) =
    let args = read_recordRatings_args iprot in
      iprot#readMessageEnd;
      let result = new recordRatings_result in
        (handler#recordRatings args#get_key args#get_userId args#get_itemId args#get_rating);
        oprot#writeMessageBegin ("recordRatings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteRatings (seqid, iprot, oprot) =
    let args = read_deleteRatings_args iprot in
      iprot#readMessageEnd;
      let result = new deleteRatings_result in
        (handler#deleteRatings args#get_key args#get_userId args#get_itemId);
        oprot#writeMessageBegin ("deleteRatings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createNewUser (seqid, iprot, oprot) =
    let args = read_createNewUser_args iprot in
      iprot#readMessageEnd;
      let result = new createNewUser_result in
        result#set_success (handler#createNewUser args#get_key args#get_username args#get_iskibitzuser);
        oprot#writeMessageBegin ("createNewUser", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkUsername (seqid, iprot, oprot) =
    let args = read_checkUsername_args iprot in
      iprot#readMessageEnd;
      let result = new checkUsername_result in
        result#set_success (handler#checkUsername args#get_key args#get_username args#get_iskibitzuser);
        oprot#writeMessageBegin ("checkUsername", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkLogin (seqid, iprot, oprot) =
    let args = read_checkLogin_args iprot in
      iprot#readMessageEnd;
      let result = new checkLogin_result in
        result#set_success (handler#checkLogin args#get_key args#get_username args#get_password args#get_iskibitzuser);
        oprot#writeMessageBegin ("checkLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_retrieveUserId (seqid, iprot, oprot) =
    let args = read_retrieveUserId_args iprot in
      iprot#readMessageEnd;
      let result = new retrieveUserId_result in
        result#set_success (handler#retrieveUserId args#get_key args#get_username);
        oprot#writeMessageBegin ("retrieveUserId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createNewRecommender (seqid, iprot, oprot) =
    let args = read_createNewRecommender_args iprot in
      iprot#readMessageEnd;
      let result = new createNewRecommender_result in
        result#set_success (handler#createNewRecommender args#get_username args#get_primaryKey args#get_database args#get_table args#get_title args#get_description args#get_image args#get_ratings_column args#get_clientKey);
        oprot#writeMessageBegin ("createNewRecommender", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserRatedItems (seqid, iprot, oprot) =
    let args = read_getUserRatedItems_args iprot in
      iprot#readMessageEnd;
      let result = new getUserRatedItems_result in
        result#set_success (handler#getUserRatedItems args#get_key args#get_userId args#get_displayColumns);
        oprot#writeMessageBegin ("getUserRatedItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_initiateModel (seqid, iprot, oprot) =
    let args = read_initiateModel_args iprot in
      iprot#readMessageEnd;
      let result = new initiateModel_result in
        (handler#initiateModel args#get_key args#get_table args#get_username args#get_database);
        oprot#writeMessageBegin ("initiateModel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSearchItems (seqid, iprot, oprot) =
    let args = read_getSearchItems_args iprot in
      iprot#readMessageEnd;
      let result = new getSearchItems_result in
        result#set_success (handler#getSearchItems args#get_table args#get_query args#get_columnsToSearch args#get_displayColumns);
        oprot#writeMessageBegin ("getSearchItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeOverallRatingBasedOrRandomRecommendation (seqid, iprot, oprot) =
    let args = read_makeOverallRatingBasedOrRandomRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new makeOverallRatingBasedOrRandomRecommendation_result in
        result#set_success (handler#makeOverallRatingBasedOrRandomRecommendation args#get_key args#get_ratingColumnName args#get_numRecs args#get_displayColumns);
        oprot#writeMessageBegin ("makeOverallRatingBasedOrRandomRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addKibitzUser (seqid, iprot, oprot) =
    let args = read_addKibitzUser_args iprot in
      iprot#readMessageEnd;
      let result = new addKibitzUser_result in
        (handler#addKibitzUser args#get_email args#get_password);
        oprot#writeMessageBegin ("addKibitzUser", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkCorrectDatahubLogin (seqid, iprot, oprot) =
    let args = read_checkCorrectDatahubLogin_args iprot in
      iprot#readMessageEnd;
      let result = new checkCorrectDatahubLogin_result in
        result#set_success (handler#checkCorrectDatahubLogin args#get_username args#get_repository args#get_table args#get_primary_key args#get_title args#get_description args#get_image);
        oprot#writeMessageBegin ("checkCorrectDatahubLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkRatingsColumn (seqid, iprot, oprot) =
    let args = read_checkRatingsColumn_args iprot in
      iprot#readMessageEnd;
      let result = new checkRatingsColumn_result in
        result#set_success (handler#checkRatingsColumn args#get_username args#get_table args#get_repository args#get_ratings_column);
        oprot#writeMessageBegin ("checkRatingsColumn", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecommenders (seqid, iprot, oprot) =
    let args = read_getRecommenders_args iprot in
      iprot#readMessageEnd;
      let result = new getRecommenders_result in
        result#set_success (handler#getRecommenders args#get_username);
        oprot#writeMessageBegin ("getRecommenders", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfilePicture (seqid, iprot, oprot) =
    let args = read_getProfilePicture_args iprot in
      iprot#readMessageEnd;
      let result = new getProfilePicture_result in
        result#set_success (handler#getProfilePicture args#get_username);
        oprot#writeMessageBegin ("getProfilePicture", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_saveFBProfilePic (seqid, iprot, oprot) =
    let args = read_saveFBProfilePic_args iprot in
      iprot#readMessageEnd;
      let result = new saveFBProfilePic_result in
        (handler#saveFBProfilePic args#get_username args#get_fbUsername);
        oprot#writeMessageBegin ("saveFBProfilePic", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteRecommender (seqid, iprot, oprot) =
    let args = read_deleteRecommender_args iprot in
      iprot#readMessageEnd;
      let result = new deleteRecommender_result in
        (handler#deleteRecommender args#get_clientKey);
        oprot#writeMessageBegin ("deleteRecommender", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateTemplate (seqid, iprot, oprot) =
    let args = read_updateTemplate_args iprot in
      iprot#readMessageEnd;
      let result = new updateTemplate_result in
        (handler#updateTemplate args#get_username args#get_primaryKey args#get_title args#get_description args#get_image args#get_video args#get_itemTypes args#get_displayItems args#get_maxRatingVal args#get_numRecs args#get_recommenderName args#get_clientKey args#get_homepage args#get_creatorName args#get_repoName args#get_tableName args#get_ratingsColumn);
        oprot#writeMessageBegin ("updateTemplate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_configurePrefilledUserRatings (seqid, iprot, oprot) =
    let args = read_configurePrefilledUserRatings_args iprot in
      iprot#readMessageEnd;
      let result = new configurePrefilledUserRatings_result in
        (handler#configurePrefilledUserRatings args#get_username args#get_repoName args#get_primaryKey args#get_itemTable args#get_tableName args#get_userIdCol args#get_itemIdCol args#get_userRatingCol);
        oprot#writeMessageBegin ("configurePrefilledUserRatings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getTables (seqid, iprot, oprot) =
    let args = read_getTables_args iprot in
      iprot#readMessageEnd;
      let result = new getTables_result in
        result#set_success (handler#getTables args#get_username args#get_repo);
        oprot#writeMessageBegin ("getTables", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getColumns (seqid, iprot, oprot) =
    let args = read_getColumns_args iprot in
      iprot#readMessageEnd;
      let result = new getColumns_result in
        result#set_success (handler#getColumns args#get_username args#get_repo args#get_table);
        oprot#writeMessageBegin ("getColumns", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getFirstRepo (seqid, iprot, oprot) =
    let args = read_getFirstRepo_args iprot in
      iprot#readMessageEnd;
      let result = new getFirstRepo_result in
        result#set_success (handler#getFirstRepo args#get_username);
        oprot#writeMessageBegin ("getFirstRepo", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getNumRepos (seqid, iprot, oprot) =
    let args = read_getNumRepos_args iprot in
      iprot#readMessageEnd;
      let result = new getNumRepos_result in
        result#set_success (handler#getNumRepos args#get_username);
        oprot#writeMessageBegin ("getNumRepos", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getAllRepos (seqid, iprot, oprot) =
    let args = read_getAllRepos_args iprot in
      iprot#readMessageEnd;
      let result = new getAllRepos_result in
        result#set_success (handler#getAllRepos args#get_username);
        oprot#writeMessageBegin ("getAllRepos", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_saveCSSData (seqid, iprot, oprot) =
    let args = read_saveCSSData_args iprot in
      iprot#readMessageEnd;
      let result = new saveCSSData_result in
        (handler#saveCSSData args#get_path args#get_data);
        oprot#writeMessageBegin ("saveCSSData", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "createNewIndividualServer" self#process_createNewIndividualServer;
    Hashtbl.add processMap "terminateSession" self#process_terminateSession;
    Hashtbl.add processMap "makeRecommendation" self#process_makeRecommendation;
    Hashtbl.add processMap "makeItemBasedRecommendations" self#process_makeItemBasedRecommendations;
    Hashtbl.add processMap "getPageItems" self#process_getPageItems;
    Hashtbl.add processMap "getItemCount" self#process_getItemCount;
    Hashtbl.add processMap "recordRatings" self#process_recordRatings;
    Hashtbl.add processMap "deleteRatings" self#process_deleteRatings;
    Hashtbl.add processMap "createNewUser" self#process_createNewUser;
    Hashtbl.add processMap "checkUsername" self#process_checkUsername;
    Hashtbl.add processMap "checkLogin" self#process_checkLogin;
    Hashtbl.add processMap "retrieveUserId" self#process_retrieveUserId;
    Hashtbl.add processMap "createNewRecommender" self#process_createNewRecommender;
    Hashtbl.add processMap "getUserRatedItems" self#process_getUserRatedItems;
    Hashtbl.add processMap "initiateModel" self#process_initiateModel;
    Hashtbl.add processMap "getSearchItems" self#process_getSearchItems;
    Hashtbl.add processMap "makeOverallRatingBasedOrRandomRecommendation" self#process_makeOverallRatingBasedOrRandomRecommendation;
    Hashtbl.add processMap "addKibitzUser" self#process_addKibitzUser;
    Hashtbl.add processMap "checkCorrectDatahubLogin" self#process_checkCorrectDatahubLogin;
    Hashtbl.add processMap "checkRatingsColumn" self#process_checkRatingsColumn;
    Hashtbl.add processMap "getRecommenders" self#process_getRecommenders;
    Hashtbl.add processMap "getProfilePicture" self#process_getProfilePicture;
    Hashtbl.add processMap "saveFBProfilePic" self#process_saveFBProfilePic;
    Hashtbl.add processMap "deleteRecommender" self#process_deleteRecommender;
    Hashtbl.add processMap "updateTemplate" self#process_updateTemplate;
    Hashtbl.add processMap "configurePrefilledUserRatings" self#process_configurePrefilledUserRatings;
    Hashtbl.add processMap "getTables" self#process_getTables;
    Hashtbl.add processMap "getColumns" self#process_getColumns;
    Hashtbl.add processMap "getFirstRepo" self#process_getFirstRepo;
    Hashtbl.add processMap "getNumRepos" self#process_getNumRepos;
    Hashtbl.add processMap "getAllRepos" self#process_getAllRepos;
    Hashtbl.add processMap "saveCSSData" self#process_saveCSSData;
end

