(*
 Autogenerated by Thrift Compiler (0.9.1)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Kibitz_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class createNewIndividualServer_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "createNewIndividualServer_args.key") | Some _x49 -> _x49
  method set_key _x49 = _key <- Some _x49
  method unset_key = _key <- None
  method reset_key = _key <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewIndividualServer_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewIndividualServer_args (iprot : Protocol.t) =
  let _str52 = new createNewIndividualServer_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t53,_id54) = iprot#readFieldBegin in
        if _t53 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id54 with 
          | 1 -> (if _t53 = Protocol.T_STRING then
              _str52#set_key iprot#readString
            else
              iprot#skip _t53)
          | _ -> iprot#skip _t53);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str52

class createNewIndividualServer_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewIndividualServer_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewIndividualServer_result (iprot : Protocol.t) =
  let _str57 = new createNewIndividualServer_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t58,_id59) = iprot#readFieldBegin in
        if _t58 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id59 with 
          | _ -> iprot#skip _t58);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str57

class terminateSession_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "terminateSession_args.key") | Some _x60 -> _x60
  method set_key _x60 = _key <- Some _x60
  method unset_key = _key <- None
  method reset_key = _key <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "terminateSession_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_terminateSession_args (iprot : Protocol.t) =
  let _str63 = new terminateSession_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t64,_id65) = iprot#readFieldBegin in
        if _t64 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id65 with 
          | 1 -> (if _t64 = Protocol.T_STRING then
              _str63#set_key iprot#readString
            else
              iprot#skip _t64)
          | _ -> iprot#skip _t64);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str63

class terminateSession_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "terminateSession_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_terminateSession_result (iprot : Protocol.t) =
  let _str68 = new terminateSession_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t69,_id70) = iprot#readFieldBegin in
        if _t69 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id70 with 
          | _ -> iprot#skip _t69);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str68

class makeRecommendation_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "makeRecommendation_args.key") | Some _x71 -> _x71
  method set_key _x71 = _key <- Some _x71
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "makeRecommendation_args.userId") | Some _x72 -> _x72
  method set_userId _x72 = _userId <- Some _x72
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "makeRecommendation_args.numRecs") | Some _x73 -> _x73
  method set_numRecs _x73 = _numRecs <- Some _x73
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _isBoolean : bool option = None
  method get_isBoolean = _isBoolean
  method grab_isBoolean = match _isBoolean with None->raise (Field_empty "makeRecommendation_args.isBoolean") | Some _x74 -> _x74
  method set_isBoolean _x74 = _isBoolean <- Some _x74
  method unset_isBoolean = _isBoolean <- None
  method reset_isBoolean = _isBoolean <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "makeRecommendation_args.displayColumns") | Some _x75 -> _x75
  method set_displayColumns _x75 = _displayColumns <- Some _x75
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeRecommendation_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _isBoolean with None -> () | Some _v -> 
      oprot#writeFieldBegin("isBoolean",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,5);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter78 ->         oprot#writeString(_iter78);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeRecommendation_args (iprot : Protocol.t) =
  let _str79 = new makeRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t80,_id81) = iprot#readFieldBegin in
        if _t80 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id81 with 
          | 1 -> (if _t80 = Protocol.T_STRING then
              _str79#set_key iprot#readString
            else
              iprot#skip _t80)
          | 2 -> (if _t80 = Protocol.T_I64 then
              _str79#set_userId iprot#readI64
            else
              iprot#skip _t80)
          | 3 -> (if _t80 = Protocol.T_I64 then
              _str79#set_numRecs iprot#readI64
            else
              iprot#skip _t80)
          | 4 -> (if _t80 = Protocol.T_BOOL then
              _str79#set_isBoolean iprot#readBool
            else
              iprot#skip _t80)
          | 5 -> (if _t80 = Protocol.T_LIST then
              _str79#set_displayColumns 
                (let (_etype85,_size82) = iprot#readListBegin in
                  let _con86 = (Array.to_list (Array.init _size82 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con86)
            else
              iprot#skip _t80)
          | _ -> iprot#skip _t80);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str79

class makeRecommendation_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeRecommendation_result.success") | Some _x87 -> _x87
  method set_success _x87 = _success <- Some _x87
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeRecommendation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter90 ->         _iter90#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeRecommendation_result (iprot : Protocol.t) =
  let _str91 = new makeRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t92,_id93) = iprot#readFieldBegin in
        if _t92 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id93 with 
          | 0 -> (if _t92 = Protocol.T_LIST then
              _str91#set_success 
                (let (_etype97,_size94) = iprot#readListBegin in
                  let _con98 = (Array.to_list (Array.init _size94 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con98)
            else
              iprot#skip _t92)
          | _ -> iprot#skip _t92);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str91

class makeItemBasedRecommendations_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "makeItemBasedRecommendations_args.key") | Some _x99 -> _x99
  method set_key _x99 = _key <- Some _x99
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "makeItemBasedRecommendations_args.userId") | Some _x100 -> _x100
  method set_userId _x100 = _userId <- Some _x100
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "makeItemBasedRecommendations_args.numRecs") | Some _x101 -> _x101
  method set_numRecs _x101 = _numRecs <- Some _x101
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "makeItemBasedRecommendations_args.displayColumns") | Some _x102 -> _x102
  method set_displayColumns _x102 = _displayColumns <- Some _x102
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeItemBasedRecommendations_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter105 ->         oprot#writeString(_iter105);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeItemBasedRecommendations_args (iprot : Protocol.t) =
  let _str106 = new makeItemBasedRecommendations_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t107,_id108) = iprot#readFieldBegin in
        if _t107 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id108 with 
          | 1 -> (if _t107 = Protocol.T_STRING then
              _str106#set_key iprot#readString
            else
              iprot#skip _t107)
          | 2 -> (if _t107 = Protocol.T_I64 then
              _str106#set_userId iprot#readI64
            else
              iprot#skip _t107)
          | 3 -> (if _t107 = Protocol.T_I64 then
              _str106#set_numRecs iprot#readI64
            else
              iprot#skip _t107)
          | 4 -> (if _t107 = Protocol.T_LIST then
              _str106#set_displayColumns 
                (let (_etype112,_size109) = iprot#readListBegin in
                  let _con113 = (Array.to_list (Array.init _size109 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con113)
            else
              iprot#skip _t107)
          | _ -> iprot#skip _t107);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str106

class makeItemBasedRecommendations_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeItemBasedRecommendations_result.success") | Some _x114 -> _x114
  method set_success _x114 = _success <- Some _x114
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeItemBasedRecommendations_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter117 ->         _iter117#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeItemBasedRecommendations_result (iprot : Protocol.t) =
  let _str118 = new makeItemBasedRecommendations_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t119,_id120) = iprot#readFieldBegin in
        if _t119 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id120 with 
          | 0 -> (if _t119 = Protocol.T_LIST then
              _str118#set_success 
                (let (_etype124,_size121) = iprot#readListBegin in
                  let _con125 = (Array.to_list (Array.init _size121 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con125)
            else
              iprot#skip _t119)
          | _ -> iprot#skip _t119);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str118

class getPageItems_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "getPageItems_args.key") | Some _x126 -> _x126
  method set_key _x126 = _key <- Some _x126
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _page : Int64.t option = None
  method get_page = _page
  method grab_page = match _page with None->raise (Field_empty "getPageItems_args.page") | Some _x127 -> _x127
  method set_page _x127 = _page <- Some _x127
  method unset_page = _page <- None
  method reset_page = _page <- None

  val mutable _numPerPage : Int64.t option = None
  method get_numPerPage = _numPerPage
  method grab_numPerPage = match _numPerPage with None->raise (Field_empty "getPageItems_args.numPerPage") | Some _x128 -> _x128
  method set_numPerPage _x128 = _numPerPage <- Some _x128
  method unset_numPerPage = _numPerPage <- None
  method reset_numPerPage = _numPerPage <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "getPageItems_args.displayColumns") | Some _x129 -> _x129
  method set_displayColumns _x129 = _displayColumns <- Some _x129
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPageItems_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _page with None -> () | Some _v -> 
      oprot#writeFieldBegin("page",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numPerPage with None -> () | Some _v -> 
      oprot#writeFieldBegin("numPerPage",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter132 ->         oprot#writeString(_iter132);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPageItems_args (iprot : Protocol.t) =
  let _str133 = new getPageItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t134,_id135) = iprot#readFieldBegin in
        if _t134 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id135 with 
          | 1 -> (if _t134 = Protocol.T_STRING then
              _str133#set_key iprot#readString
            else
              iprot#skip _t134)
          | 2 -> (if _t134 = Protocol.T_I64 then
              _str133#set_page iprot#readI64
            else
              iprot#skip _t134)
          | 3 -> (if _t134 = Protocol.T_I64 then
              _str133#set_numPerPage iprot#readI64
            else
              iprot#skip _t134)
          | 4 -> (if _t134 = Protocol.T_LIST then
              _str133#set_displayColumns 
                (let (_etype139,_size136) = iprot#readListBegin in
                  let _con140 = (Array.to_list (Array.init _size136 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con140)
            else
              iprot#skip _t134)
          | _ -> iprot#skip _t134);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str133

class getPageItems_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getPageItems_result.success") | Some _x141 -> _x141
  method set_success _x141 = _success <- Some _x141
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getPageItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter144 ->         _iter144#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getPageItems_result (iprot : Protocol.t) =
  let _str145 = new getPageItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t146,_id147) = iprot#readFieldBegin in
        if _t146 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id147 with 
          | 0 -> (if _t146 = Protocol.T_LIST then
              _str145#set_success 
                (let (_etype151,_size148) = iprot#readListBegin in
                  let _con152 = (Array.to_list (Array.init _size148 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con152)
            else
              iprot#skip _t146)
          | _ -> iprot#skip _t146);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str145

class getItemCount_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "getItemCount_args.key") | Some _x153 -> _x153
  method set_key _x153 = _key <- Some _x153
  method unset_key = _key <- None
  method reset_key = _key <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getItemCount_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getItemCount_args (iprot : Protocol.t) =
  let _str156 = new getItemCount_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t157,_id158) = iprot#readFieldBegin in
        if _t157 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id158 with 
          | 1 -> (if _t157 = Protocol.T_STRING then
              _str156#set_key iprot#readString
            else
              iprot#skip _t157)
          | _ -> iprot#skip _t157);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str156

class getItemCount_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getItemCount_result.success") | Some _x159 -> _x159
  method set_success _x159 = _success <- Some _x159
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getItemCount_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getItemCount_result (iprot : Protocol.t) =
  let _str162 = new getItemCount_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t163,_id164) = iprot#readFieldBegin in
        if _t163 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id164 with 
          | 0 -> (if _t163 = Protocol.T_I64 then
              _str162#set_success iprot#readI64
            else
              iprot#skip _t163)
          | _ -> iprot#skip _t163);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str162

class recordRatings_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "recordRatings_args.key") | Some _x165 -> _x165
  method set_key _x165 = _key <- Some _x165
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "recordRatings_args.userId") | Some _x166 -> _x166
  method set_userId _x166 = _userId <- Some _x166
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _itemId : Int64.t option = None
  method get_itemId = _itemId
  method grab_itemId = match _itemId with None->raise (Field_empty "recordRatings_args.itemId") | Some _x167 -> _x167
  method set_itemId _x167 = _itemId <- Some _x167
  method unset_itemId = _itemId <- None
  method reset_itemId = _itemId <- None

  val mutable _rating : Int64.t option = None
  method get_rating = _rating
  method grab_rating = match _rating with None->raise (Field_empty "recordRatings_args.rating") | Some _x168 -> _x168
  method set_rating _x168 = _rating <- Some _x168
  method unset_rating = _rating <- None
  method reset_rating = _rating <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "recordRatings_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _itemId with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemId",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _rating with None -> () | Some _v -> 
      oprot#writeFieldBegin("rating",Protocol.T_I64,4);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_recordRatings_args (iprot : Protocol.t) =
  let _str171 = new recordRatings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t172,_id173) = iprot#readFieldBegin in
        if _t172 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id173 with 
          | 1 -> (if _t172 = Protocol.T_STRING then
              _str171#set_key iprot#readString
            else
              iprot#skip _t172)
          | 2 -> (if _t172 = Protocol.T_I64 then
              _str171#set_userId iprot#readI64
            else
              iprot#skip _t172)
          | 3 -> (if _t172 = Protocol.T_I64 then
              _str171#set_itemId iprot#readI64
            else
              iprot#skip _t172)
          | 4 -> (if _t172 = Protocol.T_I64 then
              _str171#set_rating iprot#readI64
            else
              iprot#skip _t172)
          | _ -> iprot#skip _t172);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str171

class recordRatings_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "recordRatings_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_recordRatings_result (iprot : Protocol.t) =
  let _str176 = new recordRatings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t177,_id178) = iprot#readFieldBegin in
        if _t177 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id178 with 
          | _ -> iprot#skip _t177);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str176

class deleteRatings_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "deleteRatings_args.key") | Some _x179 -> _x179
  method set_key _x179 = _key <- Some _x179
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "deleteRatings_args.userId") | Some _x180 -> _x180
  method set_userId _x180 = _userId <- Some _x180
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _itemId : Int64.t option = None
  method get_itemId = _itemId
  method grab_itemId = match _itemId with None->raise (Field_empty "deleteRatings_args.itemId") | Some _x181 -> _x181
  method set_itemId _x181 = _itemId <- Some _x181
  method unset_itemId = _itemId <- None
  method reset_itemId = _itemId <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRatings_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _itemId with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemId",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRatings_args (iprot : Protocol.t) =
  let _str184 = new deleteRatings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t185,_id186) = iprot#readFieldBegin in
        if _t185 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id186 with 
          | 1 -> (if _t185 = Protocol.T_STRING then
              _str184#set_key iprot#readString
            else
              iprot#skip _t185)
          | 2 -> (if _t185 = Protocol.T_I64 then
              _str184#set_userId iprot#readI64
            else
              iprot#skip _t185)
          | 3 -> (if _t185 = Protocol.T_I64 then
              _str184#set_itemId iprot#readI64
            else
              iprot#skip _t185)
          | _ -> iprot#skip _t185);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str184

class deleteRatings_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRatings_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRatings_result (iprot : Protocol.t) =
  let _str189 = new deleteRatings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t190,_id191) = iprot#readFieldBegin in
        if _t190 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id191 with 
          | _ -> iprot#skip _t190);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str189

class createNewUser_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "createNewUser_args.key") | Some _x192 -> _x192
  method set_key _x192 = _key <- Some _x192
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "createNewUser_args.username") | Some _x193 -> _x193
  method set_username _x193 = _username <- Some _x193
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _iskibitzuser : bool option = None
  method get_iskibitzuser = _iskibitzuser
  method grab_iskibitzuser = match _iskibitzuser with None->raise (Field_empty "createNewUser_args.iskibitzuser") | Some _x194 -> _x194
  method set_iskibitzuser _x194 = _iskibitzuser <- Some _x194
  method unset_iskibitzuser = _iskibitzuser <- None
  method reset_iskibitzuser = _iskibitzuser <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewUser_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _iskibitzuser with None -> () | Some _v -> 
      oprot#writeFieldBegin("iskibitzuser",Protocol.T_BOOL,3);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewUser_args (iprot : Protocol.t) =
  let _str197 = new createNewUser_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t198,_id199) = iprot#readFieldBegin in
        if _t198 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id199 with 
          | 1 -> (if _t198 = Protocol.T_STRING then
              _str197#set_key iprot#readString
            else
              iprot#skip _t198)
          | 2 -> (if _t198 = Protocol.T_STRING then
              _str197#set_username iprot#readString
            else
              iprot#skip _t198)
          | 3 -> (if _t198 = Protocol.T_BOOL then
              _str197#set_iskibitzuser iprot#readBool
            else
              iprot#skip _t198)
          | _ -> iprot#skip _t198);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str197

class createNewUser_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createNewUser_result.success") | Some _x200 -> _x200
  method set_success _x200 = _success <- Some _x200
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewUser_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewUser_result (iprot : Protocol.t) =
  let _str203 = new createNewUser_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t204,_id205) = iprot#readFieldBegin in
        if _t204 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id205 with 
          | 0 -> (if _t204 = Protocol.T_STRING then
              _str203#set_success iprot#readString
            else
              iprot#skip _t204)
          | _ -> iprot#skip _t204);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str203

class checkUsername_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "checkUsername_args.key") | Some _x206 -> _x206
  method set_key _x206 = _key <- Some _x206
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkUsername_args.username") | Some _x207 -> _x207
  method set_username _x207 = _username <- Some _x207
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _iskibitzuser : bool option = None
  method get_iskibitzuser = _iskibitzuser
  method grab_iskibitzuser = match _iskibitzuser with None->raise (Field_empty "checkUsername_args.iskibitzuser") | Some _x208 -> _x208
  method set_iskibitzuser _x208 = _iskibitzuser <- Some _x208
  method unset_iskibitzuser = _iskibitzuser <- None
  method reset_iskibitzuser = _iskibitzuser <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkUsername_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _iskibitzuser with None -> () | Some _v -> 
      oprot#writeFieldBegin("iskibitzuser",Protocol.T_BOOL,3);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkUsername_args (iprot : Protocol.t) =
  let _str211 = new checkUsername_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t212,_id213) = iprot#readFieldBegin in
        if _t212 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id213 with 
          | 1 -> (if _t212 = Protocol.T_STRING then
              _str211#set_key iprot#readString
            else
              iprot#skip _t212)
          | 2 -> (if _t212 = Protocol.T_STRING then
              _str211#set_username iprot#readString
            else
              iprot#skip _t212)
          | 3 -> (if _t212 = Protocol.T_BOOL then
              _str211#set_iskibitzuser iprot#readBool
            else
              iprot#skip _t212)
          | _ -> iprot#skip _t212);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str211

class checkUsername_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkUsername_result.success") | Some _x214 -> _x214
  method set_success _x214 = _success <- Some _x214
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkUsername_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkUsername_result (iprot : Protocol.t) =
  let _str217 = new checkUsername_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t218,_id219) = iprot#readFieldBegin in
        if _t218 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id219 with 
          | 0 -> (if _t218 = Protocol.T_BOOL then
              _str217#set_success iprot#readBool
            else
              iprot#skip _t218)
          | _ -> iprot#skip _t218);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str217

class checkLogin_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "checkLogin_args.key") | Some _x220 -> _x220
  method set_key _x220 = _key <- Some _x220
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkLogin_args.username") | Some _x221 -> _x221
  method set_username _x221 = _username <- Some _x221
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "checkLogin_args.password") | Some _x222 -> _x222
  method set_password _x222 = _password <- Some _x222
  method unset_password = _password <- None
  method reset_password = _password <- None

  val mutable _iskibitzuser : bool option = None
  method get_iskibitzuser = _iskibitzuser
  method grab_iskibitzuser = match _iskibitzuser with None->raise (Field_empty "checkLogin_args.iskibitzuser") | Some _x223 -> _x223
  method set_iskibitzuser _x223 = _iskibitzuser <- Some _x223
  method unset_iskibitzuser = _iskibitzuser <- None
  method reset_iskibitzuser = _iskibitzuser <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkLogin_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _iskibitzuser with None -> () | Some _v -> 
      oprot#writeFieldBegin("iskibitzuser",Protocol.T_BOOL,4);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkLogin_args (iprot : Protocol.t) =
  let _str226 = new checkLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t227,_id228) = iprot#readFieldBegin in
        if _t227 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id228 with 
          | 1 -> (if _t227 = Protocol.T_STRING then
              _str226#set_key iprot#readString
            else
              iprot#skip _t227)
          | 2 -> (if _t227 = Protocol.T_STRING then
              _str226#set_username iprot#readString
            else
              iprot#skip _t227)
          | 3 -> (if _t227 = Protocol.T_STRING then
              _str226#set_password iprot#readString
            else
              iprot#skip _t227)
          | 4 -> (if _t227 = Protocol.T_BOOL then
              _str226#set_iskibitzuser iprot#readBool
            else
              iprot#skip _t227)
          | _ -> iprot#skip _t227);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str226

class checkLogin_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkLogin_result.success") | Some _x229 -> _x229
  method set_success _x229 = _success <- Some _x229
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkLogin_result (iprot : Protocol.t) =
  let _str232 = new checkLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t233,_id234) = iprot#readFieldBegin in
        if _t233 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id234 with 
          | 0 -> (if _t233 = Protocol.T_BOOL then
              _str232#set_success iprot#readBool
            else
              iprot#skip _t233)
          | _ -> iprot#skip _t233);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str232

class retrieveUserId_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "retrieveUserId_args.key") | Some _x235 -> _x235
  method set_key _x235 = _key <- Some _x235
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "retrieveUserId_args.username") | Some _x236 -> _x236
  method set_username _x236 = _username <- Some _x236
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "retrieveUserId_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_retrieveUserId_args (iprot : Protocol.t) =
  let _str239 = new retrieveUserId_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t240,_id241) = iprot#readFieldBegin in
        if _t240 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id241 with 
          | 1 -> (if _t240 = Protocol.T_STRING then
              _str239#set_key iprot#readString
            else
              iprot#skip _t240)
          | 2 -> (if _t240 = Protocol.T_STRING then
              _str239#set_username iprot#readString
            else
              iprot#skip _t240)
          | _ -> iprot#skip _t240);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str239

class retrieveUserId_result =
object (self)
  val mutable _success : Int64.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "retrieveUserId_result.success") | Some _x242 -> _x242
  method set_success _x242 = _success <- Some _x242
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "retrieveUserId_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I64,0);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_retrieveUserId_result (iprot : Protocol.t) =
  let _str245 = new retrieveUserId_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t246,_id247) = iprot#readFieldBegin in
        if _t246 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id247 with 
          | 0 -> (if _t246 = Protocol.T_I64 then
              _str245#set_success iprot#readI64
            else
              iprot#skip _t246)
          | _ -> iprot#skip _t246);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str245

class createNewRecommender_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "createNewRecommender_args.username") | Some _x248 -> _x248
  method set_username _x248 = _username <- Some _x248
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _primaryKey : string option = None
  method get_primaryKey = _primaryKey
  method grab_primaryKey = match _primaryKey with None->raise (Field_empty "createNewRecommender_args.primaryKey") | Some _x249 -> _x249
  method set_primaryKey _x249 = _primaryKey <- Some _x249
  method unset_primaryKey = _primaryKey <- None
  method reset_primaryKey = _primaryKey <- None

  val mutable _database : string option = None
  method get_database = _database
  method grab_database = match _database with None->raise (Field_empty "createNewRecommender_args.database") | Some _x250 -> _x250
  method set_database _x250 = _database <- Some _x250
  method unset_database = _database <- None
  method reset_database = _database <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "createNewRecommender_args.table") | Some _x251 -> _x251
  method set_table _x251 = _table <- Some _x251
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _title : string option = None
  method get_title = _title
  method grab_title = match _title with None->raise (Field_empty "createNewRecommender_args.title") | Some _x252 -> _x252
  method set_title _x252 = _title <- Some _x252
  method unset_title = _title <- None
  method reset_title = _title <- None

  val mutable _description : string option = None
  method get_description = _description
  method grab_description = match _description with None->raise (Field_empty "createNewRecommender_args.description") | Some _x253 -> _x253
  method set_description _x253 = _description <- Some _x253
  method unset_description = _description <- None
  method reset_description = _description <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "createNewRecommender_args.image") | Some _x254 -> _x254
  method set_image _x254 = _image <- Some _x254
  method unset_image = _image <- None
  method reset_image = _image <- None

  val mutable _ratings_column : string option = None
  method get_ratings_column = _ratings_column
  method grab_ratings_column = match _ratings_column with None->raise (Field_empty "createNewRecommender_args.ratings_column") | Some _x255 -> _x255
  method set_ratings_column _x255 = _ratings_column <- Some _x255
  method unset_ratings_column = _ratings_column <- None
  method reset_ratings_column = _ratings_column <- None

  val mutable _clientKey : string option = None
  method get_clientKey = _clientKey
  method grab_clientKey = match _clientKey with None->raise (Field_empty "createNewRecommender_args.clientKey") | Some _x256 -> _x256
  method set_clientKey _x256 = _clientKey <- Some _x256
  method unset_clientKey = _clientKey <- None
  method reset_clientKey = _clientKey <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewRecommender_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primaryKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("primaryKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _database with None -> () | Some _v -> 
      oprot#writeFieldBegin("database",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _title with None -> () | Some _v -> 
      oprot#writeFieldBegin("title",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _description with None -> () | Some _v -> 
      oprot#writeFieldBegin("description",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratings_column with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratings_column",Protocol.T_STRING,9);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _clientKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("clientKey",Protocol.T_STRING,10);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewRecommender_args (iprot : Protocol.t) =
  let _str259 = new createNewRecommender_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t260,_id261) = iprot#readFieldBegin in
        if _t260 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id261 with 
          | 1 -> (if _t260 = Protocol.T_STRING then
              _str259#set_username iprot#readString
            else
              iprot#skip _t260)
          | 2 -> (if _t260 = Protocol.T_STRING then
              _str259#set_primaryKey iprot#readString
            else
              iprot#skip _t260)
          | 3 -> (if _t260 = Protocol.T_STRING then
              _str259#set_database iprot#readString
            else
              iprot#skip _t260)
          | 5 -> (if _t260 = Protocol.T_STRING then
              _str259#set_table iprot#readString
            else
              iprot#skip _t260)
          | 6 -> (if _t260 = Protocol.T_STRING then
              _str259#set_title iprot#readString
            else
              iprot#skip _t260)
          | 7 -> (if _t260 = Protocol.T_STRING then
              _str259#set_description iprot#readString
            else
              iprot#skip _t260)
          | 8 -> (if _t260 = Protocol.T_STRING then
              _str259#set_image iprot#readString
            else
              iprot#skip _t260)
          | 9 -> (if _t260 = Protocol.T_STRING then
              _str259#set_ratings_column iprot#readString
            else
              iprot#skip _t260)
          | 10 -> (if _t260 = Protocol.T_STRING then
              _str259#set_clientKey iprot#readString
            else
              iprot#skip _t260)
          | _ -> iprot#skip _t260);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str259

class createNewRecommender_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "createNewRecommender_result.success") | Some _x262 -> _x262
  method set_success _x262 = _success <- Some _x262
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "createNewRecommender_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_createNewRecommender_result (iprot : Protocol.t) =
  let _str265 = new createNewRecommender_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t266,_id267) = iprot#readFieldBegin in
        if _t266 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id267 with 
          | 0 -> (if _t266 = Protocol.T_BOOL then
              _str265#set_success iprot#readBool
            else
              iprot#skip _t266)
          | _ -> iprot#skip _t266);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str265

class getUserRatedItems_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "getUserRatedItems_args.key") | Some _x268 -> _x268
  method set_key _x268 = _key <- Some _x268
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _userId : Int64.t option = None
  method get_userId = _userId
  method grab_userId = match _userId with None->raise (Field_empty "getUserRatedItems_args.userId") | Some _x269 -> _x269
  method set_userId _x269 = _userId <- Some _x269
  method unset_userId = _userId <- None
  method reset_userId = _userId <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "getUserRatedItems_args.displayColumns") | Some _x270 -> _x270
  method set_displayColumns _x270 = _displayColumns <- Some _x270
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserRatedItems_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userId with None -> () | Some _v -> 
      oprot#writeFieldBegin("userId",Protocol.T_I64,2);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter273 ->         oprot#writeString(_iter273);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserRatedItems_args (iprot : Protocol.t) =
  let _str274 = new getUserRatedItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t275,_id276) = iprot#readFieldBegin in
        if _t275 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id276 with 
          | 1 -> (if _t275 = Protocol.T_STRING then
              _str274#set_key iprot#readString
            else
              iprot#skip _t275)
          | 2 -> (if _t275 = Protocol.T_I64 then
              _str274#set_userId iprot#readI64
            else
              iprot#skip _t275)
          | 3 -> (if _t275 = Protocol.T_LIST then
              _str274#set_displayColumns 
                (let (_etype280,_size277) = iprot#readListBegin in
                  let _con281 = (Array.to_list (Array.init _size277 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con281)
            else
              iprot#skip _t275)
          | _ -> iprot#skip _t275);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str274

class getUserRatedItems_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getUserRatedItems_result.success") | Some _x282 -> _x282
  method set_success _x282 = _success <- Some _x282
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getUserRatedItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter285 ->         _iter285#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getUserRatedItems_result (iprot : Protocol.t) =
  let _str286 = new getUserRatedItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t287,_id288) = iprot#readFieldBegin in
        if _t287 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id288 with 
          | 0 -> (if _t287 = Protocol.T_LIST then
              _str286#set_success 
                (let (_etype292,_size289) = iprot#readListBegin in
                  let _con293 = (Array.to_list (Array.init _size289 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con293)
            else
              iprot#skip _t287)
          | _ -> iprot#skip _t287);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str286

class initiateModel_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "initiateModel_args.key") | Some _x294 -> _x294
  method set_key _x294 = _key <- Some _x294
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "initiateModel_args.table") | Some _x295 -> _x295
  method set_table _x295 = _table <- Some _x295
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "initiateModel_args.username") | Some _x296 -> _x296
  method set_username _x296 = _username <- Some _x296
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _database : string option = None
  method get_database = _database
  method grab_database = match _database with None->raise (Field_empty "initiateModel_args.database") | Some _x297 -> _x297
  method set_database _x297 = _database <- Some _x297
  method unset_database = _database <- None
  method reset_database = _database <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "initiateModel_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _database with None -> () | Some _v -> 
      oprot#writeFieldBegin("database",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_initiateModel_args (iprot : Protocol.t) =
  let _str300 = new initiateModel_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t301,_id302) = iprot#readFieldBegin in
        if _t301 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id302 with 
          | 1 -> (if _t301 = Protocol.T_STRING then
              _str300#set_key iprot#readString
            else
              iprot#skip _t301)
          | 2 -> (if _t301 = Protocol.T_STRING then
              _str300#set_table iprot#readString
            else
              iprot#skip _t301)
          | 3 -> (if _t301 = Protocol.T_STRING then
              _str300#set_username iprot#readString
            else
              iprot#skip _t301)
          | 4 -> (if _t301 = Protocol.T_STRING then
              _str300#set_database iprot#readString
            else
              iprot#skip _t301)
          | _ -> iprot#skip _t301);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str300

class initiateModel_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "initiateModel_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_initiateModel_result (iprot : Protocol.t) =
  let _str305 = new initiateModel_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t306,_id307) = iprot#readFieldBegin in
        if _t306 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id307 with 
          | _ -> iprot#skip _t306);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str305

class getSearchItems_args =
object (self)
  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "getSearchItems_args.table") | Some _x308 -> _x308
  method set_table _x308 = _table <- Some _x308
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _query : string option = None
  method get_query = _query
  method grab_query = match _query with None->raise (Field_empty "getSearchItems_args.query") | Some _x309 -> _x309
  method set_query _x309 = _query <- Some _x309
  method unset_query = _query <- None
  method reset_query = _query <- None

  val mutable _columnsToSearch : string list option = None
  method get_columnsToSearch = _columnsToSearch
  method grab_columnsToSearch = match _columnsToSearch with None->raise (Field_empty "getSearchItems_args.columnsToSearch") | Some _x310 -> _x310
  method set_columnsToSearch _x310 = _columnsToSearch <- Some _x310
  method unset_columnsToSearch = _columnsToSearch <- None
  method reset_columnsToSearch = _columnsToSearch <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "getSearchItems_args.displayColumns") | Some _x311 -> _x311
  method set_displayColumns _x311 = _displayColumns <- Some _x311
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSearchItems_args";
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _query with None -> () | Some _v -> 
      oprot#writeFieldBegin("query",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _columnsToSearch with None -> () | Some _v -> 
      oprot#writeFieldBegin("columnsToSearch",Protocol.T_LIST,3);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter314 ->         oprot#writeString(_iter314);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter315 ->         oprot#writeString(_iter315);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSearchItems_args (iprot : Protocol.t) =
  let _str316 = new getSearchItems_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t317,_id318) = iprot#readFieldBegin in
        if _t317 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id318 with 
          | 1 -> (if _t317 = Protocol.T_STRING then
              _str316#set_table iprot#readString
            else
              iprot#skip _t317)
          | 2 -> (if _t317 = Protocol.T_STRING then
              _str316#set_query iprot#readString
            else
              iprot#skip _t317)
          | 3 -> (if _t317 = Protocol.T_LIST then
              _str316#set_columnsToSearch 
                (let (_etype322,_size319) = iprot#readListBegin in
                  let _con323 = (Array.to_list (Array.init _size319 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con323)
            else
              iprot#skip _t317)
          | 4 -> (if _t317 = Protocol.T_LIST then
              _str316#set_displayColumns 
                (let (_etype327,_size324) = iprot#readListBegin in
                  let _con328 = (Array.to_list (Array.init _size324 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con328)
            else
              iprot#skip _t317)
          | _ -> iprot#skip _t317);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str316

class getSearchItems_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getSearchItems_result.success") | Some _x329 -> _x329
  method set_success _x329 = _success <- Some _x329
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getSearchItems_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter332 ->         _iter332#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getSearchItems_result (iprot : Protocol.t) =
  let _str333 = new getSearchItems_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t334,_id335) = iprot#readFieldBegin in
        if _t334 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id335 with 
          | 0 -> (if _t334 = Protocol.T_LIST then
              _str333#set_success 
                (let (_etype339,_size336) = iprot#readListBegin in
                  let _con340 = (Array.to_list (Array.init _size336 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con340)
            else
              iprot#skip _t334)
          | _ -> iprot#skip _t334);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str333

class makeOverallRatingBasedOrRandomRecommendation_args =
object (self)
  val mutable _key : string option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.key") | Some _x341 -> _x341
  method set_key _x341 = _key <- Some _x341
  method unset_key = _key <- None
  method reset_key = _key <- None

  val mutable _ratingColumnName : string option = None
  method get_ratingColumnName = _ratingColumnName
  method grab_ratingColumnName = match _ratingColumnName with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.ratingColumnName") | Some _x342 -> _x342
  method set_ratingColumnName _x342 = _ratingColumnName <- Some _x342
  method unset_ratingColumnName = _ratingColumnName <- None
  method reset_ratingColumnName = _ratingColumnName <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.numRecs") | Some _x343 -> _x343
  method set_numRecs _x343 = _numRecs <- Some _x343
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _displayColumns : string list option = None
  method get_displayColumns = _displayColumns
  method grab_displayColumns = match _displayColumns with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_args.displayColumns") | Some _x344 -> _x344
  method set_displayColumns _x344 = _displayColumns <- Some _x344
  method unset_displayColumns = _displayColumns <- None
  method reset_displayColumns = _displayColumns <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeOverallRatingBasedOrRandomRecommendation_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratingColumnName with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratingColumnName",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,3);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _displayColumns with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayColumns",Protocol.T_LIST,4);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter347 ->         oprot#writeString(_iter347);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeOverallRatingBasedOrRandomRecommendation_args (iprot : Protocol.t) =
  let _str348 = new makeOverallRatingBasedOrRandomRecommendation_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t349,_id350) = iprot#readFieldBegin in
        if _t349 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id350 with 
          | 1 -> (if _t349 = Protocol.T_STRING then
              _str348#set_key iprot#readString
            else
              iprot#skip _t349)
          | 2 -> (if _t349 = Protocol.T_STRING then
              _str348#set_ratingColumnName iprot#readString
            else
              iprot#skip _t349)
          | 3 -> (if _t349 = Protocol.T_I64 then
              _str348#set_numRecs iprot#readI64
            else
              iprot#skip _t349)
          | 4 -> (if _t349 = Protocol.T_LIST then
              _str348#set_displayColumns 
                (let (_etype354,_size351) = iprot#readListBegin in
                  let _con355 = (Array.to_list (Array.init _size351 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con355)
            else
              iprot#skip _t349)
          | _ -> iprot#skip _t349);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str348

class makeOverallRatingBasedOrRandomRecommendation_result =
object (self)
  val mutable _success : item list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "makeOverallRatingBasedOrRandomRecommendation_result.success") | Some _x356 -> _x356
  method set_success _x356 = _success <- Some _x356
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "makeOverallRatingBasedOrRandomRecommendation_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter359 ->         _iter359#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_makeOverallRatingBasedOrRandomRecommendation_result (iprot : Protocol.t) =
  let _str360 = new makeOverallRatingBasedOrRandomRecommendation_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t361,_id362) = iprot#readFieldBegin in
        if _t361 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id362 with 
          | 0 -> (if _t361 = Protocol.T_LIST then
              _str360#set_success 
                (let (_etype366,_size363) = iprot#readListBegin in
                  let _con367 = (Array.to_list (Array.init _size363 (fun _ -> (read_item iprot)))) in
                    iprot#readListEnd; _con367)
            else
              iprot#skip _t361)
          | _ -> iprot#skip _t361);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str360

class addKibitzUser_args =
object (self)
  val mutable _email : string option = None
  method get_email = _email
  method grab_email = match _email with None->raise (Field_empty "addKibitzUser_args.email") | Some _x368 -> _x368
  method set_email _x368 = _email <- Some _x368
  method unset_email = _email <- None
  method reset_email = _email <- None

  val mutable _password : string option = None
  method get_password = _password
  method grab_password = match _password with None->raise (Field_empty "addKibitzUser_args.password") | Some _x369 -> _x369
  method set_password _x369 = _password <- Some _x369
  method unset_password = _password <- None
  method reset_password = _password <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addKibitzUser_args";
    (match _email with None -> () | Some _v -> 
      oprot#writeFieldBegin("email",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _password with None -> () | Some _v -> 
      oprot#writeFieldBegin("password",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addKibitzUser_args (iprot : Protocol.t) =
  let _str372 = new addKibitzUser_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t373,_id374) = iprot#readFieldBegin in
        if _t373 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id374 with 
          | 1 -> (if _t373 = Protocol.T_STRING then
              _str372#set_email iprot#readString
            else
              iprot#skip _t373)
          | 2 -> (if _t373 = Protocol.T_STRING then
              _str372#set_password iprot#readString
            else
              iprot#skip _t373)
          | _ -> iprot#skip _t373);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str372

class addKibitzUser_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "addKibitzUser_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_addKibitzUser_result (iprot : Protocol.t) =
  let _str377 = new addKibitzUser_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t378,_id379) = iprot#readFieldBegin in
        if _t378 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id379 with 
          | _ -> iprot#skip _t378);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str377

class checkCorrectDatahubLogin_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkCorrectDatahubLogin_args.username") | Some _x380 -> _x380
  method set_username _x380 = _username <- Some _x380
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repository : string option = None
  method get_repository = _repository
  method grab_repository = match _repository with None->raise (Field_empty "checkCorrectDatahubLogin_args.repository") | Some _x381 -> _x381
  method set_repository _x381 = _repository <- Some _x381
  method unset_repository = _repository <- None
  method reset_repository = _repository <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "checkCorrectDatahubLogin_args.table") | Some _x382 -> _x382
  method set_table _x382 = _table <- Some _x382
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _primary_key : string option = None
  method get_primary_key = _primary_key
  method grab_primary_key = match _primary_key with None->raise (Field_empty "checkCorrectDatahubLogin_args.primary_key") | Some _x383 -> _x383
  method set_primary_key _x383 = _primary_key <- Some _x383
  method unset_primary_key = _primary_key <- None
  method reset_primary_key = _primary_key <- None

  val mutable _title : string option = None
  method get_title = _title
  method grab_title = match _title with None->raise (Field_empty "checkCorrectDatahubLogin_args.title") | Some _x384 -> _x384
  method set_title _x384 = _title <- Some _x384
  method unset_title = _title <- None
  method reset_title = _title <- None

  val mutable _description : string option = None
  method get_description = _description
  method grab_description = match _description with None->raise (Field_empty "checkCorrectDatahubLogin_args.description") | Some _x385 -> _x385
  method set_description _x385 = _description <- Some _x385
  method unset_description = _description <- None
  method reset_description = _description <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "checkCorrectDatahubLogin_args.image") | Some _x386 -> _x386
  method set_image _x386 = _image <- Some _x386
  method unset_image = _image <- None
  method reset_image = _image <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCorrectDatahubLogin_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repository with None -> () | Some _v -> 
      oprot#writeFieldBegin("repository",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primary_key with None -> () | Some _v -> 
      oprot#writeFieldBegin("primary_key",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _title with None -> () | Some _v -> 
      oprot#writeFieldBegin("title",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _description with None -> () | Some _v -> 
      oprot#writeFieldBegin("description",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCorrectDatahubLogin_args (iprot : Protocol.t) =
  let _str389 = new checkCorrectDatahubLogin_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t390,_id391) = iprot#readFieldBegin in
        if _t390 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id391 with 
          | 1 -> (if _t390 = Protocol.T_STRING then
              _str389#set_username iprot#readString
            else
              iprot#skip _t390)
          | 2 -> (if _t390 = Protocol.T_STRING then
              _str389#set_repository iprot#readString
            else
              iprot#skip _t390)
          | 3 -> (if _t390 = Protocol.T_STRING then
              _str389#set_table iprot#readString
            else
              iprot#skip _t390)
          | 4 -> (if _t390 = Protocol.T_STRING then
              _str389#set_primary_key iprot#readString
            else
              iprot#skip _t390)
          | 5 -> (if _t390 = Protocol.T_STRING then
              _str389#set_title iprot#readString
            else
              iprot#skip _t390)
          | 6 -> (if _t390 = Protocol.T_STRING then
              _str389#set_description iprot#readString
            else
              iprot#skip _t390)
          | 7 -> (if _t390 = Protocol.T_STRING then
              _str389#set_image iprot#readString
            else
              iprot#skip _t390)
          | _ -> iprot#skip _t390);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str389

class checkCorrectDatahubLogin_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkCorrectDatahubLogin_result.success") | Some _x392 -> _x392
  method set_success _x392 = _success <- Some _x392
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkCorrectDatahubLogin_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkCorrectDatahubLogin_result (iprot : Protocol.t) =
  let _str395 = new checkCorrectDatahubLogin_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t396,_id397) = iprot#readFieldBegin in
        if _t396 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id397 with 
          | 0 -> (if _t396 = Protocol.T_BOOL then
              _str395#set_success iprot#readBool
            else
              iprot#skip _t396)
          | _ -> iprot#skip _t396);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str395

class checkRatingsColumn_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "checkRatingsColumn_args.username") | Some _x398 -> _x398
  method set_username _x398 = _username <- Some _x398
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "checkRatingsColumn_args.table") | Some _x399 -> _x399
  method set_table _x399 = _table <- Some _x399
  method unset_table = _table <- None
  method reset_table = _table <- None

  val mutable _repository : string option = None
  method get_repository = _repository
  method grab_repository = match _repository with None->raise (Field_empty "checkRatingsColumn_args.repository") | Some _x400 -> _x400
  method set_repository _x400 = _repository <- Some _x400
  method unset_repository = _repository <- None
  method reset_repository = _repository <- None

  val mutable _ratings_column : string option = None
  method get_ratings_column = _ratings_column
  method grab_ratings_column = match _ratings_column with None->raise (Field_empty "checkRatingsColumn_args.ratings_column") | Some _x401 -> _x401
  method set_ratings_column _x401 = _ratings_column <- Some _x401
  method unset_ratings_column = _ratings_column <- None
  method reset_ratings_column = _ratings_column <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkRatingsColumn_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repository with None -> () | Some _v -> 
      oprot#writeFieldBegin("repository",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratings_column with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratings_column",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkRatingsColumn_args (iprot : Protocol.t) =
  let _str404 = new checkRatingsColumn_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t405,_id406) = iprot#readFieldBegin in
        if _t405 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id406 with 
          | 1 -> (if _t405 = Protocol.T_STRING then
              _str404#set_username iprot#readString
            else
              iprot#skip _t405)
          | 2 -> (if _t405 = Protocol.T_STRING then
              _str404#set_table iprot#readString
            else
              iprot#skip _t405)
          | 3 -> (if _t405 = Protocol.T_STRING then
              _str404#set_repository iprot#readString
            else
              iprot#skip _t405)
          | 4 -> (if _t405 = Protocol.T_STRING then
              _str404#set_ratings_column iprot#readString
            else
              iprot#skip _t405)
          | _ -> iprot#skip _t405);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str404

class checkRatingsColumn_result =
object (self)
  val mutable _success : bool option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "checkRatingsColumn_result.success") | Some _x407 -> _x407
  method set_success _x407 = _success <- Some _x407
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "checkRatingsColumn_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_BOOL,0);
      oprot#writeBool(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_checkRatingsColumn_result (iprot : Protocol.t) =
  let _str410 = new checkRatingsColumn_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t411,_id412) = iprot#readFieldBegin in
        if _t411 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id412 with 
          | 0 -> (if _t411 = Protocol.T_BOOL then
              _str410#set_success iprot#readBool
            else
              iprot#skip _t411)
          | _ -> iprot#skip _t411);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str410

class getRecommenders_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getRecommenders_args.username") | Some _x413 -> _x413
  method set_username _x413 = _username <- Some _x413
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommenders_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommenders_args (iprot : Protocol.t) =
  let _str416 = new getRecommenders_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t417,_id418) = iprot#readFieldBegin in
        if _t417 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id418 with 
          | 1 -> (if _t417 = Protocol.T_STRING then
              _str416#set_username iprot#readString
            else
              iprot#skip _t417)
          | _ -> iprot#skip _t417);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str416

class getRecommenders_result =
object (self)
  val mutable _success : recommender list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getRecommenders_result.success") | Some _x419 -> _x419
  method set_success _x419 = _success <- Some _x419
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success (List.map (fun x -> x#copy) self#grab_success);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getRecommenders_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRUCT,List.length _v);
      List.iter (fun _iter422 ->         _iter422#write(oprot);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getRecommenders_result (iprot : Protocol.t) =
  let _str423 = new getRecommenders_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t424,_id425) = iprot#readFieldBegin in
        if _t424 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id425 with 
          | 0 -> (if _t424 = Protocol.T_LIST then
              _str423#set_success 
                (let (_etype429,_size426) = iprot#readListBegin in
                  let _con430 = (Array.to_list (Array.init _size426 (fun _ -> (read_recommender iprot)))) in
                    iprot#readListEnd; _con430)
            else
              iprot#skip _t424)
          | _ -> iprot#skip _t424);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str423

class getProfilePicture_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getProfilePicture_args.username") | Some _x431 -> _x431
  method set_username _x431 = _username <- Some _x431
  method unset_username = _username <- None
  method reset_username = _username <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfilePicture_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfilePicture_args (iprot : Protocol.t) =
  let _str434 = new getProfilePicture_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t435,_id436) = iprot#readFieldBegin in
        if _t435 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id436 with 
          | 1 -> (if _t435 = Protocol.T_STRING then
              _str434#set_username iprot#readString
            else
              iprot#skip _t435)
          | _ -> iprot#skip _t435);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str434

class getProfilePicture_result =
object (self)
  val mutable _success : string option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getProfilePicture_result.success") | Some _x437 -> _x437
  method set_success _x437 = _success <- Some _x437
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getProfilePicture_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRING,0);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getProfilePicture_result (iprot : Protocol.t) =
  let _str440 = new getProfilePicture_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t441,_id442) = iprot#readFieldBegin in
        if _t441 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id442 with 
          | 0 -> (if _t441 = Protocol.T_STRING then
              _str440#set_success iprot#readString
            else
              iprot#skip _t441)
          | _ -> iprot#skip _t441);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str440

class saveFBProfilePic_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "saveFBProfilePic_args.username") | Some _x443 -> _x443
  method set_username _x443 = _username <- Some _x443
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _fbUsername : string option = None
  method get_fbUsername = _fbUsername
  method grab_fbUsername = match _fbUsername with None->raise (Field_empty "saveFBProfilePic_args.fbUsername") | Some _x444 -> _x444
  method set_fbUsername _x444 = _fbUsername <- Some _x444
  method unset_fbUsername = _fbUsername <- None
  method reset_fbUsername = _fbUsername <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "saveFBProfilePic_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _fbUsername with None -> () | Some _v -> 
      oprot#writeFieldBegin("fbUsername",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_saveFBProfilePic_args (iprot : Protocol.t) =
  let _str447 = new saveFBProfilePic_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t448,_id449) = iprot#readFieldBegin in
        if _t448 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id449 with 
          | 1 -> (if _t448 = Protocol.T_STRING then
              _str447#set_username iprot#readString
            else
              iprot#skip _t448)
          | 2 -> (if _t448 = Protocol.T_STRING then
              _str447#set_fbUsername iprot#readString
            else
              iprot#skip _t448)
          | _ -> iprot#skip _t448);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str447

class saveFBProfilePic_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "saveFBProfilePic_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_saveFBProfilePic_result (iprot : Protocol.t) =
  let _str452 = new saveFBProfilePic_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t453,_id454) = iprot#readFieldBegin in
        if _t453 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id454 with 
          | _ -> iprot#skip _t453);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str452

class deleteRecommender_args =
object (self)
  val mutable _clientKey : string option = None
  method get_clientKey = _clientKey
  method grab_clientKey = match _clientKey with None->raise (Field_empty "deleteRecommender_args.clientKey") | Some _x455 -> _x455
  method set_clientKey _x455 = _clientKey <- Some _x455
  method unset_clientKey = _clientKey <- None
  method reset_clientKey = _clientKey <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRecommender_args";
    (match _clientKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("clientKey",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRecommender_args (iprot : Protocol.t) =
  let _str458 = new deleteRecommender_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t459,_id460) = iprot#readFieldBegin in
        if _t459 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id460 with 
          | 1 -> (if _t459 = Protocol.T_STRING then
              _str458#set_clientKey iprot#readString
            else
              iprot#skip _t459)
          | _ -> iprot#skip _t459);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str458

class deleteRecommender_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "deleteRecommender_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_deleteRecommender_result (iprot : Protocol.t) =
  let _str463 = new deleteRecommender_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t464,_id465) = iprot#readFieldBegin in
        if _t464 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id465 with 
          | _ -> iprot#skip _t464);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str463

class updateTemplate_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "updateTemplate_args.username") | Some _x466 -> _x466
  method set_username _x466 = _username <- Some _x466
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _primaryKey : string option = None
  method get_primaryKey = _primaryKey
  method grab_primaryKey = match _primaryKey with None->raise (Field_empty "updateTemplate_args.primaryKey") | Some _x467 -> _x467
  method set_primaryKey _x467 = _primaryKey <- Some _x467
  method unset_primaryKey = _primaryKey <- None
  method reset_primaryKey = _primaryKey <- None

  val mutable _title : string option = None
  method get_title = _title
  method grab_title = match _title with None->raise (Field_empty "updateTemplate_args.title") | Some _x468 -> _x468
  method set_title _x468 = _title <- Some _x468
  method unset_title = _title <- None
  method reset_title = _title <- None

  val mutable _description : string option = None
  method get_description = _description
  method grab_description = match _description with None->raise (Field_empty "updateTemplate_args.description") | Some _x469 -> _x469
  method set_description _x469 = _description <- Some _x469
  method unset_description = _description <- None
  method reset_description = _description <- None

  val mutable _image : string option = None
  method get_image = _image
  method grab_image = match _image with None->raise (Field_empty "updateTemplate_args.image") | Some _x470 -> _x470
  method set_image _x470 = _image <- Some _x470
  method unset_image = _image <- None
  method reset_image = _image <- None

  val mutable _video : string option = None
  method get_video = _video
  method grab_video = match _video with None->raise (Field_empty "updateTemplate_args.video") | Some _x471 -> _x471
  method set_video _x471 = _video <- Some _x471
  method unset_video = _video <- None
  method reset_video = _video <- None

  val mutable _itemTypes : (string,string) Hashtbl.t option = None
  method get_itemTypes = _itemTypes
  method grab_itemTypes = match _itemTypes with None->raise (Field_empty "updateTemplate_args.itemTypes") | Some _x472 -> _x472
  method set_itemTypes _x472 = _itemTypes <- Some _x472
  method unset_itemTypes = _itemTypes <- None
  method reset_itemTypes = _itemTypes <- None

  val mutable _displayItems : string list option = None
  method get_displayItems = _displayItems
  method grab_displayItems = match _displayItems with None->raise (Field_empty "updateTemplate_args.displayItems") | Some _x473 -> _x473
  method set_displayItems _x473 = _displayItems <- Some _x473
  method unset_displayItems = _displayItems <- None
  method reset_displayItems = _displayItems <- None

  val mutable _maxRatingVal : Int64.t option = None
  method get_maxRatingVal = _maxRatingVal
  method grab_maxRatingVal = match _maxRatingVal with None->raise (Field_empty "updateTemplate_args.maxRatingVal") | Some _x474 -> _x474
  method set_maxRatingVal _x474 = _maxRatingVal <- Some _x474
  method unset_maxRatingVal = _maxRatingVal <- None
  method reset_maxRatingVal = _maxRatingVal <- None

  val mutable _numRecs : Int64.t option = None
  method get_numRecs = _numRecs
  method grab_numRecs = match _numRecs with None->raise (Field_empty "updateTemplate_args.numRecs") | Some _x475 -> _x475
  method set_numRecs _x475 = _numRecs <- Some _x475
  method unset_numRecs = _numRecs <- None
  method reset_numRecs = _numRecs <- None

  val mutable _recommenderName : string option = None
  method get_recommenderName = _recommenderName
  method grab_recommenderName = match _recommenderName with None->raise (Field_empty "updateTemplate_args.recommenderName") | Some _x476 -> _x476
  method set_recommenderName _x476 = _recommenderName <- Some _x476
  method unset_recommenderName = _recommenderName <- None
  method reset_recommenderName = _recommenderName <- None

  val mutable _clientKey : string option = None
  method get_clientKey = _clientKey
  method grab_clientKey = match _clientKey with None->raise (Field_empty "updateTemplate_args.clientKey") | Some _x477 -> _x477
  method set_clientKey _x477 = _clientKey <- Some _x477
  method unset_clientKey = _clientKey <- None
  method reset_clientKey = _clientKey <- None

  val mutable _homepage : string option = None
  method get_homepage = _homepage
  method grab_homepage = match _homepage with None->raise (Field_empty "updateTemplate_args.homepage") | Some _x478 -> _x478
  method set_homepage _x478 = _homepage <- Some _x478
  method unset_homepage = _homepage <- None
  method reset_homepage = _homepage <- None

  val mutable _creatorName : string option = None
  method get_creatorName = _creatorName
  method grab_creatorName = match _creatorName with None->raise (Field_empty "updateTemplate_args.creatorName") | Some _x479 -> _x479
  method set_creatorName _x479 = _creatorName <- Some _x479
  method unset_creatorName = _creatorName <- None
  method reset_creatorName = _creatorName <- None

  val mutable _repoName : string option = None
  method get_repoName = _repoName
  method grab_repoName = match _repoName with None->raise (Field_empty "updateTemplate_args.repoName") | Some _x480 -> _x480
  method set_repoName _x480 = _repoName <- Some _x480
  method unset_repoName = _repoName <- None
  method reset_repoName = _repoName <- None

  val mutable _tableName : string option = None
  method get_tableName = _tableName
  method grab_tableName = match _tableName with None->raise (Field_empty "updateTemplate_args.tableName") | Some _x481 -> _x481
  method set_tableName _x481 = _tableName <- Some _x481
  method unset_tableName = _tableName <- None
  method reset_tableName = _tableName <- None

  val mutable _ratingsColumn : string option = None
  method get_ratingsColumn = _ratingsColumn
  method grab_ratingsColumn = match _ratingsColumn with None->raise (Field_empty "updateTemplate_args.ratingsColumn") | Some _x482 -> _x482
  method set_ratingsColumn _x482 = _ratingsColumn <- Some _x482
  method unset_ratingsColumn = _ratingsColumn <- None
  method reset_ratingsColumn = _ratingsColumn <- None

  method copy =
      let _new = Oo.copy self in
      if _itemTypes <> None then
        _new#set_itemTypes (Hashtbl.copy self#grab_itemTypes);
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateTemplate_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primaryKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("primaryKey",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _title with None -> () | Some _v -> 
      oprot#writeFieldBegin("title",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _description with None -> () | Some _v -> 
      oprot#writeFieldBegin("description",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _image with None -> () | Some _v -> 
      oprot#writeFieldBegin("image",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _video with None -> () | Some _v -> 
      oprot#writeFieldBegin("video",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _itemTypes with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemTypes",Protocol.T_MAP,7);
      oprot#writeMapBegin(Protocol.T_STRING,Protocol.T_STRING,Hashtbl.length _v);
      Hashtbl.iter (fun _kiter485 -> fun _viter486 -> 
        oprot#writeString(_kiter485);
        oprot#writeString(_viter486);
      ) _v;
      oprot#writeMapEnd;
      oprot#writeFieldEnd
    );
    (match _displayItems with None -> () | Some _v -> 
      oprot#writeFieldBegin("displayItems",Protocol.T_LIST,8);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter487 ->         oprot#writeString(_iter487);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    (match _maxRatingVal with None -> () | Some _v -> 
      oprot#writeFieldBegin("maxRatingVal",Protocol.T_I64,9);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _numRecs with None -> () | Some _v -> 
      oprot#writeFieldBegin("numRecs",Protocol.T_I64,10);
      oprot#writeI64(_v);
      oprot#writeFieldEnd
    );
    (match _recommenderName with None -> () | Some _v -> 
      oprot#writeFieldBegin("recommenderName",Protocol.T_STRING,11);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _clientKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("clientKey",Protocol.T_STRING,12);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _homepage with None -> () | Some _v -> 
      oprot#writeFieldBegin("homepage",Protocol.T_STRING,13);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _creatorName with None -> () | Some _v -> 
      oprot#writeFieldBegin("creatorName",Protocol.T_STRING,14);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repoName with None -> () | Some _v -> 
      oprot#writeFieldBegin("repoName",Protocol.T_STRING,15);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _tableName with None -> () | Some _v -> 
      oprot#writeFieldBegin("tableName",Protocol.T_STRING,16);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _ratingsColumn with None -> () | Some _v -> 
      oprot#writeFieldBegin("ratingsColumn",Protocol.T_STRING,17);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateTemplate_args (iprot : Protocol.t) =
  let _str488 = new updateTemplate_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t489,_id490) = iprot#readFieldBegin in
        if _t489 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id490 with 
          | 1 -> (if _t489 = Protocol.T_STRING then
              _str488#set_username iprot#readString
            else
              iprot#skip _t489)
          | 2 -> (if _t489 = Protocol.T_STRING then
              _str488#set_primaryKey iprot#readString
            else
              iprot#skip _t489)
          | 3 -> (if _t489 = Protocol.T_STRING then
              _str488#set_title iprot#readString
            else
              iprot#skip _t489)
          | 4 -> (if _t489 = Protocol.T_STRING then
              _str488#set_description iprot#readString
            else
              iprot#skip _t489)
          | 5 -> (if _t489 = Protocol.T_STRING then
              _str488#set_image iprot#readString
            else
              iprot#skip _t489)
          | 6 -> (if _t489 = Protocol.T_STRING then
              _str488#set_video iprot#readString
            else
              iprot#skip _t489)
          | 7 -> (if _t489 = Protocol.T_MAP then
              _str488#set_itemTypes 
                (let (_ktype492,_vtype493,_size491) = iprot#readMapBegin in
                let _con495 = Hashtbl.create _size491 in
                  for i = 1 to _size491 do
                    let _k = iprot#readString in
                    let _v = iprot#readString in
                      Hashtbl.add _con495 _k _v
                  done; iprot#readMapEnd; _con495)
            else
              iprot#skip _t489)
          | 8 -> (if _t489 = Protocol.T_LIST then
              _str488#set_displayItems 
                (let (_etype499,_size496) = iprot#readListBegin in
                  let _con500 = (Array.to_list (Array.init _size496 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con500)
            else
              iprot#skip _t489)
          | 9 -> (if _t489 = Protocol.T_I64 then
              _str488#set_maxRatingVal iprot#readI64
            else
              iprot#skip _t489)
          | 10 -> (if _t489 = Protocol.T_I64 then
              _str488#set_numRecs iprot#readI64
            else
              iprot#skip _t489)
          | 11 -> (if _t489 = Protocol.T_STRING then
              _str488#set_recommenderName iprot#readString
            else
              iprot#skip _t489)
          | 12 -> (if _t489 = Protocol.T_STRING then
              _str488#set_clientKey iprot#readString
            else
              iprot#skip _t489)
          | 13 -> (if _t489 = Protocol.T_STRING then
              _str488#set_homepage iprot#readString
            else
              iprot#skip _t489)
          | 14 -> (if _t489 = Protocol.T_STRING then
              _str488#set_creatorName iprot#readString
            else
              iprot#skip _t489)
          | 15 -> (if _t489 = Protocol.T_STRING then
              _str488#set_repoName iprot#readString
            else
              iprot#skip _t489)
          | 16 -> (if _t489 = Protocol.T_STRING then
              _str488#set_tableName iprot#readString
            else
              iprot#skip _t489)
          | 17 -> (if _t489 = Protocol.T_STRING then
              _str488#set_ratingsColumn iprot#readString
            else
              iprot#skip _t489)
          | _ -> iprot#skip _t489);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str488

class updateTemplate_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "updateTemplate_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_updateTemplate_result (iprot : Protocol.t) =
  let _str503 = new updateTemplate_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t504,_id505) = iprot#readFieldBegin in
        if _t504 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id505 with 
          | _ -> iprot#skip _t504);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str503

class configurePrefilledUserRatings_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "configurePrefilledUserRatings_args.username") | Some _x506 -> _x506
  method set_username _x506 = _username <- Some _x506
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repoName : string option = None
  method get_repoName = _repoName
  method grab_repoName = match _repoName with None->raise (Field_empty "configurePrefilledUserRatings_args.repoName") | Some _x507 -> _x507
  method set_repoName _x507 = _repoName <- Some _x507
  method unset_repoName = _repoName <- None
  method reset_repoName = _repoName <- None

  val mutable _primaryKey : string option = None
  method get_primaryKey = _primaryKey
  method grab_primaryKey = match _primaryKey with None->raise (Field_empty "configurePrefilledUserRatings_args.primaryKey") | Some _x508 -> _x508
  method set_primaryKey _x508 = _primaryKey <- Some _x508
  method unset_primaryKey = _primaryKey <- None
  method reset_primaryKey = _primaryKey <- None

  val mutable _itemTable : string option = None
  method get_itemTable = _itemTable
  method grab_itemTable = match _itemTable with None->raise (Field_empty "configurePrefilledUserRatings_args.itemTable") | Some _x509 -> _x509
  method set_itemTable _x509 = _itemTable <- Some _x509
  method unset_itemTable = _itemTable <- None
  method reset_itemTable = _itemTable <- None

  val mutable _tableName : string option = None
  method get_tableName = _tableName
  method grab_tableName = match _tableName with None->raise (Field_empty "configurePrefilledUserRatings_args.tableName") | Some _x510 -> _x510
  method set_tableName _x510 = _tableName <- Some _x510
  method unset_tableName = _tableName <- None
  method reset_tableName = _tableName <- None

  val mutable _userIdCol : string option = None
  method get_userIdCol = _userIdCol
  method grab_userIdCol = match _userIdCol with None->raise (Field_empty "configurePrefilledUserRatings_args.userIdCol") | Some _x511 -> _x511
  method set_userIdCol _x511 = _userIdCol <- Some _x511
  method unset_userIdCol = _userIdCol <- None
  method reset_userIdCol = _userIdCol <- None

  val mutable _itemIdCol : string option = None
  method get_itemIdCol = _itemIdCol
  method grab_itemIdCol = match _itemIdCol with None->raise (Field_empty "configurePrefilledUserRatings_args.itemIdCol") | Some _x512 -> _x512
  method set_itemIdCol _x512 = _itemIdCol <- Some _x512
  method unset_itemIdCol = _itemIdCol <- None
  method reset_itemIdCol = _itemIdCol <- None

  val mutable _userRatingCol : string option = None
  method get_userRatingCol = _userRatingCol
  method grab_userRatingCol = match _userRatingCol with None->raise (Field_empty "configurePrefilledUserRatings_args.userRatingCol") | Some _x513 -> _x513
  method set_userRatingCol _x513 = _userRatingCol <- Some _x513
  method unset_userRatingCol = _userRatingCol <- None
  method reset_userRatingCol = _userRatingCol <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "configurePrefilledUserRatings_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repoName with None -> () | Some _v -> 
      oprot#writeFieldBegin("repoName",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _primaryKey with None -> () | Some _v -> 
      oprot#writeFieldBegin("primaryKey",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _itemTable with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemTable",Protocol.T_STRING,4);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _tableName with None -> () | Some _v -> 
      oprot#writeFieldBegin("tableName",Protocol.T_STRING,5);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userIdCol with None -> () | Some _v -> 
      oprot#writeFieldBegin("userIdCol",Protocol.T_STRING,6);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _itemIdCol with None -> () | Some _v -> 
      oprot#writeFieldBegin("itemIdCol",Protocol.T_STRING,7);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _userRatingCol with None -> () | Some _v -> 
      oprot#writeFieldBegin("userRatingCol",Protocol.T_STRING,8);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_configurePrefilledUserRatings_args (iprot : Protocol.t) =
  let _str516 = new configurePrefilledUserRatings_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t517,_id518) = iprot#readFieldBegin in
        if _t517 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id518 with 
          | 1 -> (if _t517 = Protocol.T_STRING then
              _str516#set_username iprot#readString
            else
              iprot#skip _t517)
          | 2 -> (if _t517 = Protocol.T_STRING then
              _str516#set_repoName iprot#readString
            else
              iprot#skip _t517)
          | 3 -> (if _t517 = Protocol.T_STRING then
              _str516#set_primaryKey iprot#readString
            else
              iprot#skip _t517)
          | 4 -> (if _t517 = Protocol.T_STRING then
              _str516#set_itemTable iprot#readString
            else
              iprot#skip _t517)
          | 5 -> (if _t517 = Protocol.T_STRING then
              _str516#set_tableName iprot#readString
            else
              iprot#skip _t517)
          | 6 -> (if _t517 = Protocol.T_STRING then
              _str516#set_userIdCol iprot#readString
            else
              iprot#skip _t517)
          | 7 -> (if _t517 = Protocol.T_STRING then
              _str516#set_itemIdCol iprot#readString
            else
              iprot#skip _t517)
          | 8 -> (if _t517 = Protocol.T_STRING then
              _str516#set_userRatingCol iprot#readString
            else
              iprot#skip _t517)
          | _ -> iprot#skip _t517);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str516

class configurePrefilledUserRatings_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "configurePrefilledUserRatings_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_configurePrefilledUserRatings_result (iprot : Protocol.t) =
  let _str521 = new configurePrefilledUserRatings_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t522,_id523) = iprot#readFieldBegin in
        if _t522 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id523 with 
          | _ -> iprot#skip _t522);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str521

class getTables_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getTables_args.username") | Some _x524 -> _x524
  method set_username _x524 = _username <- Some _x524
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repo : string option = None
  method get_repo = _repo
  method grab_repo = match _repo with None->raise (Field_empty "getTables_args.repo") | Some _x525 -> _x525
  method set_repo _x525 = _repo <- Some _x525
  method unset_repo = _repo <- None
  method reset_repo = _repo <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTables_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repo with None -> () | Some _v -> 
      oprot#writeFieldBegin("repo",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTables_args (iprot : Protocol.t) =
  let _str528 = new getTables_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t529,_id530) = iprot#readFieldBegin in
        if _t529 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id530 with 
          | 1 -> (if _t529 = Protocol.T_STRING then
              _str528#set_username iprot#readString
            else
              iprot#skip _t529)
          | 2 -> (if _t529 = Protocol.T_STRING then
              _str528#set_repo iprot#readString
            else
              iprot#skip _t529)
          | _ -> iprot#skip _t529);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str528

class getTables_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getTables_result.success") | Some _x531 -> _x531
  method set_success _x531 = _success <- Some _x531
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getTables_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter534 ->         oprot#writeString(_iter534);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getTables_result (iprot : Protocol.t) =
  let _str535 = new getTables_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t536,_id537) = iprot#readFieldBegin in
        if _t536 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id537 with 
          | 0 -> (if _t536 = Protocol.T_LIST then
              _str535#set_success 
                (let (_etype541,_size538) = iprot#readListBegin in
                  let _con542 = (Array.to_list (Array.init _size538 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con542)
            else
              iprot#skip _t536)
          | _ -> iprot#skip _t536);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str535

class getColumns_args =
object (self)
  val mutable _username : string option = None
  method get_username = _username
  method grab_username = match _username with None->raise (Field_empty "getColumns_args.username") | Some _x543 -> _x543
  method set_username _x543 = _username <- Some _x543
  method unset_username = _username <- None
  method reset_username = _username <- None

  val mutable _repo : string option = None
  method get_repo = _repo
  method grab_repo = match _repo with None->raise (Field_empty "getColumns_args.repo") | Some _x544 -> _x544
  method set_repo _x544 = _repo <- Some _x544
  method unset_repo = _repo <- None
  method reset_repo = _repo <- None

  val mutable _table : string option = None
  method get_table = _table
  method grab_table = match _table with None->raise (Field_empty "getColumns_args.table") | Some _x545 -> _x545
  method set_table _x545 = _table <- Some _x545
  method unset_table = _table <- None
  method reset_table = _table <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getColumns_args";
    (match _username with None -> () | Some _v -> 
      oprot#writeFieldBegin("username",Protocol.T_STRING,1);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _repo with None -> () | Some _v -> 
      oprot#writeFieldBegin("repo",Protocol.T_STRING,2);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    (match _table with None -> () | Some _v -> 
      oprot#writeFieldBegin("table",Protocol.T_STRING,3);
      oprot#writeString(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getColumns_args (iprot : Protocol.t) =
  let _str548 = new getColumns_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t549,_id550) = iprot#readFieldBegin in
        if _t549 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id550 with 
          | 1 -> (if _t549 = Protocol.T_STRING then
              _str548#set_username iprot#readString
            else
              iprot#skip _t549)
          | 2 -> (if _t549 = Protocol.T_STRING then
              _str548#set_repo iprot#readString
            else
              iprot#skip _t549)
          | 3 -> (if _t549 = Protocol.T_STRING then
              _str548#set_table iprot#readString
            else
              iprot#skip _t549)
          | _ -> iprot#skip _t549);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str548

class getColumns_result =
object (self)
  val mutable _success : string list option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getColumns_result.success") | Some _x551 -> _x551
  method set_success _x551 = _success <- Some _x551
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getColumns_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_LIST,0);
      oprot#writeListBegin(Protocol.T_STRING,List.length _v);
      List.iter (fun _iter554 ->         oprot#writeString(_iter554);
      ) _v;
      oprot#writeListEnd;
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getColumns_result (iprot : Protocol.t) =
  let _str555 = new getColumns_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t556,_id557) = iprot#readFieldBegin in
        if _t556 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id557 with 
          | 0 -> (if _t556 = Protocol.T_LIST then
              _str555#set_success 
                (let (_etype561,_size558) = iprot#readListBegin in
                  let _con562 = (Array.to_list (Array.init _size558 (fun _ -> iprot#readString))) in
                    iprot#readListEnd; _con562)
            else
              iprot#skip _t556)
          | _ -> iprot#skip _t556);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str555

class virtual iface =
object (self)
  method virtual createNewIndividualServer : string option -> unit
  method virtual terminateSession : string option -> unit
  method virtual makeRecommendation : string option -> Int64.t option -> Int64.t option -> bool option -> string list option -> item list
  method virtual makeItemBasedRecommendations : string option -> Int64.t option -> Int64.t option -> string list option -> item list
  method virtual getPageItems : string option -> Int64.t option -> Int64.t option -> string list option -> item list
  method virtual getItemCount : string option -> Int64.t
  method virtual recordRatings : string option -> Int64.t option -> Int64.t option -> Int64.t option -> unit
  method virtual deleteRatings : string option -> Int64.t option -> Int64.t option -> unit
  method virtual createNewUser : string option -> string option -> bool option -> string
  method virtual checkUsername : string option -> string option -> bool option -> bool
  method virtual checkLogin : string option -> string option -> string option -> bool option -> bool
  method virtual retrieveUserId : string option -> string option -> Int64.t
  method virtual createNewRecommender : string option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> bool
  method virtual getUserRatedItems : string option -> Int64.t option -> string list option -> item list
  method virtual initiateModel : string option -> string option -> string option -> string option -> unit
  method virtual getSearchItems : string option -> string option -> string list option -> string list option -> item list
  method virtual makeOverallRatingBasedOrRandomRecommendation : string option -> string option -> Int64.t option -> string list option -> item list
  method virtual addKibitzUser : string option -> string option -> unit
  method virtual checkCorrectDatahubLogin : string option -> string option -> string option -> string option -> string option -> string option -> string option -> bool
  method virtual checkRatingsColumn : string option -> string option -> string option -> string option -> bool
  method virtual getRecommenders : string option -> recommender list
  method virtual getProfilePicture : string option -> string
  method virtual saveFBProfilePic : string option -> string option -> unit
  method virtual deleteRecommender : string option -> unit
  method virtual updateTemplate : string option -> string option -> string option -> string option -> string option -> string option -> (string,string) Hashtbl.t option -> string list option -> Int64.t option -> Int64.t option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> unit
  method virtual configurePrefilledUserRatings : string option -> string option -> string option -> string option -> string option -> string option -> string option -> string option -> unit
  method virtual getTables : string option -> string option -> string list
  method virtual getColumns : string option -> string option -> string option -> string list
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method createNewIndividualServer key = 
    self#send_createNewIndividualServer key;
    self#recv_createNewIndividualServer
  method private send_createNewIndividualServer key = 
    oprot#writeMessageBegin ("createNewIndividualServer", Protocol.CALL, seqid);
    let args = new createNewIndividualServer_args in
      args#set_key key;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createNewIndividualServer  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_createNewIndividualServer_result iprot in
        iprot#readMessageEnd;
        ()
  method terminateSession key = 
    self#send_terminateSession key;
    self#recv_terminateSession
  method private send_terminateSession key = 
    oprot#writeMessageBegin ("terminateSession", Protocol.CALL, seqid);
    let args = new terminateSession_args in
      args#set_key key;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_terminateSession  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_terminateSession_result iprot in
        iprot#readMessageEnd;
        ()
  method makeRecommendation key userId numRecs isBoolean displayColumns = 
    self#send_makeRecommendation key userId numRecs isBoolean displayColumns;
    self#recv_makeRecommendation
  method private send_makeRecommendation key userId numRecs isBoolean displayColumns = 
    oprot#writeMessageBegin ("makeRecommendation", Protocol.CALL, seqid);
    let args = new makeRecommendation_args in
      args#set_key key;
      args#set_userId userId;
      args#set_numRecs numRecs;
      args#set_isBoolean isBoolean;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeRecommendation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeRecommendation failed: unknown result")))
  method makeItemBasedRecommendations key userId numRecs displayColumns = 
    self#send_makeItemBasedRecommendations key userId numRecs displayColumns;
    self#recv_makeItemBasedRecommendations
  method private send_makeItemBasedRecommendations key userId numRecs displayColumns = 
    oprot#writeMessageBegin ("makeItemBasedRecommendations", Protocol.CALL, seqid);
    let args = new makeItemBasedRecommendations_args in
      args#set_key key;
      args#set_userId userId;
      args#set_numRecs numRecs;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeItemBasedRecommendations  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeItemBasedRecommendations_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeItemBasedRecommendations failed: unknown result")))
  method getPageItems key page numPerPage displayColumns = 
    self#send_getPageItems key page numPerPage displayColumns;
    self#recv_getPageItems
  method private send_getPageItems key page numPerPage displayColumns = 
    oprot#writeMessageBegin ("getPageItems", Protocol.CALL, seqid);
    let args = new getPageItems_args in
      args#set_key key;
      args#set_page page;
      args#set_numPerPage numPerPage;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getPageItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getPageItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getPageItems failed: unknown result")))
  method getItemCount key = 
    self#send_getItemCount key;
    self#recv_getItemCount
  method private send_getItemCount key = 
    oprot#writeMessageBegin ("getItemCount", Protocol.CALL, seqid);
    let args = new getItemCount_args in
      args#set_key key;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getItemCount  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getItemCount_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getItemCount failed: unknown result")))
  method recordRatings key userId itemId rating = 
    self#send_recordRatings key userId itemId rating;
    self#recv_recordRatings
  method private send_recordRatings key userId itemId rating = 
    oprot#writeMessageBegin ("recordRatings", Protocol.CALL, seqid);
    let args = new recordRatings_args in
      args#set_key key;
      args#set_userId userId;
      args#set_itemId itemId;
      args#set_rating rating;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_recordRatings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_recordRatings_result iprot in
        iprot#readMessageEnd;
        ()
  method deleteRatings key userId itemId = 
    self#send_deleteRatings key userId itemId;
    self#recv_deleteRatings
  method private send_deleteRatings key userId itemId = 
    oprot#writeMessageBegin ("deleteRatings", Protocol.CALL, seqid);
    let args = new deleteRatings_args in
      args#set_key key;
      args#set_userId userId;
      args#set_itemId itemId;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteRatings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_deleteRatings_result iprot in
        iprot#readMessageEnd;
        ()
  method createNewUser key username iskibitzuser = 
    self#send_createNewUser key username iskibitzuser;
    self#recv_createNewUser
  method private send_createNewUser key username iskibitzuser = 
    oprot#writeMessageBegin ("createNewUser", Protocol.CALL, seqid);
    let args = new createNewUser_args in
      args#set_key key;
      args#set_username username;
      args#set_iskibitzuser iskibitzuser;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createNewUser  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createNewUser_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createNewUser failed: unknown result")))
  method checkUsername key username iskibitzuser = 
    self#send_checkUsername key username iskibitzuser;
    self#recv_checkUsername
  method private send_checkUsername key username iskibitzuser = 
    oprot#writeMessageBegin ("checkUsername", Protocol.CALL, seqid);
    let args = new checkUsername_args in
      args#set_key key;
      args#set_username username;
      args#set_iskibitzuser iskibitzuser;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkUsername  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkUsername_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkUsername failed: unknown result")))
  method checkLogin key username password iskibitzuser = 
    self#send_checkLogin key username password iskibitzuser;
    self#recv_checkLogin
  method private send_checkLogin key username password iskibitzuser = 
    oprot#writeMessageBegin ("checkLogin", Protocol.CALL, seqid);
    let args = new checkLogin_args in
      args#set_key key;
      args#set_username username;
      args#set_password password;
      args#set_iskibitzuser iskibitzuser;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkLogin failed: unknown result")))
  method retrieveUserId key username = 
    self#send_retrieveUserId key username;
    self#recv_retrieveUserId
  method private send_retrieveUserId key username = 
    oprot#writeMessageBegin ("retrieveUserId", Protocol.CALL, seqid);
    let args = new retrieveUserId_args in
      args#set_key key;
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_retrieveUserId  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_retrieveUserId_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "retrieveUserId failed: unknown result")))
  method createNewRecommender username primaryKey database table title description image ratings_column clientKey = 
    self#send_createNewRecommender username primaryKey database table title description image ratings_column clientKey;
    self#recv_createNewRecommender
  method private send_createNewRecommender username primaryKey database table title description image ratings_column clientKey = 
    oprot#writeMessageBegin ("createNewRecommender", Protocol.CALL, seqid);
    let args = new createNewRecommender_args in
      args#set_username username;
      args#set_primaryKey primaryKey;
      args#set_database database;
      args#set_table table;
      args#set_title title;
      args#set_description description;
      args#set_image image;
      args#set_ratings_column ratings_column;
      args#set_clientKey clientKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_createNewRecommender  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_createNewRecommender_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "createNewRecommender failed: unknown result")))
  method getUserRatedItems key userId displayColumns = 
    self#send_getUserRatedItems key userId displayColumns;
    self#recv_getUserRatedItems
  method private send_getUserRatedItems key userId displayColumns = 
    oprot#writeMessageBegin ("getUserRatedItems", Protocol.CALL, seqid);
    let args = new getUserRatedItems_args in
      args#set_key key;
      args#set_userId userId;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getUserRatedItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getUserRatedItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getUserRatedItems failed: unknown result")))
  method initiateModel key table username database = 
    self#send_initiateModel key table username database;
    self#recv_initiateModel
  method private send_initiateModel key table username database = 
    oprot#writeMessageBegin ("initiateModel", Protocol.CALL, seqid);
    let args = new initiateModel_args in
      args#set_key key;
      args#set_table table;
      args#set_username username;
      args#set_database database;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_initiateModel  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_initiateModel_result iprot in
        iprot#readMessageEnd;
        ()
  method getSearchItems table query columnsToSearch displayColumns = 
    self#send_getSearchItems table query columnsToSearch displayColumns;
    self#recv_getSearchItems
  method private send_getSearchItems table query columnsToSearch displayColumns = 
    oprot#writeMessageBegin ("getSearchItems", Protocol.CALL, seqid);
    let args = new getSearchItems_args in
      args#set_table table;
      args#set_query query;
      args#set_columnsToSearch columnsToSearch;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getSearchItems  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getSearchItems_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getSearchItems failed: unknown result")))
  method makeOverallRatingBasedOrRandomRecommendation key ratingColumnName numRecs displayColumns = 
    self#send_makeOverallRatingBasedOrRandomRecommendation key ratingColumnName numRecs displayColumns;
    self#recv_makeOverallRatingBasedOrRandomRecommendation
  method private send_makeOverallRatingBasedOrRandomRecommendation key ratingColumnName numRecs displayColumns = 
    oprot#writeMessageBegin ("makeOverallRatingBasedOrRandomRecommendation", Protocol.CALL, seqid);
    let args = new makeOverallRatingBasedOrRandomRecommendation_args in
      args#set_key key;
      args#set_ratingColumnName ratingColumnName;
      args#set_numRecs numRecs;
      args#set_displayColumns displayColumns;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_makeOverallRatingBasedOrRandomRecommendation  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_makeOverallRatingBasedOrRandomRecommendation_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "makeOverallRatingBasedOrRandomRecommendation failed: unknown result")))
  method addKibitzUser email password = 
    self#send_addKibitzUser email password;
    self#recv_addKibitzUser
  method private send_addKibitzUser email password = 
    oprot#writeMessageBegin ("addKibitzUser", Protocol.CALL, seqid);
    let args = new addKibitzUser_args in
      args#set_email email;
      args#set_password password;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_addKibitzUser  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_addKibitzUser_result iprot in
        iprot#readMessageEnd;
        ()
  method checkCorrectDatahubLogin username repository table primary_key title description image = 
    self#send_checkCorrectDatahubLogin username repository table primary_key title description image;
    self#recv_checkCorrectDatahubLogin
  method private send_checkCorrectDatahubLogin username repository table primary_key title description image = 
    oprot#writeMessageBegin ("checkCorrectDatahubLogin", Protocol.CALL, seqid);
    let args = new checkCorrectDatahubLogin_args in
      args#set_username username;
      args#set_repository repository;
      args#set_table table;
      args#set_primary_key primary_key;
      args#set_title title;
      args#set_description description;
      args#set_image image;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkCorrectDatahubLogin  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkCorrectDatahubLogin_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkCorrectDatahubLogin failed: unknown result")))
  method checkRatingsColumn username table repository ratings_column = 
    self#send_checkRatingsColumn username table repository ratings_column;
    self#recv_checkRatingsColumn
  method private send_checkRatingsColumn username table repository ratings_column = 
    oprot#writeMessageBegin ("checkRatingsColumn", Protocol.CALL, seqid);
    let args = new checkRatingsColumn_args in
      args#set_username username;
      args#set_table table;
      args#set_repository repository;
      args#set_ratings_column ratings_column;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_checkRatingsColumn  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_checkRatingsColumn_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "checkRatingsColumn failed: unknown result")))
  method getRecommenders username = 
    self#send_getRecommenders username;
    self#recv_getRecommenders
  method private send_getRecommenders username = 
    oprot#writeMessageBegin ("getRecommenders", Protocol.CALL, seqid);
    let args = new getRecommenders_args in
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getRecommenders  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getRecommenders_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getRecommenders failed: unknown result")))
  method getProfilePicture username = 
    self#send_getProfilePicture username;
    self#recv_getProfilePicture
  method private send_getProfilePicture username = 
    oprot#writeMessageBegin ("getProfilePicture", Protocol.CALL, seqid);
    let args = new getProfilePicture_args in
      args#set_username username;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getProfilePicture  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getProfilePicture_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getProfilePicture failed: unknown result")))
  method saveFBProfilePic username fbUsername = 
    self#send_saveFBProfilePic username fbUsername;
    self#recv_saveFBProfilePic
  method private send_saveFBProfilePic username fbUsername = 
    oprot#writeMessageBegin ("saveFBProfilePic", Protocol.CALL, seqid);
    let args = new saveFBProfilePic_args in
      args#set_username username;
      args#set_fbUsername fbUsername;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_saveFBProfilePic  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_saveFBProfilePic_result iprot in
        iprot#readMessageEnd;
        ()
  method deleteRecommender clientKey = 
    self#send_deleteRecommender clientKey;
    self#recv_deleteRecommender
  method private send_deleteRecommender clientKey = 
    oprot#writeMessageBegin ("deleteRecommender", Protocol.CALL, seqid);
    let args = new deleteRecommender_args in
      args#set_clientKey clientKey;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_deleteRecommender  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_deleteRecommender_result iprot in
        iprot#readMessageEnd;
        ()
  method updateTemplate username primaryKey title description image video itemTypes displayItems maxRatingVal numRecs recommenderName clientKey homepage creatorName repoName tableName ratingsColumn = 
    self#send_updateTemplate username primaryKey title description image video itemTypes displayItems maxRatingVal numRecs recommenderName clientKey homepage creatorName repoName tableName ratingsColumn;
    self#recv_updateTemplate
  method private send_updateTemplate username primaryKey title description image video itemTypes displayItems maxRatingVal numRecs recommenderName clientKey homepage creatorName repoName tableName ratingsColumn = 
    oprot#writeMessageBegin ("updateTemplate", Protocol.CALL, seqid);
    let args = new updateTemplate_args in
      args#set_username username;
      args#set_primaryKey primaryKey;
      args#set_title title;
      args#set_description description;
      args#set_image image;
      args#set_video video;
      args#set_itemTypes itemTypes;
      args#set_displayItems displayItems;
      args#set_maxRatingVal maxRatingVal;
      args#set_numRecs numRecs;
      args#set_recommenderName recommenderName;
      args#set_clientKey clientKey;
      args#set_homepage homepage;
      args#set_creatorName creatorName;
      args#set_repoName repoName;
      args#set_tableName tableName;
      args#set_ratingsColumn ratingsColumn;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_updateTemplate  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_updateTemplate_result iprot in
        iprot#readMessageEnd;
        ()
  method configurePrefilledUserRatings username repoName primaryKey itemTable tableName userIdCol itemIdCol userRatingCol = 
    self#send_configurePrefilledUserRatings username repoName primaryKey itemTable tableName userIdCol itemIdCol userRatingCol;
    self#recv_configurePrefilledUserRatings
  method private send_configurePrefilledUserRatings username repoName primaryKey itemTable tableName userIdCol itemIdCol userRatingCol = 
    oprot#writeMessageBegin ("configurePrefilledUserRatings", Protocol.CALL, seqid);
    let args = new configurePrefilledUserRatings_args in
      args#set_username username;
      args#set_repoName repoName;
      args#set_primaryKey primaryKey;
      args#set_itemTable itemTable;
      args#set_tableName tableName;
      args#set_userIdCol userIdCol;
      args#set_itemIdCol itemIdCol;
      args#set_userRatingCol userRatingCol;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_configurePrefilledUserRatings  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_configurePrefilledUserRatings_result iprot in
        iprot#readMessageEnd;
        ()
  method getTables username repo = 
    self#send_getTables username repo;
    self#recv_getTables
  method private send_getTables username repo = 
    oprot#writeMessageBegin ("getTables", Protocol.CALL, seqid);
    let args = new getTables_args in
      args#set_username username;
      args#set_repo repo;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getTables  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getTables_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getTables failed: unknown result")))
  method getColumns username repo table = 
    self#send_getColumns username repo table;
    self#recv_getColumns
  method private send_getColumns username repo table = 
    oprot#writeMessageBegin ("getColumns", Protocol.CALL, seqid);
    let args = new getColumns_args in
      args#set_username username;
      args#set_repo repo;
      args#set_table table;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getColumns  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getColumns_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getColumns failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 28
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_createNewIndividualServer (seqid, iprot, oprot) =
    let args = read_createNewIndividualServer_args iprot in
      iprot#readMessageEnd;
      let result = new createNewIndividualServer_result in
        (handler#createNewIndividualServer args#get_key);
        oprot#writeMessageBegin ("createNewIndividualServer", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_terminateSession (seqid, iprot, oprot) =
    let args = read_terminateSession_args iprot in
      iprot#readMessageEnd;
      let result = new terminateSession_result in
        (handler#terminateSession args#get_key);
        oprot#writeMessageBegin ("terminateSession", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeRecommendation (seqid, iprot, oprot) =
    let args = read_makeRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new makeRecommendation_result in
        result#set_success (handler#makeRecommendation args#get_key args#get_userId args#get_numRecs args#get_isBoolean args#get_displayColumns);
        oprot#writeMessageBegin ("makeRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeItemBasedRecommendations (seqid, iprot, oprot) =
    let args = read_makeItemBasedRecommendations_args iprot in
      iprot#readMessageEnd;
      let result = new makeItemBasedRecommendations_result in
        result#set_success (handler#makeItemBasedRecommendations args#get_key args#get_userId args#get_numRecs args#get_displayColumns);
        oprot#writeMessageBegin ("makeItemBasedRecommendations", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getPageItems (seqid, iprot, oprot) =
    let args = read_getPageItems_args iprot in
      iprot#readMessageEnd;
      let result = new getPageItems_result in
        result#set_success (handler#getPageItems args#get_key args#get_page args#get_numPerPage args#get_displayColumns);
        oprot#writeMessageBegin ("getPageItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getItemCount (seqid, iprot, oprot) =
    let args = read_getItemCount_args iprot in
      iprot#readMessageEnd;
      let result = new getItemCount_result in
        result#set_success (handler#getItemCount args#get_key);
        oprot#writeMessageBegin ("getItemCount", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_recordRatings (seqid, iprot, oprot) =
    let args = read_recordRatings_args iprot in
      iprot#readMessageEnd;
      let result = new recordRatings_result in
        (handler#recordRatings args#get_key args#get_userId args#get_itemId args#get_rating);
        oprot#writeMessageBegin ("recordRatings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteRatings (seqid, iprot, oprot) =
    let args = read_deleteRatings_args iprot in
      iprot#readMessageEnd;
      let result = new deleteRatings_result in
        (handler#deleteRatings args#get_key args#get_userId args#get_itemId);
        oprot#writeMessageBegin ("deleteRatings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createNewUser (seqid, iprot, oprot) =
    let args = read_createNewUser_args iprot in
      iprot#readMessageEnd;
      let result = new createNewUser_result in
        result#set_success (handler#createNewUser args#get_key args#get_username args#get_iskibitzuser);
        oprot#writeMessageBegin ("createNewUser", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkUsername (seqid, iprot, oprot) =
    let args = read_checkUsername_args iprot in
      iprot#readMessageEnd;
      let result = new checkUsername_result in
        result#set_success (handler#checkUsername args#get_key args#get_username args#get_iskibitzuser);
        oprot#writeMessageBegin ("checkUsername", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkLogin (seqid, iprot, oprot) =
    let args = read_checkLogin_args iprot in
      iprot#readMessageEnd;
      let result = new checkLogin_result in
        result#set_success (handler#checkLogin args#get_key args#get_username args#get_password args#get_iskibitzuser);
        oprot#writeMessageBegin ("checkLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_retrieveUserId (seqid, iprot, oprot) =
    let args = read_retrieveUserId_args iprot in
      iprot#readMessageEnd;
      let result = new retrieveUserId_result in
        result#set_success (handler#retrieveUserId args#get_key args#get_username);
        oprot#writeMessageBegin ("retrieveUserId", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_createNewRecommender (seqid, iprot, oprot) =
    let args = read_createNewRecommender_args iprot in
      iprot#readMessageEnd;
      let result = new createNewRecommender_result in
        result#set_success (handler#createNewRecommender args#get_username args#get_primaryKey args#get_database args#get_table args#get_title args#get_description args#get_image args#get_ratings_column args#get_clientKey);
        oprot#writeMessageBegin ("createNewRecommender", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getUserRatedItems (seqid, iprot, oprot) =
    let args = read_getUserRatedItems_args iprot in
      iprot#readMessageEnd;
      let result = new getUserRatedItems_result in
        result#set_success (handler#getUserRatedItems args#get_key args#get_userId args#get_displayColumns);
        oprot#writeMessageBegin ("getUserRatedItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_initiateModel (seqid, iprot, oprot) =
    let args = read_initiateModel_args iprot in
      iprot#readMessageEnd;
      let result = new initiateModel_result in
        (handler#initiateModel args#get_key args#get_table args#get_username args#get_database);
        oprot#writeMessageBegin ("initiateModel", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getSearchItems (seqid, iprot, oprot) =
    let args = read_getSearchItems_args iprot in
      iprot#readMessageEnd;
      let result = new getSearchItems_result in
        result#set_success (handler#getSearchItems args#get_table args#get_query args#get_columnsToSearch args#get_displayColumns);
        oprot#writeMessageBegin ("getSearchItems", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_makeOverallRatingBasedOrRandomRecommendation (seqid, iprot, oprot) =
    let args = read_makeOverallRatingBasedOrRandomRecommendation_args iprot in
      iprot#readMessageEnd;
      let result = new makeOverallRatingBasedOrRandomRecommendation_result in
        result#set_success (handler#makeOverallRatingBasedOrRandomRecommendation args#get_key args#get_ratingColumnName args#get_numRecs args#get_displayColumns);
        oprot#writeMessageBegin ("makeOverallRatingBasedOrRandomRecommendation", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_addKibitzUser (seqid, iprot, oprot) =
    let args = read_addKibitzUser_args iprot in
      iprot#readMessageEnd;
      let result = new addKibitzUser_result in
        (handler#addKibitzUser args#get_email args#get_password);
        oprot#writeMessageBegin ("addKibitzUser", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkCorrectDatahubLogin (seqid, iprot, oprot) =
    let args = read_checkCorrectDatahubLogin_args iprot in
      iprot#readMessageEnd;
      let result = new checkCorrectDatahubLogin_result in
        result#set_success (handler#checkCorrectDatahubLogin args#get_username args#get_repository args#get_table args#get_primary_key args#get_title args#get_description args#get_image);
        oprot#writeMessageBegin ("checkCorrectDatahubLogin", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_checkRatingsColumn (seqid, iprot, oprot) =
    let args = read_checkRatingsColumn_args iprot in
      iprot#readMessageEnd;
      let result = new checkRatingsColumn_result in
        result#set_success (handler#checkRatingsColumn args#get_username args#get_table args#get_repository args#get_ratings_column);
        oprot#writeMessageBegin ("checkRatingsColumn", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getRecommenders (seqid, iprot, oprot) =
    let args = read_getRecommenders_args iprot in
      iprot#readMessageEnd;
      let result = new getRecommenders_result in
        result#set_success (handler#getRecommenders args#get_username);
        oprot#writeMessageBegin ("getRecommenders", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getProfilePicture (seqid, iprot, oprot) =
    let args = read_getProfilePicture_args iprot in
      iprot#readMessageEnd;
      let result = new getProfilePicture_result in
        result#set_success (handler#getProfilePicture args#get_username);
        oprot#writeMessageBegin ("getProfilePicture", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_saveFBProfilePic (seqid, iprot, oprot) =
    let args = read_saveFBProfilePic_args iprot in
      iprot#readMessageEnd;
      let result = new saveFBProfilePic_result in
        (handler#saveFBProfilePic args#get_username args#get_fbUsername);
        oprot#writeMessageBegin ("saveFBProfilePic", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_deleteRecommender (seqid, iprot, oprot) =
    let args = read_deleteRecommender_args iprot in
      iprot#readMessageEnd;
      let result = new deleteRecommender_result in
        (handler#deleteRecommender args#get_clientKey);
        oprot#writeMessageBegin ("deleteRecommender", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_updateTemplate (seqid, iprot, oprot) =
    let args = read_updateTemplate_args iprot in
      iprot#readMessageEnd;
      let result = new updateTemplate_result in
        (handler#updateTemplate args#get_username args#get_primaryKey args#get_title args#get_description args#get_image args#get_video args#get_itemTypes args#get_displayItems args#get_maxRatingVal args#get_numRecs args#get_recommenderName args#get_clientKey args#get_homepage args#get_creatorName args#get_repoName args#get_tableName args#get_ratingsColumn);
        oprot#writeMessageBegin ("updateTemplate", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_configurePrefilledUserRatings (seqid, iprot, oprot) =
    let args = read_configurePrefilledUserRatings_args iprot in
      iprot#readMessageEnd;
      let result = new configurePrefilledUserRatings_result in
        (handler#configurePrefilledUserRatings args#get_username args#get_repoName args#get_primaryKey args#get_itemTable args#get_tableName args#get_userIdCol args#get_itemIdCol args#get_userRatingCol);
        oprot#writeMessageBegin ("configurePrefilledUserRatings", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getTables (seqid, iprot, oprot) =
    let args = read_getTables_args iprot in
      iprot#readMessageEnd;
      let result = new getTables_result in
        result#set_success (handler#getTables args#get_username args#get_repo);
        oprot#writeMessageBegin ("getTables", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  method private process_getColumns (seqid, iprot, oprot) =
    let args = read_getColumns_args iprot in
      iprot#readMessageEnd;
      let result = new getColumns_result in
        result#set_success (handler#getColumns args#get_username args#get_repo args#get_table);
        oprot#writeMessageBegin ("getColumns", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "createNewIndividualServer" self#process_createNewIndividualServer;
    Hashtbl.add processMap "terminateSession" self#process_terminateSession;
    Hashtbl.add processMap "makeRecommendation" self#process_makeRecommendation;
    Hashtbl.add processMap "makeItemBasedRecommendations" self#process_makeItemBasedRecommendations;
    Hashtbl.add processMap "getPageItems" self#process_getPageItems;
    Hashtbl.add processMap "getItemCount" self#process_getItemCount;
    Hashtbl.add processMap "recordRatings" self#process_recordRatings;
    Hashtbl.add processMap "deleteRatings" self#process_deleteRatings;
    Hashtbl.add processMap "createNewUser" self#process_createNewUser;
    Hashtbl.add processMap "checkUsername" self#process_checkUsername;
    Hashtbl.add processMap "checkLogin" self#process_checkLogin;
    Hashtbl.add processMap "retrieveUserId" self#process_retrieveUserId;
    Hashtbl.add processMap "createNewRecommender" self#process_createNewRecommender;
    Hashtbl.add processMap "getUserRatedItems" self#process_getUserRatedItems;
    Hashtbl.add processMap "initiateModel" self#process_initiateModel;
    Hashtbl.add processMap "getSearchItems" self#process_getSearchItems;
    Hashtbl.add processMap "makeOverallRatingBasedOrRandomRecommendation" self#process_makeOverallRatingBasedOrRandomRecommendation;
    Hashtbl.add processMap "addKibitzUser" self#process_addKibitzUser;
    Hashtbl.add processMap "checkCorrectDatahubLogin" self#process_checkCorrectDatahubLogin;
    Hashtbl.add processMap "checkRatingsColumn" self#process_checkRatingsColumn;
    Hashtbl.add processMap "getRecommenders" self#process_getRecommenders;
    Hashtbl.add processMap "getProfilePicture" self#process_getProfilePicture;
    Hashtbl.add processMap "saveFBProfilePic" self#process_saveFBProfilePic;
    Hashtbl.add processMap "deleteRecommender" self#process_deleteRecommender;
    Hashtbl.add processMap "updateTemplate" self#process_updateTemplate;
    Hashtbl.add processMap "configurePrefilledUserRatings" self#process_configurePrefilledUserRatings;
    Hashtbl.add processMap "getTables" self#process_getTables;
    Hashtbl.add processMap "getColumns" self#process_getColumns;
end

