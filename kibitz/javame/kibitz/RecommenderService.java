/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kibitz;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class RecommenderService {

  public interface Iface {

    public void createNewIndividualServer(String key) throws TException;

    public void terminateSession(String key) throws TException;

    public Vector makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, Vector displayColumns) throws TException;

    public Vector makeItemBasedRecommendations(String key, long userId, long numRecs, Vector displayColumns) throws TException;

    public Vector getPageItems(String key, long page, long numPerPage, Vector displayColumns) throws TException;

    public long getItemCount(String key) throws TException;

    public void recordRatings(String key, long userId, long itemId, long rating) throws TException;

    public void deleteRatings(String key, long userId, long itemId) throws TException;

    public String createNewUser(String key, String username, boolean iskibitzuser) throws TException;

    public boolean checkUsername(String key, String username, boolean iskibitzuser) throws TException;

    public boolean checkLogin(String key, String username, String password, boolean iskibitzuser) throws TException;

    public long retrieveUserId(String key, String username) throws TException;

    public boolean createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey) throws TException;

    public Vector getUserRatedItems(String key, long userId, Vector displayColumns) throws TException;

    public void initiateModel(String key, String table, String username, String database) throws TException;

    public Vector getSearchItems(String table, String query, Vector columnsToSearch, Vector displayColumns) throws TException;

    public Vector makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, Vector displayColumns) throws TException;

    public void addKibitzUser(String email, String password) throws TException;

    public boolean checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image) throws TException;

    public boolean checkRatingsColumn(String username, String table, String repository, String ratings_column) throws TException;

    public Vector getRecommenders(String username) throws TException;

    public String getProfilePicture(String username) throws TException;

    public void saveFBProfilePic(String username, String fbUsername) throws TException;

    public void deleteRecommender(String clientKey) throws TException;

    public void updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Hashtable itemTypes, Vector displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn) throws TException;

    public void configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol) throws TException;

    public Vector getTables(String username, String repo) throws TException;

    public Vector getColumns(String username, String repo, String table) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void createNewIndividualServer(String key) throws TException
    {
      send_createNewIndividualServer(key);
      recv_createNewIndividualServer();
    }

    public void send_createNewIndividualServer(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createNewIndividualServer", TMessageType.CALL, ++seqid_));
      createNewIndividualServer_args args = new createNewIndividualServer_args();
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_createNewIndividualServer() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createNewIndividualServer failed: out of sequence response");
      }
      createNewIndividualServer_result result = new createNewIndividualServer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void terminateSession(String key) throws TException
    {
      send_terminateSession(key);
      recv_terminateSession();
    }

    public void send_terminateSession(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("terminateSession", TMessageType.CALL, ++seqid_));
      terminateSession_args args = new terminateSession_args();
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_terminateSession() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "terminateSession failed: out of sequence response");
      }
      terminateSession_result result = new terminateSession_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public Vector makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, Vector displayColumns) throws TException
    {
      send_makeRecommendation(key, userId, numRecs, isBoolean, displayColumns);
      return recv_makeRecommendation();
    }

    public void send_makeRecommendation(String key, long userId, long numRecs, boolean isBoolean, Vector displayColumns) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("makeRecommendation", TMessageType.CALL, ++seqid_));
      makeRecommendation_args args = new makeRecommendation_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setNumRecs(numRecs);
      args.setIsBoolean(isBoolean);
      args.setDisplayColumns(displayColumns);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_makeRecommendation() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "makeRecommendation failed: out of sequence response");
      }
      makeRecommendation_result result = new makeRecommendation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "makeRecommendation failed: unknown result");
    }

    public Vector makeItemBasedRecommendations(String key, long userId, long numRecs, Vector displayColumns) throws TException
    {
      send_makeItemBasedRecommendations(key, userId, numRecs, displayColumns);
      return recv_makeItemBasedRecommendations();
    }

    public void send_makeItemBasedRecommendations(String key, long userId, long numRecs, Vector displayColumns) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("makeItemBasedRecommendations", TMessageType.CALL, ++seqid_));
      makeItemBasedRecommendations_args args = new makeItemBasedRecommendations_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setNumRecs(numRecs);
      args.setDisplayColumns(displayColumns);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_makeItemBasedRecommendations() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "makeItemBasedRecommendations failed: out of sequence response");
      }
      makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "makeItemBasedRecommendations failed: unknown result");
    }

    public Vector getPageItems(String key, long page, long numPerPage, Vector displayColumns) throws TException
    {
      send_getPageItems(key, page, numPerPage, displayColumns);
      return recv_getPageItems();
    }

    public void send_getPageItems(String key, long page, long numPerPage, Vector displayColumns) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPageItems", TMessageType.CALL, ++seqid_));
      getPageItems_args args = new getPageItems_args();
      args.setKey(key);
      args.setPage(page);
      args.setNumPerPage(numPerPage);
      args.setDisplayColumns(displayColumns);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getPageItems() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPageItems failed: out of sequence response");
      }
      getPageItems_result result = new getPageItems_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPageItems failed: unknown result");
    }

    public long getItemCount(String key) throws TException
    {
      send_getItemCount(key);
      return recv_getItemCount();
    }

    public void send_getItemCount(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getItemCount", TMessageType.CALL, ++seqid_));
      getItemCount_args args = new getItemCount_args();
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getItemCount() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getItemCount failed: out of sequence response");
      }
      getItemCount_result result = new getItemCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getItemCount failed: unknown result");
    }

    public void recordRatings(String key, long userId, long itemId, long rating) throws TException
    {
      send_recordRatings(key, userId, itemId, rating);
      recv_recordRatings();
    }

    public void send_recordRatings(String key, long userId, long itemId, long rating) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("recordRatings", TMessageType.CALL, ++seqid_));
      recordRatings_args args = new recordRatings_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setItemId(itemId);
      args.setRating(rating);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_recordRatings() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "recordRatings failed: out of sequence response");
      }
      recordRatings_result result = new recordRatings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void deleteRatings(String key, long userId, long itemId) throws TException
    {
      send_deleteRatings(key, userId, itemId);
      recv_deleteRatings();
    }

    public void send_deleteRatings(String key, long userId, long itemId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("deleteRatings", TMessageType.CALL, ++seqid_));
      deleteRatings_args args = new deleteRatings_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setItemId(itemId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_deleteRatings() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "deleteRatings failed: out of sequence response");
      }
      deleteRatings_result result = new deleteRatings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public String createNewUser(String key, String username, boolean iskibitzuser) throws TException
    {
      send_createNewUser(key, username, iskibitzuser);
      return recv_createNewUser();
    }

    public void send_createNewUser(String key, String username, boolean iskibitzuser) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createNewUser", TMessageType.CALL, ++seqid_));
      createNewUser_args args = new createNewUser_args();
      args.setKey(key);
      args.setUsername(username);
      args.setIskibitzuser(iskibitzuser);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_createNewUser() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createNewUser failed: out of sequence response");
      }
      createNewUser_result result = new createNewUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createNewUser failed: unknown result");
    }

    public boolean checkUsername(String key, String username, boolean iskibitzuser) throws TException
    {
      send_checkUsername(key, username, iskibitzuser);
      return recv_checkUsername();
    }

    public void send_checkUsername(String key, String username, boolean iskibitzuser) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkUsername", TMessageType.CALL, ++seqid_));
      checkUsername_args args = new checkUsername_args();
      args.setKey(key);
      args.setUsername(username);
      args.setIskibitzuser(iskibitzuser);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_checkUsername() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkUsername failed: out of sequence response");
      }
      checkUsername_result result = new checkUsername_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkUsername failed: unknown result");
    }

    public boolean checkLogin(String key, String username, String password, boolean iskibitzuser) throws TException
    {
      send_checkLogin(key, username, password, iskibitzuser);
      return recv_checkLogin();
    }

    public void send_checkLogin(String key, String username, String password, boolean iskibitzuser) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkLogin", TMessageType.CALL, ++seqid_));
      checkLogin_args args = new checkLogin_args();
      args.setKey(key);
      args.setUsername(username);
      args.setPassword(password);
      args.setIskibitzuser(iskibitzuser);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_checkLogin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkLogin failed: out of sequence response");
      }
      checkLogin_result result = new checkLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkLogin failed: unknown result");
    }

    public long retrieveUserId(String key, String username) throws TException
    {
      send_retrieveUserId(key, username);
      return recv_retrieveUserId();
    }

    public void send_retrieveUserId(String key, String username) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("retrieveUserId", TMessageType.CALL, ++seqid_));
      retrieveUserId_args args = new retrieveUserId_args();
      args.setKey(key);
      args.setUsername(username);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_retrieveUserId() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "retrieveUserId failed: out of sequence response");
      }
      retrieveUserId_result result = new retrieveUserId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "retrieveUserId failed: unknown result");
    }

    public boolean createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey) throws TException
    {
      send_createNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey);
      return recv_createNewRecommender();
    }

    public void send_createNewRecommender(String username, String primaryKey, String database, String table, String title, String description, String image, String ratings_column, String clientKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createNewRecommender", TMessageType.CALL, ++seqid_));
      createNewRecommender_args args = new createNewRecommender_args();
      args.setUsername(username);
      args.setPrimaryKey(primaryKey);
      args.setDatabase(database);
      args.setTable(table);
      args.setTitle(title);
      args.setDescription(description);
      args.setImage(image);
      args.setRatings_column(ratings_column);
      args.setClientKey(clientKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_createNewRecommender() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createNewRecommender failed: out of sequence response");
      }
      createNewRecommender_result result = new createNewRecommender_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createNewRecommender failed: unknown result");
    }

    public Vector getUserRatedItems(String key, long userId, Vector displayColumns) throws TException
    {
      send_getUserRatedItems(key, userId, displayColumns);
      return recv_getUserRatedItems();
    }

    public void send_getUserRatedItems(String key, long userId, Vector displayColumns) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserRatedItems", TMessageType.CALL, ++seqid_));
      getUserRatedItems_args args = new getUserRatedItems_args();
      args.setKey(key);
      args.setUserId(userId);
      args.setDisplayColumns(displayColumns);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getUserRatedItems() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserRatedItems failed: out of sequence response");
      }
      getUserRatedItems_result result = new getUserRatedItems_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserRatedItems failed: unknown result");
    }

    public void initiateModel(String key, String table, String username, String database) throws TException
    {
      send_initiateModel(key, table, username, database);
      recv_initiateModel();
    }

    public void send_initiateModel(String key, String table, String username, String database) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("initiateModel", TMessageType.CALL, ++seqid_));
      initiateModel_args args = new initiateModel_args();
      args.setKey(key);
      args.setTable(table);
      args.setUsername(username);
      args.setDatabase(database);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_initiateModel() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "initiateModel failed: out of sequence response");
      }
      initiateModel_result result = new initiateModel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public Vector getSearchItems(String table, String query, Vector columnsToSearch, Vector displayColumns) throws TException
    {
      send_getSearchItems(table, query, columnsToSearch, displayColumns);
      return recv_getSearchItems();
    }

    public void send_getSearchItems(String table, String query, Vector columnsToSearch, Vector displayColumns) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSearchItems", TMessageType.CALL, ++seqid_));
      getSearchItems_args args = new getSearchItems_args();
      args.setTable(table);
      args.setQuery(query);
      args.setColumnsToSearch(columnsToSearch);
      args.setDisplayColumns(displayColumns);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getSearchItems() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSearchItems failed: out of sequence response");
      }
      getSearchItems_result result = new getSearchItems_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSearchItems failed: unknown result");
    }

    public Vector makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, Vector displayColumns) throws TException
    {
      send_makeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns);
      return recv_makeOverallRatingBasedOrRandomRecommendation();
    }

    public void send_makeOverallRatingBasedOrRandomRecommendation(String key, String ratingColumnName, long numRecs, Vector displayColumns) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("makeOverallRatingBasedOrRandomRecommendation", TMessageType.CALL, ++seqid_));
      makeOverallRatingBasedOrRandomRecommendation_args args = new makeOverallRatingBasedOrRandomRecommendation_args();
      args.setKey(key);
      args.setRatingColumnName(ratingColumnName);
      args.setNumRecs(numRecs);
      args.setDisplayColumns(displayColumns);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_makeOverallRatingBasedOrRandomRecommendation() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "makeOverallRatingBasedOrRandomRecommendation failed: out of sequence response");
      }
      makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "makeOverallRatingBasedOrRandomRecommendation failed: unknown result");
    }

    public void addKibitzUser(String email, String password) throws TException
    {
      send_addKibitzUser(email, password);
      recv_addKibitzUser();
    }

    public void send_addKibitzUser(String email, String password) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addKibitzUser", TMessageType.CALL, ++seqid_));
      addKibitzUser_args args = new addKibitzUser_args();
      args.setEmail(email);
      args.setPassword(password);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addKibitzUser() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addKibitzUser failed: out of sequence response");
      }
      addKibitzUser_result result = new addKibitzUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public boolean checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image) throws TException
    {
      send_checkCorrectDatahubLogin(username, repository, table, primary_key, title, description, image);
      return recv_checkCorrectDatahubLogin();
    }

    public void send_checkCorrectDatahubLogin(String username, String repository, String table, String primary_key, String title, String description, String image) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkCorrectDatahubLogin", TMessageType.CALL, ++seqid_));
      checkCorrectDatahubLogin_args args = new checkCorrectDatahubLogin_args();
      args.setUsername(username);
      args.setRepository(repository);
      args.setTable(table);
      args.setPrimary_key(primary_key);
      args.setTitle(title);
      args.setDescription(description);
      args.setImage(image);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_checkCorrectDatahubLogin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkCorrectDatahubLogin failed: out of sequence response");
      }
      checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkCorrectDatahubLogin failed: unknown result");
    }

    public boolean checkRatingsColumn(String username, String table, String repository, String ratings_column) throws TException
    {
      send_checkRatingsColumn(username, table, repository, ratings_column);
      return recv_checkRatingsColumn();
    }

    public void send_checkRatingsColumn(String username, String table, String repository, String ratings_column) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkRatingsColumn", TMessageType.CALL, ++seqid_));
      checkRatingsColumn_args args = new checkRatingsColumn_args();
      args.setUsername(username);
      args.setTable(table);
      args.setRepository(repository);
      args.setRatings_column(ratings_column);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_checkRatingsColumn() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkRatingsColumn failed: out of sequence response");
      }
      checkRatingsColumn_result result = new checkRatingsColumn_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkRatingsColumn failed: unknown result");
    }

    public Vector getRecommenders(String username) throws TException
    {
      send_getRecommenders(username);
      return recv_getRecommenders();
    }

    public void send_getRecommenders(String username) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRecommenders", TMessageType.CALL, ++seqid_));
      getRecommenders_args args = new getRecommenders_args();
      args.setUsername(username);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getRecommenders() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRecommenders failed: out of sequence response");
      }
      getRecommenders_result result = new getRecommenders_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRecommenders failed: unknown result");
    }

    public String getProfilePicture(String username) throws TException
    {
      send_getProfilePicture(username);
      return recv_getProfilePicture();
    }

    public void send_getProfilePicture(String username) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProfilePicture", TMessageType.CALL, ++seqid_));
      getProfilePicture_args args = new getProfilePicture_args();
      args.setUsername(username);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getProfilePicture() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProfilePicture failed: out of sequence response");
      }
      getProfilePicture_result result = new getProfilePicture_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProfilePicture failed: unknown result");
    }

    public void saveFBProfilePic(String username, String fbUsername) throws TException
    {
      send_saveFBProfilePic(username, fbUsername);
      recv_saveFBProfilePic();
    }

    public void send_saveFBProfilePic(String username, String fbUsername) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("saveFBProfilePic", TMessageType.CALL, ++seqid_));
      saveFBProfilePic_args args = new saveFBProfilePic_args();
      args.setUsername(username);
      args.setFbUsername(fbUsername);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_saveFBProfilePic() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "saveFBProfilePic failed: out of sequence response");
      }
      saveFBProfilePic_result result = new saveFBProfilePic_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void deleteRecommender(String clientKey) throws TException
    {
      send_deleteRecommender(clientKey);
      recv_deleteRecommender();
    }

    public void send_deleteRecommender(String clientKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("deleteRecommender", TMessageType.CALL, ++seqid_));
      deleteRecommender_args args = new deleteRecommender_args();
      args.setClientKey(clientKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_deleteRecommender() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "deleteRecommender failed: out of sequence response");
      }
      deleteRecommender_result result = new deleteRecommender_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Hashtable itemTypes, Vector displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn) throws TException
    {
      send_updateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn);
      recv_updateTemplate();
    }

    public void send_updateTemplate(String username, String primaryKey, String title, String description, String image, String video, Hashtable itemTypes, Vector displayItems, long maxRatingVal, long numRecs, String recommenderName, String clientKey, String homepage, String creatorName, String repoName, String tableName, String ratingsColumn) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateTemplate", TMessageType.CALL, ++seqid_));
      updateTemplate_args args = new updateTemplate_args();
      args.setUsername(username);
      args.setPrimaryKey(primaryKey);
      args.setTitle(title);
      args.setDescription(description);
      args.setImage(image);
      args.setVideo(video);
      args.setItemTypes(itemTypes);
      args.setDisplayItems(displayItems);
      args.setMaxRatingVal(maxRatingVal);
      args.setNumRecs(numRecs);
      args.setRecommenderName(recommenderName);
      args.setClientKey(clientKey);
      args.setHomepage(homepage);
      args.setCreatorName(creatorName);
      args.setRepoName(repoName);
      args.setTableName(tableName);
      args.setRatingsColumn(ratingsColumn);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateTemplate() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateTemplate failed: out of sequence response");
      }
      updateTemplate_result result = new updateTemplate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol) throws TException
    {
      send_configurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol);
      recv_configurePrefilledUserRatings();
    }

    public void send_configurePrefilledUserRatings(String username, String repoName, String primaryKey, String itemTable, String tableName, String userIdCol, String itemIdCol, String userRatingCol) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("configurePrefilledUserRatings", TMessageType.CALL, ++seqid_));
      configurePrefilledUserRatings_args args = new configurePrefilledUserRatings_args();
      args.setUsername(username);
      args.setRepoName(repoName);
      args.setPrimaryKey(primaryKey);
      args.setItemTable(itemTable);
      args.setTableName(tableName);
      args.setUserIdCol(userIdCol);
      args.setItemIdCol(itemIdCol);
      args.setUserRatingCol(userRatingCol);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_configurePrefilledUserRatings() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "configurePrefilledUserRatings failed: out of sequence response");
      }
      configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public Vector getTables(String username, String repo) throws TException
    {
      send_getTables(username, repo);
      return recv_getTables();
    }

    public void send_getTables(String username, String repo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTables", TMessageType.CALL, ++seqid_));
      getTables_args args = new getTables_args();
      args.setUsername(username);
      args.setRepo(repo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getTables() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTables failed: out of sequence response");
      }
      getTables_result result = new getTables_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTables failed: unknown result");
    }

    public Vector getColumns(String username, String repo, String table) throws TException
    {
      send_getColumns(username, repo, table);
      return recv_getColumns();
    }

    public void send_getColumns(String username, String repo, String table) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getColumns", TMessageType.CALL, ++seqid_));
      getColumns_args args = new getColumns_args();
      args.setUsername(username);
      args.setRepo(repo);
      args.setTable(table);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getColumns() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getColumns failed: out of sequence response");
      }
      getColumns_result result = new getColumns_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getColumns failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("createNewIndividualServer", new createNewIndividualServer());
      processMap_.put("terminateSession", new terminateSession());
      processMap_.put("makeRecommendation", new makeRecommendation());
      processMap_.put("makeItemBasedRecommendations", new makeItemBasedRecommendations());
      processMap_.put("getPageItems", new getPageItems());
      processMap_.put("getItemCount", new getItemCount());
      processMap_.put("recordRatings", new recordRatings());
      processMap_.put("deleteRatings", new deleteRatings());
      processMap_.put("createNewUser", new createNewUser());
      processMap_.put("checkUsername", new checkUsername());
      processMap_.put("checkLogin", new checkLogin());
      processMap_.put("retrieveUserId", new retrieveUserId());
      processMap_.put("createNewRecommender", new createNewRecommender());
      processMap_.put("getUserRatedItems", new getUserRatedItems());
      processMap_.put("initiateModel", new initiateModel());
      processMap_.put("getSearchItems", new getSearchItems());
      processMap_.put("makeOverallRatingBasedOrRandomRecommendation", new makeOverallRatingBasedOrRandomRecommendation());
      processMap_.put("addKibitzUser", new addKibitzUser());
      processMap_.put("checkCorrectDatahubLogin", new checkCorrectDatahubLogin());
      processMap_.put("checkRatingsColumn", new checkRatingsColumn());
      processMap_.put("getRecommenders", new getRecommenders());
      processMap_.put("getProfilePicture", new getProfilePicture());
      processMap_.put("saveFBProfilePic", new saveFBProfilePic());
      processMap_.put("deleteRecommender", new deleteRecommender());
      processMap_.put("updateTemplate", new updateTemplate());
      processMap_.put("configurePrefilledUserRatings", new configurePrefilledUserRatings());
      processMap_.put("getTables", new getTables());
      processMap_.put("getColumns", new getColumns());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class createNewIndividualServer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createNewIndividualServer_args args = new createNewIndividualServer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createNewIndividualServer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createNewIndividualServer_result result = new createNewIndividualServer_result();
        iface_.createNewIndividualServer(args.key);
        oprot.writeMessageBegin(new TMessage("createNewIndividualServer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class terminateSession implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        terminateSession_args args = new terminateSession_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("terminateSession", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        terminateSession_result result = new terminateSession_result();
        iface_.terminateSession(args.key);
        oprot.writeMessageBegin(new TMessage("terminateSession", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class makeRecommendation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        makeRecommendation_args args = new makeRecommendation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("makeRecommendation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        makeRecommendation_result result = new makeRecommendation_result();
        result.success = iface_.makeRecommendation(args.key, args.userId, args.numRecs, args.isBoolean, args.displayColumns);
        oprot.writeMessageBegin(new TMessage("makeRecommendation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class makeItemBasedRecommendations implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        makeItemBasedRecommendations_args args = new makeItemBasedRecommendations_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("makeItemBasedRecommendations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        makeItemBasedRecommendations_result result = new makeItemBasedRecommendations_result();
        result.success = iface_.makeItemBasedRecommendations(args.key, args.userId, args.numRecs, args.displayColumns);
        oprot.writeMessageBegin(new TMessage("makeItemBasedRecommendations", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPageItems implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPageItems_args args = new getPageItems_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPageItems", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPageItems_result result = new getPageItems_result();
        result.success = iface_.getPageItems(args.key, args.page, args.numPerPage, args.displayColumns);
        oprot.writeMessageBegin(new TMessage("getPageItems", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getItemCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getItemCount_args args = new getItemCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getItemCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getItemCount_result result = new getItemCount_result();
        result.success = iface_.getItemCount(args.key);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("getItemCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class recordRatings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        recordRatings_args args = new recordRatings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("recordRatings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        recordRatings_result result = new recordRatings_result();
        iface_.recordRatings(args.key, args.userId, args.itemId, args.rating);
        oprot.writeMessageBegin(new TMessage("recordRatings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteRatings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        deleteRatings_args args = new deleteRatings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("deleteRatings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteRatings_result result = new deleteRatings_result();
        iface_.deleteRatings(args.key, args.userId, args.itemId);
        oprot.writeMessageBegin(new TMessage("deleteRatings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createNewUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createNewUser_args args = new createNewUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createNewUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createNewUser_result result = new createNewUser_result();
        result.success = iface_.createNewUser(args.key, args.username, args.iskibitzuser);
        oprot.writeMessageBegin(new TMessage("createNewUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class checkUsername implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkUsername_args args = new checkUsername_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkUsername", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkUsername_result result = new checkUsername_result();
        result.success = iface_.checkUsername(args.key, args.username, args.iskibitzuser);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("checkUsername", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class checkLogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkLogin_args args = new checkLogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkLogin_result result = new checkLogin_result();
        result.success = iface_.checkLogin(args.key, args.username, args.password, args.iskibitzuser);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("checkLogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class retrieveUserId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        retrieveUserId_args args = new retrieveUserId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("retrieveUserId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        retrieveUserId_result result = new retrieveUserId_result();
        result.success = iface_.retrieveUserId(args.key, args.username);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("retrieveUserId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createNewRecommender implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createNewRecommender_args args = new createNewRecommender_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createNewRecommender", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createNewRecommender_result result = new createNewRecommender_result();
        result.success = iface_.createNewRecommender(args.username, args.primaryKey, args.database, args.table, args.title, args.description, args.image, args.ratings_column, args.clientKey);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("createNewRecommender", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserRatedItems implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserRatedItems_args args = new getUserRatedItems_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserRatedItems", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserRatedItems_result result = new getUserRatedItems_result();
        result.success = iface_.getUserRatedItems(args.key, args.userId, args.displayColumns);
        oprot.writeMessageBegin(new TMessage("getUserRatedItems", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class initiateModel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        initiateModel_args args = new initiateModel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("initiateModel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        initiateModel_result result = new initiateModel_result();
        iface_.initiateModel(args.key, args.table, args.username, args.database);
        oprot.writeMessageBegin(new TMessage("initiateModel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSearchItems implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSearchItems_args args = new getSearchItems_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSearchItems", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSearchItems_result result = new getSearchItems_result();
        result.success = iface_.getSearchItems(args.table, args.query, args.columnsToSearch, args.displayColumns);
        oprot.writeMessageBegin(new TMessage("getSearchItems", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class makeOverallRatingBasedOrRandomRecommendation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        makeOverallRatingBasedOrRandomRecommendation_args args = new makeOverallRatingBasedOrRandomRecommendation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("makeOverallRatingBasedOrRandomRecommendation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        makeOverallRatingBasedOrRandomRecommendation_result result = new makeOverallRatingBasedOrRandomRecommendation_result();
        result.success = iface_.makeOverallRatingBasedOrRandomRecommendation(args.key, args.ratingColumnName, args.numRecs, args.displayColumns);
        oprot.writeMessageBegin(new TMessage("makeOverallRatingBasedOrRandomRecommendation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addKibitzUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addKibitzUser_args args = new addKibitzUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addKibitzUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addKibitzUser_result result = new addKibitzUser_result();
        iface_.addKibitzUser(args.email, args.password);
        oprot.writeMessageBegin(new TMessage("addKibitzUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class checkCorrectDatahubLogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkCorrectDatahubLogin_args args = new checkCorrectDatahubLogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkCorrectDatahubLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkCorrectDatahubLogin_result result = new checkCorrectDatahubLogin_result();
        result.success = iface_.checkCorrectDatahubLogin(args.username, args.repository, args.table, args.primary_key, args.title, args.description, args.image);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("checkCorrectDatahubLogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class checkRatingsColumn implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkRatingsColumn_args args = new checkRatingsColumn_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkRatingsColumn", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkRatingsColumn_result result = new checkRatingsColumn_result();
        result.success = iface_.checkRatingsColumn(args.username, args.table, args.repository, args.ratings_column);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("checkRatingsColumn", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRecommenders implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRecommenders_args args = new getRecommenders_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRecommenders", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRecommenders_result result = new getRecommenders_result();
        result.success = iface_.getRecommenders(args.username);
        oprot.writeMessageBegin(new TMessage("getRecommenders", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProfilePicture implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProfilePicture_args args = new getProfilePicture_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProfilePicture", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProfilePicture_result result = new getProfilePicture_result();
        result.success = iface_.getProfilePicture(args.username);
        oprot.writeMessageBegin(new TMessage("getProfilePicture", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class saveFBProfilePic implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        saveFBProfilePic_args args = new saveFBProfilePic_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("saveFBProfilePic", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        saveFBProfilePic_result result = new saveFBProfilePic_result();
        iface_.saveFBProfilePic(args.username, args.fbUsername);
        oprot.writeMessageBegin(new TMessage("saveFBProfilePic", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteRecommender implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        deleteRecommender_args args = new deleteRecommender_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("deleteRecommender", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteRecommender_result result = new deleteRecommender_result();
        iface_.deleteRecommender(args.clientKey);
        oprot.writeMessageBegin(new TMessage("deleteRecommender", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateTemplate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateTemplate_args args = new updateTemplate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateTemplate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateTemplate_result result = new updateTemplate_result();
        iface_.updateTemplate(args.username, args.primaryKey, args.title, args.description, args.image, args.video, args.itemTypes, args.displayItems, args.maxRatingVal, args.numRecs, args.recommenderName, args.clientKey, args.homepage, args.creatorName, args.repoName, args.tableName, args.ratingsColumn);
        oprot.writeMessageBegin(new TMessage("updateTemplate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class configurePrefilledUserRatings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        configurePrefilledUserRatings_args args = new configurePrefilledUserRatings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("configurePrefilledUserRatings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        configurePrefilledUserRatings_result result = new configurePrefilledUserRatings_result();
        iface_.configurePrefilledUserRatings(args.username, args.repoName, args.primaryKey, args.itemTable, args.tableName, args.userIdCol, args.itemIdCol, args.userRatingCol);
        oprot.writeMessageBegin(new TMessage("configurePrefilledUserRatings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTables implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTables_args args = new getTables_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTables", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTables_result result = new getTables_result();
        result.success = iface_.getTables(args.username, args.repo);
        oprot.writeMessageBegin(new TMessage("getTables", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getColumns implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getColumns_args args = new getColumns_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getColumns", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getColumns_result result = new getColumns_result();
        result.success = iface_.getColumns(args.username, args.repo, args.table);
        oprot.writeMessageBegin(new TMessage("getColumns", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class createNewIndividualServer_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNewIndividualServer_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);

    private String key;

    // isset id assignments

    public createNewIndividualServer_args() {
    }

    public createNewIndividualServer_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewIndividualServer_args(createNewIndividualServer_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public createNewIndividualServer_args deepCopy() {
      return new createNewIndividualServer_args(this);
    }

    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewIndividualServer_args)
        return this.equals((createNewIndividualServer_args)that);
      return false;
    }

    public boolean equals(createNewIndividualServer_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNewIndividualServer_args other = (createNewIndividualServer_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNewIndividualServer_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNewIndividualServer_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNewIndividualServer_result");


    public createNewIndividualServer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewIndividualServer_result(createNewIndividualServer_result other) {
    }

    public createNewIndividualServer_result deepCopy() {
      return new createNewIndividualServer_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewIndividualServer_result)
        return this.equals((createNewIndividualServer_result)that);
      return false;
    }

    public boolean equals(createNewIndividualServer_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNewIndividualServer_result other = (createNewIndividualServer_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNewIndividualServer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class terminateSession_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("terminateSession_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);

    private String key;

    // isset id assignments

    public terminateSession_args() {
    }

    public terminateSession_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateSession_args(terminateSession_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public terminateSession_args deepCopy() {
      return new terminateSession_args(this);
    }

    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateSession_args)
        return this.equals((terminateSession_args)that);
      return false;
    }

    public boolean equals(terminateSession_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      terminateSession_args other = (terminateSession_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("terminateSession_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class terminateSession_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("terminateSession_result");


    public terminateSession_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateSession_result(terminateSession_result other) {
    }

    public terminateSession_result deepCopy() {
      return new terminateSession_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateSession_result)
        return this.equals((terminateSession_result)that);
      return false;
    }

    public boolean equals(terminateSession_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      terminateSession_result other = (terminateSession_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("terminateSession_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeRecommendation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeRecommendation_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short)2);
    private static final TField NUM_RECS_FIELD_DESC = new TField("numRecs", TType.I64, (short)3);
    private static final TField IS_BOOLEAN_FIELD_DESC = new TField("isBoolean", TType.BOOL, (short)4);
    private static final TField DISPLAY_COLUMNS_FIELD_DESC = new TField("displayColumns", TType.LIST, (short)5);

    private String key;
    private long userId;
    private long numRecs;
    private boolean isBoolean;
    private Vector displayColumns;

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __NUMRECS_ISSET_ID = 1;
    private static final int __ISBOOLEAN_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public makeRecommendation_args() {
    }

    public makeRecommendation_args(
      String key,
      long userId,
      long numRecs,
      boolean isBoolean,
      Vector displayColumns)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.isBoolean = isBoolean;
      setIsBooleanIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeRecommendation_args(makeRecommendation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.numRecs = other.numRecs;
      this.isBoolean = other.isBoolean;
      if (other.isSetDisplayColumns()) {
        Vector __this__displayColumns = new Vector();
        for (Enumeration other_enum = other.displayColumns.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__displayColumns.addElement(other_element);
        }
        this.displayColumns = __this__displayColumns;
      }
    }

    public makeRecommendation_args deepCopy() {
      return new makeRecommendation_args(this);
    }

    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      setIsBooleanIsSet(false);
      this.isBoolean = false;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public void setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
    }

    public void unsetUserId() {
      __isset_vector[__USERID_ISSET_ID] = false;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_vector[__USERID_ISSET_ID];
    }

    public void setUserIdIsSet(boolean value) {
      __isset_vector[__USERID_ISSET_ID] = value;
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public void setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
    }

    public void unsetNumRecs() {
      __isset_vector[__NUMRECS_ISSET_ID] = false;
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return __isset_vector[__NUMRECS_ISSET_ID];
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_vector[__NUMRECS_ISSET_ID] = value;
    }

    public boolean isIsBoolean() {
      return this.isBoolean;
    }

    public void setIsBoolean(boolean isBoolean) {
      this.isBoolean = isBoolean;
      setIsBooleanIsSet(true);
    }

    public void unsetIsBoolean() {
      __isset_vector[__ISBOOLEAN_ISSET_ID] = false;
    }

    /** Returns true if field isBoolean is set (has been assigned a value) and false otherwise */
    public boolean isSetIsBoolean() {
      return __isset_vector[__ISBOOLEAN_ISSET_ID];
    }

    public void setIsBooleanIsSet(boolean value) {
      __isset_vector[__ISBOOLEAN_ISSET_ID] = value;
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public Enumeration getDisplayColumnsEnumeration() {
      return (this.displayColumns == null) ? null : this.displayColumns.elements();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new Vector();
      }
      this.displayColumns.addElement(elem);
    }

    public Vector getDisplayColumns() {
      return this.displayColumns;
    }

    public void setDisplayColumns(Vector displayColumns) {
      this.displayColumns = displayColumns;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeRecommendation_args)
        return this.equals((makeRecommendation_args)that);
      return false;
    }

    public boolean equals(makeRecommendation_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_isBoolean = true;
      boolean that_present_isBoolean = true;
      if (this_present_isBoolean || that_present_isBoolean) {
        if (!(this_present_isBoolean && that_present_isBoolean))
          return false;
        if (this.isBoolean != that.isBoolean)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeRecommendation_args other = (makeRecommendation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserId(), other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNumRecs(), other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIsBoolean(), other.isSetIsBoolean());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsBoolean()) {
        lastComparison = TBaseHelper.compareTo(this.isBoolean, other.isBoolean);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayColumns(), other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.I64) {
              this.userId = iprot.readI64();
              setUserIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NUM_RECS
            if (field.type == TType.I64) {
              this.numRecs = iprot.readI64();
              setNumRecsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // IS_BOOLEAN
            if (field.type == TType.BOOL) {
              this.isBoolean = iprot.readBool();
              setIsBooleanIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // DISPLAY_COLUMNS
            if (field.type == TType.LIST) {
              {
                TList _list14 = iprot.readListBegin();
                this.displayColumns = new Vector(_list14.size);
                for (int _i15 = 0; _i15 < _list14.size; ++_i15)
                {
                  String _elem16;
                  _elem16 = iprot.readString();
                  this.displayColumns.addElement(_elem16);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(this.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
      oprot.writeI64(this.numRecs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BOOLEAN_FIELD_DESC);
      oprot.writeBool(this.isBoolean);
      oprot.writeFieldEnd();
      if (this.displayColumns != null) {
        oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.displayColumns.size()));
          for (Enumeration _iter17_enum = this.displayColumns.elements(); _iter17_enum.hasMoreElements(); )           {
            String _iter17 = (String)_iter17_enum.nextElement();
            oprot.writeString(_iter17);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeRecommendation_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isBoolean:");
      sb.append(this.isBoolean);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeRecommendation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeRecommendation_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public makeRecommendation_result() {
    }

    public makeRecommendation_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeRecommendation_result(makeRecommendation_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Item other_element = (Item)other_enum.nextElement();
          __this__success.addElement(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public makeRecommendation_result deepCopy() {
      return new makeRecommendation_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeRecommendation_result)
        return this.equals((makeRecommendation_result)that);
      return false;
    }

    public boolean equals(makeRecommendation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeRecommendation_result other = (makeRecommendation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list18 = iprot.readListBegin();
                this.success = new Vector(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  Item _elem20;
                  _elem20 = new Item();
                  _elem20.read(iprot);
                  this.success.addElement(_elem20);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter21_enum = this.success.elements(); _iter21_enum.hasMoreElements(); )           {
            Item _iter21 = (Item)_iter21_enum.nextElement();
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeRecommendation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeItemBasedRecommendations_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeItemBasedRecommendations_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short)2);
    private static final TField NUM_RECS_FIELD_DESC = new TField("numRecs", TType.I64, (short)3);
    private static final TField DISPLAY_COLUMNS_FIELD_DESC = new TField("displayColumns", TType.LIST, (short)4);

    private String key;
    private long userId;
    private long numRecs;
    private Vector displayColumns;

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __NUMRECS_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public makeItemBasedRecommendations_args() {
    }

    public makeItemBasedRecommendations_args(
      String key,
      long userId,
      long numRecs,
      Vector displayColumns)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeItemBasedRecommendations_args(makeItemBasedRecommendations_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.numRecs = other.numRecs;
      if (other.isSetDisplayColumns()) {
        Vector __this__displayColumns = new Vector();
        for (Enumeration other_enum = other.displayColumns.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__displayColumns.addElement(other_element);
        }
        this.displayColumns = __this__displayColumns;
      }
    }

    public makeItemBasedRecommendations_args deepCopy() {
      return new makeItemBasedRecommendations_args(this);
    }

    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public void setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
    }

    public void unsetUserId() {
      __isset_vector[__USERID_ISSET_ID] = false;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_vector[__USERID_ISSET_ID];
    }

    public void setUserIdIsSet(boolean value) {
      __isset_vector[__USERID_ISSET_ID] = value;
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public void setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
    }

    public void unsetNumRecs() {
      __isset_vector[__NUMRECS_ISSET_ID] = false;
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return __isset_vector[__NUMRECS_ISSET_ID];
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_vector[__NUMRECS_ISSET_ID] = value;
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public Enumeration getDisplayColumnsEnumeration() {
      return (this.displayColumns == null) ? null : this.displayColumns.elements();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new Vector();
      }
      this.displayColumns.addElement(elem);
    }

    public Vector getDisplayColumns() {
      return this.displayColumns;
    }

    public void setDisplayColumns(Vector displayColumns) {
      this.displayColumns = displayColumns;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeItemBasedRecommendations_args)
        return this.equals((makeItemBasedRecommendations_args)that);
      return false;
    }

    public boolean equals(makeItemBasedRecommendations_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeItemBasedRecommendations_args other = (makeItemBasedRecommendations_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserId(), other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNumRecs(), other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayColumns(), other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.I64) {
              this.userId = iprot.readI64();
              setUserIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NUM_RECS
            if (field.type == TType.I64) {
              this.numRecs = iprot.readI64();
              setNumRecsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DISPLAY_COLUMNS
            if (field.type == TType.LIST) {
              {
                TList _list22 = iprot.readListBegin();
                this.displayColumns = new Vector(_list22.size);
                for (int _i23 = 0; _i23 < _list22.size; ++_i23)
                {
                  String _elem24;
                  _elem24 = iprot.readString();
                  this.displayColumns.addElement(_elem24);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(this.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
      oprot.writeI64(this.numRecs);
      oprot.writeFieldEnd();
      if (this.displayColumns != null) {
        oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.displayColumns.size()));
          for (Enumeration _iter25_enum = this.displayColumns.elements(); _iter25_enum.hasMoreElements(); )           {
            String _iter25 = (String)_iter25_enum.nextElement();
            oprot.writeString(_iter25);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeItemBasedRecommendations_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeItemBasedRecommendations_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeItemBasedRecommendations_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public makeItemBasedRecommendations_result() {
    }

    public makeItemBasedRecommendations_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeItemBasedRecommendations_result(makeItemBasedRecommendations_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Item other_element = (Item)other_enum.nextElement();
          __this__success.addElement(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public makeItemBasedRecommendations_result deepCopy() {
      return new makeItemBasedRecommendations_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeItemBasedRecommendations_result)
        return this.equals((makeItemBasedRecommendations_result)that);
      return false;
    }

    public boolean equals(makeItemBasedRecommendations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeItemBasedRecommendations_result other = (makeItemBasedRecommendations_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list26 = iprot.readListBegin();
                this.success = new Vector(_list26.size);
                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                {
                  Item _elem28;
                  _elem28 = new Item();
                  _elem28.read(iprot);
                  this.success.addElement(_elem28);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter29_enum = this.success.elements(); _iter29_enum.hasMoreElements(); )           {
            Item _iter29 = (Item)_iter29_enum.nextElement();
            _iter29.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeItemBasedRecommendations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPageItems_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPageItems_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField PAGE_FIELD_DESC = new TField("page", TType.I64, (short)2);
    private static final TField NUM_PER_PAGE_FIELD_DESC = new TField("numPerPage", TType.I64, (short)3);
    private static final TField DISPLAY_COLUMNS_FIELD_DESC = new TField("displayColumns", TType.LIST, (short)4);

    private String key;
    private long page;
    private long numPerPage;
    private Vector displayColumns;

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __NUMPERPAGE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getPageItems_args() {
    }

    public getPageItems_args(
      String key,
      long page,
      long numPerPage,
      Vector displayColumns)
    {
      this();
      this.key = key;
      this.page = page;
      setPageIsSet(true);
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPageItems_args(getPageItems_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.page = other.page;
      this.numPerPage = other.numPerPage;
      if (other.isSetDisplayColumns()) {
        Vector __this__displayColumns = new Vector();
        for (Enumeration other_enum = other.displayColumns.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__displayColumns.addElement(other_element);
        }
        this.displayColumns = __this__displayColumns;
      }
    }

    public getPageItems_args deepCopy() {
      return new getPageItems_args(this);
    }

    public void clear() {
      this.key = null;
      setPageIsSet(false);
      this.page = 0;
      setNumPerPageIsSet(false);
      this.numPerPage = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getPage() {
      return this.page;
    }

    public void setPage(long page) {
      this.page = page;
      setPageIsSet(true);
    }

    public void unsetPage() {
      __isset_vector[__PAGE_ISSET_ID] = false;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_vector[__PAGE_ISSET_ID];
    }

    public void setPageIsSet(boolean value) {
      __isset_vector[__PAGE_ISSET_ID] = value;
    }

    public long getNumPerPage() {
      return this.numPerPage;
    }

    public void setNumPerPage(long numPerPage) {
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
    }

    public void unsetNumPerPage() {
      __isset_vector[__NUMPERPAGE_ISSET_ID] = false;
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPerPage() {
      return __isset_vector[__NUMPERPAGE_ISSET_ID];
    }

    public void setNumPerPageIsSet(boolean value) {
      __isset_vector[__NUMPERPAGE_ISSET_ID] = value;
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public Enumeration getDisplayColumnsEnumeration() {
      return (this.displayColumns == null) ? null : this.displayColumns.elements();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new Vector();
      }
      this.displayColumns.addElement(elem);
    }

    public Vector getDisplayColumns() {
      return this.displayColumns;
    }

    public void setDisplayColumns(Vector displayColumns) {
      this.displayColumns = displayColumns;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPageItems_args)
        return this.equals((getPageItems_args)that);
      return false;
    }

    public boolean equals(getPageItems_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPageItems_args other = (getPageItems_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPage(), other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNumPerPage(), other.isSetNumPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPerPage()) {
        lastComparison = TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayColumns(), other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PAGE
            if (field.type == TType.I64) {
              this.page = iprot.readI64();
              setPageIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NUM_PER_PAGE
            if (field.type == TType.I64) {
              this.numPerPage = iprot.readI64();
              setNumPerPageIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DISPLAY_COLUMNS
            if (field.type == TType.LIST) {
              {
                TList _list30 = iprot.readListBegin();
                this.displayColumns = new Vector(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  String _elem32;
                  _elem32 = iprot.readString();
                  this.displayColumns.addElement(_elem32);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI64(this.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
      oprot.writeI64(this.numPerPage);
      oprot.writeFieldEnd();
      if (this.displayColumns != null) {
        oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.displayColumns.size()));
          for (Enumeration _iter33_enum = this.displayColumns.elements(); _iter33_enum.hasMoreElements(); )           {
            String _iter33 = (String)_iter33_enum.nextElement();
            oprot.writeString(_iter33);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPageItems_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPageItems_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPageItems_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public getPageItems_result() {
    }

    public getPageItems_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPageItems_result(getPageItems_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Item other_element = (Item)other_enum.nextElement();
          __this__success.addElement(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPageItems_result deepCopy() {
      return new getPageItems_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPageItems_result)
        return this.equals((getPageItems_result)that);
      return false;
    }

    public boolean equals(getPageItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPageItems_result other = (getPageItems_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list34 = iprot.readListBegin();
                this.success = new Vector(_list34.size);
                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                {
                  Item _elem36;
                  _elem36 = new Item();
                  _elem36.read(iprot);
                  this.success.addElement(_elem36);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter37_enum = this.success.elements(); _iter37_enum.hasMoreElements(); )           {
            Item _iter37 = (Item)_iter37_enum.nextElement();
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPageItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getItemCount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getItemCount_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);

    private String key;

    // isset id assignments

    public getItemCount_args() {
    }

    public getItemCount_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemCount_args(getItemCount_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public getItemCount_args deepCopy() {
      return new getItemCount_args(this);
    }

    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemCount_args)
        return this.equals((getItemCount_args)that);
      return false;
    }

    public boolean equals(getItemCount_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getItemCount_args other = (getItemCount_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getItemCount_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getItemCount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getItemCount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);

    private long success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getItemCount_result() {
    }

    public getItemCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItemCount_result(getItemCount_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public getItemCount_result deepCopy() {
      return new getItemCount_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getItemCount_result)
        return this.equals((getItemCount_result)that);
      return false;
    }

    public boolean equals(getItemCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getItemCount_result other = (getItemCount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getItemCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class recordRatings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("recordRatings_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short)2);
    private static final TField ITEM_ID_FIELD_DESC = new TField("itemId", TType.I64, (short)3);
    private static final TField RATING_FIELD_DESC = new TField("rating", TType.I64, (short)4);

    private String key;
    private long userId;
    private long itemId;
    private long rating;

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ITEMID_ISSET_ID = 1;
    private static final int __RATING_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public recordRatings_args() {
    }

    public recordRatings_args(
      String key,
      long userId,
      long itemId,
      long rating)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.itemId = itemId;
      setItemIdIsSet(true);
      this.rating = rating;
      setRatingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordRatings_args(recordRatings_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.itemId = other.itemId;
      this.rating = other.rating;
    }

    public recordRatings_args deepCopy() {
      return new recordRatings_args(this);
    }

    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setItemIdIsSet(false);
      this.itemId = 0;
      setRatingIsSet(false);
      this.rating = 0;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public void setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
    }

    public void unsetUserId() {
      __isset_vector[__USERID_ISSET_ID] = false;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_vector[__USERID_ISSET_ID];
    }

    public void setUserIdIsSet(boolean value) {
      __isset_vector[__USERID_ISSET_ID] = value;
    }

    public long getItemId() {
      return this.itemId;
    }

    public void setItemId(long itemId) {
      this.itemId = itemId;
      setItemIdIsSet(true);
    }

    public void unsetItemId() {
      __isset_vector[__ITEMID_ISSET_ID] = false;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return __isset_vector[__ITEMID_ISSET_ID];
    }

    public void setItemIdIsSet(boolean value) {
      __isset_vector[__ITEMID_ISSET_ID] = value;
    }

    public long getRating() {
      return this.rating;
    }

    public void setRating(long rating) {
      this.rating = rating;
      setRatingIsSet(true);
    }

    public void unsetRating() {
      __isset_vector[__RATING_ISSET_ID] = false;
    }

    /** Returns true if field rating is set (has been assigned a value) and false otherwise */
    public boolean isSetRating() {
      return __isset_vector[__RATING_ISSET_ID];
    }

    public void setRatingIsSet(boolean value) {
      __isset_vector[__RATING_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordRatings_args)
        return this.equals((recordRatings_args)that);
      return false;
    }

    public boolean equals(recordRatings_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_itemId = true;
      boolean that_present_itemId = true;
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (this.itemId != that.itemId)
          return false;
      }

      boolean this_present_rating = true;
      boolean that_present_rating = true;
      if (this_present_rating || that_present_rating) {
        if (!(this_present_rating && that_present_rating))
          return false;
        if (this.rating != that.rating)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      recordRatings_args other = (recordRatings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserId(), other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetItemId(), other.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = TBaseHelper.compareTo(this.itemId, other.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRating(), other.isSetRating());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRating()) {
        lastComparison = TBaseHelper.compareTo(this.rating, other.rating);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.I64) {
              this.userId = iprot.readI64();
              setUserIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ITEM_ID
            if (field.type == TType.I64) {
              this.itemId = iprot.readI64();
              setItemIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // RATING
            if (field.type == TType.I64) {
              this.rating = iprot.readI64();
              setRatingIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(this.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI64(this.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATING_FIELD_DESC);
      oprot.writeI64(this.rating);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("recordRatings_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rating:");
      sb.append(this.rating);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class recordRatings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("recordRatings_result");


    public recordRatings_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordRatings_result(recordRatings_result other) {
    }

    public recordRatings_result deepCopy() {
      return new recordRatings_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordRatings_result)
        return this.equals((recordRatings_result)that);
      return false;
    }

    public boolean equals(recordRatings_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      recordRatings_result other = (recordRatings_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("recordRatings_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteRatings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteRatings_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short)2);
    private static final TField ITEM_ID_FIELD_DESC = new TField("itemId", TType.I64, (short)3);

    private String key;
    private long userId;
    private long itemId;

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ITEMID_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public deleteRatings_args() {
    }

    public deleteRatings_args(
      String key,
      long userId,
      long itemId)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.itemId = itemId;
      setItemIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRatings_args(deleteRatings_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      this.itemId = other.itemId;
    }

    public deleteRatings_args deepCopy() {
      return new deleteRatings_args(this);
    }

    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setItemIdIsSet(false);
      this.itemId = 0;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public void setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
    }

    public void unsetUserId() {
      __isset_vector[__USERID_ISSET_ID] = false;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_vector[__USERID_ISSET_ID];
    }

    public void setUserIdIsSet(boolean value) {
      __isset_vector[__USERID_ISSET_ID] = value;
    }

    public long getItemId() {
      return this.itemId;
    }

    public void setItemId(long itemId) {
      this.itemId = itemId;
      setItemIdIsSet(true);
    }

    public void unsetItemId() {
      __isset_vector[__ITEMID_ISSET_ID] = false;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return __isset_vector[__ITEMID_ISSET_ID];
    }

    public void setItemIdIsSet(boolean value) {
      __isset_vector[__ITEMID_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRatings_args)
        return this.equals((deleteRatings_args)that);
      return false;
    }

    public boolean equals(deleteRatings_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_itemId = true;
      boolean that_present_itemId = true;
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (this.itemId != that.itemId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      deleteRatings_args other = (deleteRatings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserId(), other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetItemId(), other.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = TBaseHelper.compareTo(this.itemId, other.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.I64) {
              this.userId = iprot.readI64();
              setUserIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ITEM_ID
            if (field.type == TType.I64) {
              this.itemId = iprot.readI64();
              setItemIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(this.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI64(this.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("deleteRatings_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteRatings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteRatings_result");


    public deleteRatings_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRatings_result(deleteRatings_result other) {
    }

    public deleteRatings_result deepCopy() {
      return new deleteRatings_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRatings_result)
        return this.equals((deleteRatings_result)that);
      return false;
    }

    public boolean equals(deleteRatings_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      deleteRatings_result other = (deleteRatings_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("deleteRatings_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNewUser_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNewUser_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)2);
    private static final TField ISKIBITZUSER_FIELD_DESC = new TField("iskibitzuser", TType.BOOL, (short)3);

    private String key;
    private String username;
    private boolean iskibitzuser;

    // isset id assignments
    private static final int __ISKIBITZUSER_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public createNewUser_args() {
    }

    public createNewUser_args(
      String key,
      String username,
      boolean iskibitzuser)
    {
      this();
      this.key = key;
      this.username = username;
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_args(createNewUser_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      this.iskibitzuser = other.iskibitzuser;
    }

    public createNewUser_args deepCopy() {
      return new createNewUser_args(this);
    }

    public void clear() {
      this.key = null;
      this.username = null;
      setIskibitzuserIsSet(false);
      this.iskibitzuser = false;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean isIskibitzuser() {
      return this.iskibitzuser;
    }

    public void setIskibitzuser(boolean iskibitzuser) {
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    public void unsetIskibitzuser() {
      __isset_vector[__ISKIBITZUSER_ISSET_ID] = false;
    }

    /** Returns true if field iskibitzuser is set (has been assigned a value) and false otherwise */
    public boolean isSetIskibitzuser() {
      return __isset_vector[__ISKIBITZUSER_ISSET_ID];
    }

    public void setIskibitzuserIsSet(boolean value) {
      __isset_vector[__ISKIBITZUSER_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_args)
        return this.equals((createNewUser_args)that);
      return false;
    }

    public boolean equals(createNewUser_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_iskibitzuser = true;
      boolean that_present_iskibitzuser = true;
      if (this_present_iskibitzuser || that_present_iskibitzuser) {
        if (!(this_present_iskibitzuser && that_present_iskibitzuser))
          return false;
        if (this.iskibitzuser != that.iskibitzuser)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNewUser_args other = (createNewUser_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIskibitzuser(), other.isSetIskibitzuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIskibitzuser()) {
        lastComparison = TBaseHelper.compareTo(this.iskibitzuser, other.iskibitzuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ISKIBITZUSER
            if (field.type == TType.BOOL) {
              this.iskibitzuser = iprot.readBool();
              setIskibitzuserIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISKIBITZUSER_FIELD_DESC);
      oprot.writeBool(this.iskibitzuser);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNewUser_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iskibitzuser:");
      sb.append(this.iskibitzuser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNewUser_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNewUser_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    private String success;

    // isset id assignments

    public createNewUser_result() {
    }

    public createNewUser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_result(createNewUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createNewUser_result deepCopy() {
      return new createNewUser_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_result)
        return this.equals((createNewUser_result)that);
      return false;
    }

    public boolean equals(createNewUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNewUser_result other = (createNewUser_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNewUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkUsername_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkUsername_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)2);
    private static final TField ISKIBITZUSER_FIELD_DESC = new TField("iskibitzuser", TType.BOOL, (short)3);

    private String key;
    private String username;
    private boolean iskibitzuser;

    // isset id assignments
    private static final int __ISKIBITZUSER_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkUsername_args() {
    }

    public checkUsername_args(
      String key,
      String username,
      boolean iskibitzuser)
    {
      this();
      this.key = key;
      this.username = username;
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsername_args(checkUsername_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      this.iskibitzuser = other.iskibitzuser;
    }

    public checkUsername_args deepCopy() {
      return new checkUsername_args(this);
    }

    public void clear() {
      this.key = null;
      this.username = null;
      setIskibitzuserIsSet(false);
      this.iskibitzuser = false;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean isIskibitzuser() {
      return this.iskibitzuser;
    }

    public void setIskibitzuser(boolean iskibitzuser) {
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    public void unsetIskibitzuser() {
      __isset_vector[__ISKIBITZUSER_ISSET_ID] = false;
    }

    /** Returns true if field iskibitzuser is set (has been assigned a value) and false otherwise */
    public boolean isSetIskibitzuser() {
      return __isset_vector[__ISKIBITZUSER_ISSET_ID];
    }

    public void setIskibitzuserIsSet(boolean value) {
      __isset_vector[__ISKIBITZUSER_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsername_args)
        return this.equals((checkUsername_args)that);
      return false;
    }

    public boolean equals(checkUsername_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_iskibitzuser = true;
      boolean that_present_iskibitzuser = true;
      if (this_present_iskibitzuser || that_present_iskibitzuser) {
        if (!(this_present_iskibitzuser && that_present_iskibitzuser))
          return false;
        if (this.iskibitzuser != that.iskibitzuser)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkUsername_args other = (checkUsername_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIskibitzuser(), other.isSetIskibitzuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIskibitzuser()) {
        lastComparison = TBaseHelper.compareTo(this.iskibitzuser, other.iskibitzuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ISKIBITZUSER
            if (field.type == TType.BOOL) {
              this.iskibitzuser = iprot.readBool();
              setIskibitzuserIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISKIBITZUSER_FIELD_DESC);
      oprot.writeBool(this.iskibitzuser);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkUsername_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iskibitzuser:");
      sb.append(this.iskibitzuser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkUsername_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkUsername_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkUsername_result() {
    }

    public checkUsername_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsername_result(checkUsername_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public checkUsername_result deepCopy() {
      return new checkUsername_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsername_result)
        return this.equals((checkUsername_result)that);
      return false;
    }

    public boolean equals(checkUsername_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkUsername_result other = (checkUsername_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkUsername_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkLogin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkLogin_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)2);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)3);
    private static final TField ISKIBITZUSER_FIELD_DESC = new TField("iskibitzuser", TType.BOOL, (short)4);

    private String key;
    private String username;
    private String password;
    private boolean iskibitzuser;

    // isset id assignments
    private static final int __ISKIBITZUSER_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkLogin_args() {
    }

    public checkLogin_args(
      String key,
      String username,
      String password,
      boolean iskibitzuser)
    {
      this();
      this.key = key;
      this.username = username;
      this.password = password;
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLogin_args(checkLogin_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.iskibitzuser = other.iskibitzuser;
    }

    public checkLogin_args deepCopy() {
      return new checkLogin_args(this);
    }

    public void clear() {
      this.key = null;
      this.username = null;
      this.password = null;
      setIskibitzuserIsSet(false);
      this.iskibitzuser = false;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public boolean isIskibitzuser() {
      return this.iskibitzuser;
    }

    public void setIskibitzuser(boolean iskibitzuser) {
      this.iskibitzuser = iskibitzuser;
      setIskibitzuserIsSet(true);
    }

    public void unsetIskibitzuser() {
      __isset_vector[__ISKIBITZUSER_ISSET_ID] = false;
    }

    /** Returns true if field iskibitzuser is set (has been assigned a value) and false otherwise */
    public boolean isSetIskibitzuser() {
      return __isset_vector[__ISKIBITZUSER_ISSET_ID];
    }

    public void setIskibitzuserIsSet(boolean value) {
      __isset_vector[__ISKIBITZUSER_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLogin_args)
        return this.equals((checkLogin_args)that);
      return false;
    }

    public boolean equals(checkLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_iskibitzuser = true;
      boolean that_present_iskibitzuser = true;
      if (this_present_iskibitzuser || that_present_iskibitzuser) {
        if (!(this_present_iskibitzuser && that_present_iskibitzuser))
          return false;
        if (this.iskibitzuser != that.iskibitzuser)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkLogin_args other = (checkLogin_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIskibitzuser(), other.isSetIskibitzuser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIskibitzuser()) {
        lastComparison = TBaseHelper.compareTo(this.iskibitzuser, other.iskibitzuser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ISKIBITZUSER
            if (field.type == TType.BOOL) {
              this.iskibitzuser = iprot.readBool();
              setIskibitzuserIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISKIBITZUSER_FIELD_DESC);
      oprot.writeBool(this.iskibitzuser);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkLogin_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iskibitzuser:");
      sb.append(this.iskibitzuser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkLogin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkLogin_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkLogin_result() {
    }

    public checkLogin_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLogin_result(checkLogin_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public checkLogin_result deepCopy() {
      return new checkLogin_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLogin_result)
        return this.equals((checkLogin_result)that);
      return false;
    }

    public boolean equals(checkLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkLogin_result other = (checkLogin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkLogin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class retrieveUserId_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("retrieveUserId_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)2);

    private String key;
    private String username;

    // isset id assignments

    public retrieveUserId_args() {
    }

    public retrieveUserId_args(
      String key,
      String username)
    {
      this();
      this.key = key;
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveUserId_args(retrieveUserId_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public retrieveUserId_args deepCopy() {
      return new retrieveUserId_args(this);
    }

    public void clear() {
      this.key = null;
      this.username = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveUserId_args)
        return this.equals((retrieveUserId_args)that);
      return false;
    }

    public boolean equals(retrieveUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      retrieveUserId_args other = (retrieveUserId_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("retrieveUserId_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class retrieveUserId_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("retrieveUserId_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);

    private long success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public retrieveUserId_result() {
    }

    public retrieveUserId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveUserId_result(retrieveUserId_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public retrieveUserId_result deepCopy() {
      return new retrieveUserId_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveUserId_result)
        return this.equals((retrieveUserId_result)that);
      return false;
    }

    public boolean equals(retrieveUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      retrieveUserId_result other = (retrieveUserId_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("retrieveUserId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNewRecommender_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNewRecommender_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField PRIMARY_KEY_FIELD_DESC = new TField("primaryKey", TType.STRING, (short)2);
    private static final TField DATABASE_FIELD_DESC = new TField("database", TType.STRING, (short)3);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)5);
    private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)6);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)7);
    private static final TField IMAGE_FIELD_DESC = new TField("image", TType.STRING, (short)8);
    private static final TField RATINGS_COLUMN_FIELD_DESC = new TField("ratings_column", TType.STRING, (short)9);
    private static final TField CLIENT_KEY_FIELD_DESC = new TField("clientKey", TType.STRING, (short)10);

    private String username;
    private String primaryKey;
    private String database;
    private String table;
    private String title;
    private String description;
    private String image;
    private String ratings_column;
    private String clientKey;

    // isset id assignments

    public createNewRecommender_args() {
    }

    public createNewRecommender_args(
      String username,
      String primaryKey,
      String database,
      String table,
      String title,
      String description,
      String image,
      String ratings_column,
      String clientKey)
    {
      this();
      this.username = username;
      this.primaryKey = primaryKey;
      this.database = database;
      this.table = table;
      this.title = title;
      this.description = description;
      this.image = image;
      this.ratings_column = ratings_column;
      this.clientKey = clientKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewRecommender_args(createNewRecommender_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPrimaryKey()) {
        this.primaryKey = other.primaryKey;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetImage()) {
        this.image = other.image;
      }
      if (other.isSetRatings_column()) {
        this.ratings_column = other.ratings_column;
      }
      if (other.isSetClientKey()) {
        this.clientKey = other.clientKey;
      }
    }

    public createNewRecommender_args deepCopy() {
      return new createNewRecommender_args(this);
    }

    public void clear() {
      this.username = null;
      this.primaryKey = null;
      this.database = null;
      this.table = null;
      this.title = null;
      this.description = null;
      this.image = null;
      this.ratings_column = null;
      this.clientKey = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPrimaryKey() {
      return this.primaryKey;
    }

    public void setPrimaryKey(String primaryKey) {
      this.primaryKey = primaryKey;
    }

    public void unsetPrimaryKey() {
      this.primaryKey = null;
    }

    /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryKey() {
      return this.primaryKey != null;
    }

    public void setPrimaryKeyIsSet(boolean value) {
      if (!value) {
        this.primaryKey = null;
      }
    }

    public String getDatabase() {
      return this.database;
    }

    public void setDatabase(String database) {
      this.database = database;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public void setTitle(String title) {
      this.title = title;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public void setDescription(String description) {
      this.description = description;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public String getImage() {
      return this.image;
    }

    public void setImage(String image) {
      this.image = image;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public String getRatings_column() {
      return this.ratings_column;
    }

    public void setRatings_column(String ratings_column) {
      this.ratings_column = ratings_column;
    }

    public void unsetRatings_column() {
      this.ratings_column = null;
    }

    /** Returns true if field ratings_column is set (has been assigned a value) and false otherwise */
    public boolean isSetRatings_column() {
      return this.ratings_column != null;
    }

    public void setRatings_columnIsSet(boolean value) {
      if (!value) {
        this.ratings_column = null;
      }
    }

    public String getClientKey() {
      return this.clientKey;
    }

    public void setClientKey(String clientKey) {
      this.clientKey = clientKey;
    }

    public void unsetClientKey() {
      this.clientKey = null;
    }

    /** Returns true if field clientKey is set (has been assigned a value) and false otherwise */
    public boolean isSetClientKey() {
      return this.clientKey != null;
    }

    public void setClientKeyIsSet(boolean value) {
      if (!value) {
        this.clientKey = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewRecommender_args)
        return this.equals((createNewRecommender_args)that);
      return false;
    }

    public boolean equals(createNewRecommender_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_primaryKey = true && this.isSetPrimaryKey();
      boolean that_present_primaryKey = true && that.isSetPrimaryKey();
      if (this_present_primaryKey || that_present_primaryKey) {
        if (!(this_present_primaryKey && that_present_primaryKey))
          return false;
        if (!this.primaryKey.equals(that.primaryKey))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (!this.image.equals(that.image))
          return false;
      }

      boolean this_present_ratings_column = true && this.isSetRatings_column();
      boolean that_present_ratings_column = true && that.isSetRatings_column();
      if (this_present_ratings_column || that_present_ratings_column) {
        if (!(this_present_ratings_column && that_present_ratings_column))
          return false;
        if (!this.ratings_column.equals(that.ratings_column))
          return false;
      }

      boolean this_present_clientKey = true && this.isSetClientKey();
      boolean that_present_clientKey = true && that.isSetClientKey();
      if (this_present_clientKey || that_present_clientKey) {
        if (!(this_present_clientKey && that_present_clientKey))
          return false;
        if (!this.clientKey.equals(that.clientKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNewRecommender_args other = (createNewRecommender_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPrimaryKey(), other.isSetPrimaryKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryKey()) {
        lastComparison = TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDatabase(), other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTitle(), other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDescription(), other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetImage(), other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRatings_column(), other.isSetRatings_column());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatings_column()) {
        lastComparison = TBaseHelper.compareTo(this.ratings_column, other.ratings_column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetClientKey(), other.isSetClientKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientKey()) {
        lastComparison = TBaseHelper.compareTo(this.clientKey, other.clientKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PRIMARY_KEY
            if (field.type == TType.STRING) {
              this.primaryKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DATABASE
            if (field.type == TType.STRING) {
              this.database = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // TABLE
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // TITLE
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // DESCRIPTION
            if (field.type == TType.STRING) {
              this.description = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // IMAGE
            if (field.type == TType.STRING) {
              this.image = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // RATINGS_COLUMN
            if (field.type == TType.STRING) {
              this.ratings_column = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // CLIENT_KEY
            if (field.type == TType.STRING) {
              this.clientKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.primaryKey != null) {
        oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
        oprot.writeString(this.primaryKey);
        oprot.writeFieldEnd();
      }
      if (this.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(this.database);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.description);
        oprot.writeFieldEnd();
      }
      if (this.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeString(this.image);
        oprot.writeFieldEnd();
      }
      if (this.ratings_column != null) {
        oprot.writeFieldBegin(RATINGS_COLUMN_FIELD_DESC);
        oprot.writeString(this.ratings_column);
        oprot.writeFieldEnd();
      }
      if (this.clientKey != null) {
        oprot.writeFieldBegin(CLIENT_KEY_FIELD_DESC);
        oprot.writeString(this.clientKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNewRecommender_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryKey:");
      if (this.primaryKey == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        sb.append(this.image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratings_column:");
      if (this.ratings_column == null) {
        sb.append("null");
      } else {
        sb.append(this.ratings_column);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientKey:");
      if (this.clientKey == null) {
        sb.append("null");
      } else {
        sb.append(this.clientKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNewRecommender_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNewRecommender_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public createNewRecommender_result() {
    }

    public createNewRecommender_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewRecommender_result(createNewRecommender_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public createNewRecommender_result deepCopy() {
      return new createNewRecommender_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewRecommender_result)
        return this.equals((createNewRecommender_result)that);
      return false;
    }

    public boolean equals(createNewRecommender_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNewRecommender_result other = (createNewRecommender_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNewRecommender_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserRatedItems_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserRatedItems_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short)2);
    private static final TField DISPLAY_COLUMNS_FIELD_DESC = new TField("displayColumns", TType.LIST, (short)3);

    private String key;
    private long userId;
    private Vector displayColumns;

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getUserRatedItems_args() {
    }

    public getUserRatedItems_args(
      String key,
      long userId,
      Vector displayColumns)
    {
      this();
      this.key = key;
      this.userId = userId;
      setUserIdIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRatedItems_args(getUserRatedItems_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.userId = other.userId;
      if (other.isSetDisplayColumns()) {
        Vector __this__displayColumns = new Vector();
        for (Enumeration other_enum = other.displayColumns.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__displayColumns.addElement(other_element);
        }
        this.displayColumns = __this__displayColumns;
      }
    }

    public getUserRatedItems_args deepCopy() {
      return new getUserRatedItems_args(this);
    }

    public void clear() {
      this.key = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public void setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
    }

    public void unsetUserId() {
      __isset_vector[__USERID_ISSET_ID] = false;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_vector[__USERID_ISSET_ID];
    }

    public void setUserIdIsSet(boolean value) {
      __isset_vector[__USERID_ISSET_ID] = value;
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public Enumeration getDisplayColumnsEnumeration() {
      return (this.displayColumns == null) ? null : this.displayColumns.elements();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new Vector();
      }
      this.displayColumns.addElement(elem);
    }

    public Vector getDisplayColumns() {
      return this.displayColumns;
    }

    public void setDisplayColumns(Vector displayColumns) {
      this.displayColumns = displayColumns;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRatedItems_args)
        return this.equals((getUserRatedItems_args)that);
      return false;
    }

    public boolean equals(getUserRatedItems_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserRatedItems_args other = (getUserRatedItems_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserId(), other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayColumns(), other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_ID
            if (field.type == TType.I64) {
              this.userId = iprot.readI64();
              setUserIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DISPLAY_COLUMNS
            if (field.type == TType.LIST) {
              {
                TList _list38 = iprot.readListBegin();
                this.displayColumns = new Vector(_list38.size);
                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                {
                  String _elem40;
                  _elem40 = iprot.readString();
                  this.displayColumns.addElement(_elem40);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(this.userId);
      oprot.writeFieldEnd();
      if (this.displayColumns != null) {
        oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.displayColumns.size()));
          for (Enumeration _iter41_enum = this.displayColumns.elements(); _iter41_enum.hasMoreElements(); )           {
            String _iter41 = (String)_iter41_enum.nextElement();
            oprot.writeString(_iter41);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserRatedItems_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserRatedItems_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserRatedItems_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public getUserRatedItems_result() {
    }

    public getUserRatedItems_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRatedItems_result(getUserRatedItems_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Item other_element = (Item)other_enum.nextElement();
          __this__success.addElement(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public getUserRatedItems_result deepCopy() {
      return new getUserRatedItems_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRatedItems_result)
        return this.equals((getUserRatedItems_result)that);
      return false;
    }

    public boolean equals(getUserRatedItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserRatedItems_result other = (getUserRatedItems_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list42 = iprot.readListBegin();
                this.success = new Vector(_list42.size);
                for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                {
                  Item _elem44;
                  _elem44 = new Item();
                  _elem44.read(iprot);
                  this.success.addElement(_elem44);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter45_enum = this.success.elements(); _iter45_enum.hasMoreElements(); )           {
            Item _iter45 = (Item)_iter45_enum.nextElement();
            _iter45.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserRatedItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class initiateModel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("initiateModel_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)3);
    private static final TField DATABASE_FIELD_DESC = new TField("database", TType.STRING, (short)4);

    private String key;
    private String table;
    private String username;
    private String database;

    // isset id assignments

    public initiateModel_args() {
    }

    public initiateModel_args(
      String key,
      String table,
      String username,
      String database)
    {
      this();
      this.key = key;
      this.table = table;
      this.username = username;
      this.database = database;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiateModel_args(initiateModel_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
    }

    public initiateModel_args deepCopy() {
      return new initiateModel_args(this);
    }

    public void clear() {
      this.key = null;
      this.table = null;
      this.username = null;
      this.database = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getDatabase() {
      return this.database;
    }

    public void setDatabase(String database) {
      this.database = database;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initiateModel_args)
        return this.equals((initiateModel_args)that);
      return false;
    }

    public boolean equals(initiateModel_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      initiateModel_args other = (initiateModel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDatabase(), other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DATABASE
            if (field.type == TType.STRING) {
              this.database = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(this.database);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("initiateModel_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class initiateModel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("initiateModel_result");


    public initiateModel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initiateModel_result(initiateModel_result other) {
    }

    public initiateModel_result deepCopy() {
      return new initiateModel_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initiateModel_result)
        return this.equals((initiateModel_result)that);
      return false;
    }

    public boolean equals(initiateModel_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      initiateModel_result other = (initiateModel_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("initiateModel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSearchItems_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSearchItems_args");

    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)1);
    private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)2);
    private static final TField COLUMNS_TO_SEARCH_FIELD_DESC = new TField("columnsToSearch", TType.LIST, (short)3);
    private static final TField DISPLAY_COLUMNS_FIELD_DESC = new TField("displayColumns", TType.LIST, (short)4);

    private String table;
    private String query;
    private Vector columnsToSearch;
    private Vector displayColumns;

    // isset id assignments

    public getSearchItems_args() {
    }

    public getSearchItems_args(
      String table,
      String query,
      Vector columnsToSearch,
      Vector displayColumns)
    {
      this();
      this.table = table;
      this.query = query;
      this.columnsToSearch = columnsToSearch;
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchItems_args(getSearchItems_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      if (other.isSetColumnsToSearch()) {
        Vector __this__columnsToSearch = new Vector();
        for (Enumeration other_enum = other.columnsToSearch.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__columnsToSearch.addElement(other_element);
        }
        this.columnsToSearch = __this__columnsToSearch;
      }
      if (other.isSetDisplayColumns()) {
        Vector __this__displayColumns = new Vector();
        for (Enumeration other_enum = other.displayColumns.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__displayColumns.addElement(other_element);
        }
        this.displayColumns = __this__displayColumns;
      }
    }

    public getSearchItems_args deepCopy() {
      return new getSearchItems_args(this);
    }

    public void clear() {
      this.table = null;
      this.query = null;
      this.columnsToSearch = null;
      this.displayColumns = null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getQuery() {
      return this.query;
    }

    public void setQuery(String query) {
      this.query = query;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public int getColumnsToSearchSize() {
      return (this.columnsToSearch == null) ? 0 : this.columnsToSearch.size();
    }

    public Enumeration getColumnsToSearchEnumeration() {
      return (this.columnsToSearch == null) ? null : this.columnsToSearch.elements();
    }

    public void addToColumnsToSearch(String elem) {
      if (this.columnsToSearch == null) {
        this.columnsToSearch = new Vector();
      }
      this.columnsToSearch.addElement(elem);
    }

    public Vector getColumnsToSearch() {
      return this.columnsToSearch;
    }

    public void setColumnsToSearch(Vector columnsToSearch) {
      this.columnsToSearch = columnsToSearch;
    }

    public void unsetColumnsToSearch() {
      this.columnsToSearch = null;
    }

    /** Returns true if field columnsToSearch is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnsToSearch() {
      return this.columnsToSearch != null;
    }

    public void setColumnsToSearchIsSet(boolean value) {
      if (!value) {
        this.columnsToSearch = null;
      }
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public Enumeration getDisplayColumnsEnumeration() {
      return (this.displayColumns == null) ? null : this.displayColumns.elements();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new Vector();
      }
      this.displayColumns.addElement(elem);
    }

    public Vector getDisplayColumns() {
      return this.displayColumns;
    }

    public void setDisplayColumns(Vector displayColumns) {
      this.displayColumns = displayColumns;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchItems_args)
        return this.equals((getSearchItems_args)that);
      return false;
    }

    public boolean equals(getSearchItems_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_columnsToSearch = true && this.isSetColumnsToSearch();
      boolean that_present_columnsToSearch = true && that.isSetColumnsToSearch();
      if (this_present_columnsToSearch || that_present_columnsToSearch) {
        if (!(this_present_columnsToSearch && that_present_columnsToSearch))
          return false;
        if (!this.columnsToSearch.equals(that.columnsToSearch))
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSearchItems_args other = (getSearchItems_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetQuery(), other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetColumnsToSearch(), other.isSetColumnsToSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnsToSearch()) {
        lastComparison = TBaseHelper.compareTo(this.columnsToSearch, other.columnsToSearch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayColumns(), other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TABLE
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // QUERY
            if (field.type == TType.STRING) {
              this.query = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COLUMNS_TO_SEARCH
            if (field.type == TType.LIST) {
              {
                TList _list46 = iprot.readListBegin();
                this.columnsToSearch = new Vector(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  String _elem48;
                  _elem48 = iprot.readString();
                  this.columnsToSearch.addElement(_elem48);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DISPLAY_COLUMNS
            if (field.type == TType.LIST) {
              {
                TList _list49 = iprot.readListBegin();
                this.displayColumns = new Vector(_list49.size);
                for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                {
                  String _elem51;
                  _elem51 = iprot.readString();
                  this.displayColumns.addElement(_elem51);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(this.query);
        oprot.writeFieldEnd();
      }
      if (this.columnsToSearch != null) {
        oprot.writeFieldBegin(COLUMNS_TO_SEARCH_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.columnsToSearch.size()));
          for (Enumeration _iter52_enum = this.columnsToSearch.elements(); _iter52_enum.hasMoreElements(); )           {
            String _iter52 = (String)_iter52_enum.nextElement();
            oprot.writeString(_iter52);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.displayColumns != null) {
        oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.displayColumns.size()));
          for (Enumeration _iter53_enum = this.displayColumns.elements(); _iter53_enum.hasMoreElements(); )           {
            String _iter53 = (String)_iter53_enum.nextElement();
            oprot.writeString(_iter53);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSearchItems_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnsToSearch:");
      if (this.columnsToSearch == null) {
        sb.append("null");
      } else {
        sb.append(this.columnsToSearch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSearchItems_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSearchItems_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public getSearchItems_result() {
    }

    public getSearchItems_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchItems_result(getSearchItems_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Item other_element = (Item)other_enum.nextElement();
          __this__success.addElement(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSearchItems_result deepCopy() {
      return new getSearchItems_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchItems_result)
        return this.equals((getSearchItems_result)that);
      return false;
    }

    public boolean equals(getSearchItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSearchItems_result other = (getSearchItems_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list54 = iprot.readListBegin();
                this.success = new Vector(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                {
                  Item _elem56;
                  _elem56 = new Item();
                  _elem56.read(iprot);
                  this.success.addElement(_elem56);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter57_enum = this.success.elements(); _iter57_enum.hasMoreElements(); )           {
            Item _iter57 = (Item)_iter57_enum.nextElement();
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSearchItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeOverallRatingBasedOrRandomRecommendation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeOverallRatingBasedOrRandomRecommendation_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField RATING_COLUMN_NAME_FIELD_DESC = new TField("ratingColumnName", TType.STRING, (short)2);
    private static final TField NUM_RECS_FIELD_DESC = new TField("numRecs", TType.I64, (short)3);
    private static final TField DISPLAY_COLUMNS_FIELD_DESC = new TField("displayColumns", TType.LIST, (short)4);

    private String key;
    private String ratingColumnName;
    private long numRecs;
    private Vector displayColumns;

    // isset id assignments
    private static final int __NUMRECS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public makeOverallRatingBasedOrRandomRecommendation_args() {
    }

    public makeOverallRatingBasedOrRandomRecommendation_args(
      String key,
      String ratingColumnName,
      long numRecs,
      Vector displayColumns)
    {
      this();
      this.key = key;
      this.ratingColumnName = ratingColumnName;
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.displayColumns = displayColumns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeOverallRatingBasedOrRandomRecommendation_args(makeOverallRatingBasedOrRandomRecommendation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetRatingColumnName()) {
        this.ratingColumnName = other.ratingColumnName;
      }
      this.numRecs = other.numRecs;
      if (other.isSetDisplayColumns()) {
        Vector __this__displayColumns = new Vector();
        for (Enumeration other_enum = other.displayColumns.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__displayColumns.addElement(other_element);
        }
        this.displayColumns = __this__displayColumns;
      }
    }

    public makeOverallRatingBasedOrRandomRecommendation_args deepCopy() {
      return new makeOverallRatingBasedOrRandomRecommendation_args(this);
    }

    public void clear() {
      this.key = null;
      this.ratingColumnName = null;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      this.displayColumns = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getRatingColumnName() {
      return this.ratingColumnName;
    }

    public void setRatingColumnName(String ratingColumnName) {
      this.ratingColumnName = ratingColumnName;
    }

    public void unsetRatingColumnName() {
      this.ratingColumnName = null;
    }

    /** Returns true if field ratingColumnName is set (has been assigned a value) and false otherwise */
    public boolean isSetRatingColumnName() {
      return this.ratingColumnName != null;
    }

    public void setRatingColumnNameIsSet(boolean value) {
      if (!value) {
        this.ratingColumnName = null;
      }
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public void setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
    }

    public void unsetNumRecs() {
      __isset_vector[__NUMRECS_ISSET_ID] = false;
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return __isset_vector[__NUMRECS_ISSET_ID];
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_vector[__NUMRECS_ISSET_ID] = value;
    }

    public int getDisplayColumnsSize() {
      return (this.displayColumns == null) ? 0 : this.displayColumns.size();
    }

    public Enumeration getDisplayColumnsEnumeration() {
      return (this.displayColumns == null) ? null : this.displayColumns.elements();
    }

    public void addToDisplayColumns(String elem) {
      if (this.displayColumns == null) {
        this.displayColumns = new Vector();
      }
      this.displayColumns.addElement(elem);
    }

    public Vector getDisplayColumns() {
      return this.displayColumns;
    }

    public void setDisplayColumns(Vector displayColumns) {
      this.displayColumns = displayColumns;
    }

    public void unsetDisplayColumns() {
      this.displayColumns = null;
    }

    /** Returns true if field displayColumns is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColumns() {
      return this.displayColumns != null;
    }

    public void setDisplayColumnsIsSet(boolean value) {
      if (!value) {
        this.displayColumns = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeOverallRatingBasedOrRandomRecommendation_args)
        return this.equals((makeOverallRatingBasedOrRandomRecommendation_args)that);
      return false;
    }

    public boolean equals(makeOverallRatingBasedOrRandomRecommendation_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ratingColumnName = true && this.isSetRatingColumnName();
      boolean that_present_ratingColumnName = true && that.isSetRatingColumnName();
      if (this_present_ratingColumnName || that_present_ratingColumnName) {
        if (!(this_present_ratingColumnName && that_present_ratingColumnName))
          return false;
        if (!this.ratingColumnName.equals(that.ratingColumnName))
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_displayColumns = true && this.isSetDisplayColumns();
      boolean that_present_displayColumns = true && that.isSetDisplayColumns();
      if (this_present_displayColumns || that_present_displayColumns) {
        if (!(this_present_displayColumns && that_present_displayColumns))
          return false;
        if (!this.displayColumns.equals(that.displayColumns))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeOverallRatingBasedOrRandomRecommendation_args other = (makeOverallRatingBasedOrRandomRecommendation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRatingColumnName(), other.isSetRatingColumnName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatingColumnName()) {
        lastComparison = TBaseHelper.compareTo(this.ratingColumnName, other.ratingColumnName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNumRecs(), other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayColumns(), other.isSetDisplayColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColumns()) {
        lastComparison = TBaseHelper.compareTo(this.displayColumns, other.displayColumns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // RATING_COLUMN_NAME
            if (field.type == TType.STRING) {
              this.ratingColumnName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NUM_RECS
            if (field.type == TType.I64) {
              this.numRecs = iprot.readI64();
              setNumRecsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DISPLAY_COLUMNS
            if (field.type == TType.LIST) {
              {
                TList _list58 = iprot.readListBegin();
                this.displayColumns = new Vector(_list58.size);
                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                {
                  String _elem60;
                  _elem60 = iprot.readString();
                  this.displayColumns.addElement(_elem60);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.ratingColumnName != null) {
        oprot.writeFieldBegin(RATING_COLUMN_NAME_FIELD_DESC);
        oprot.writeString(this.ratingColumnName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
      oprot.writeI64(this.numRecs);
      oprot.writeFieldEnd();
      if (this.displayColumns != null) {
        oprot.writeFieldBegin(DISPLAY_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.displayColumns.size()));
          for (Enumeration _iter61_enum = this.displayColumns.elements(); _iter61_enum.hasMoreElements(); )           {
            String _iter61 = (String)_iter61_enum.nextElement();
            oprot.writeString(_iter61);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeOverallRatingBasedOrRandomRecommendation_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratingColumnName:");
      if (this.ratingColumnName == null) {
        sb.append("null");
      } else {
        sb.append(this.ratingColumnName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColumns:");
      if (this.displayColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColumns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeOverallRatingBasedOrRandomRecommendation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeOverallRatingBasedOrRandomRecommendation_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public makeOverallRatingBasedOrRandomRecommendation_result() {
    }

    public makeOverallRatingBasedOrRandomRecommendation_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeOverallRatingBasedOrRandomRecommendation_result(makeOverallRatingBasedOrRandomRecommendation_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Item other_element = (Item)other_enum.nextElement();
          __this__success.addElement(new Item(other_element));
        }
        this.success = __this__success;
      }
    }

    public makeOverallRatingBasedOrRandomRecommendation_result deepCopy() {
      return new makeOverallRatingBasedOrRandomRecommendation_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Item elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeOverallRatingBasedOrRandomRecommendation_result)
        return this.equals((makeOverallRatingBasedOrRandomRecommendation_result)that);
      return false;
    }

    public boolean equals(makeOverallRatingBasedOrRandomRecommendation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeOverallRatingBasedOrRandomRecommendation_result other = (makeOverallRatingBasedOrRandomRecommendation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list62 = iprot.readListBegin();
                this.success = new Vector(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  Item _elem64;
                  _elem64 = new Item();
                  _elem64.read(iprot);
                  this.success.addElement(_elem64);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter65_enum = this.success.elements(); _iter65_enum.hasMoreElements(); )           {
            Item _iter65 = (Item)_iter65_enum.nextElement();
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeOverallRatingBasedOrRandomRecommendation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addKibitzUser_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addKibitzUser_args");

    private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)1);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)2);

    private String email;
    private String password;

    // isset id assignments

    public addKibitzUser_args() {
    }

    public addKibitzUser_args(
      String email,
      String password)
    {
      this();
      this.email = email;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addKibitzUser_args(addKibitzUser_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public addKibitzUser_args deepCopy() {
      return new addKibitzUser_args(this);
    }

    public void clear() {
      this.email = null;
      this.password = null;
    }

    public String getEmail() {
      return this.email;
    }

    public void setEmail(String email) {
      this.email = email;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addKibitzUser_args)
        return this.equals((addKibitzUser_args)that);
      return false;
    }

    public boolean equals(addKibitzUser_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addKibitzUser_args other = (addKibitzUser_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetEmail(), other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EMAIL
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addKibitzUser_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addKibitzUser_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addKibitzUser_result");


    public addKibitzUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addKibitzUser_result(addKibitzUser_result other) {
    }

    public addKibitzUser_result deepCopy() {
      return new addKibitzUser_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addKibitzUser_result)
        return this.equals((addKibitzUser_result)that);
      return false;
    }

    public boolean equals(addKibitzUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addKibitzUser_result other = (addKibitzUser_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addKibitzUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkCorrectDatahubLogin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkCorrectDatahubLogin_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField REPOSITORY_FIELD_DESC = new TField("repository", TType.STRING, (short)2);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)3);
    private static final TField PRIMARY_KEY_FIELD_DESC = new TField("primary_key", TType.STRING, (short)4);
    private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)5);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)6);
    private static final TField IMAGE_FIELD_DESC = new TField("image", TType.STRING, (short)7);

    private String username;
    private String repository;
    private String table;
    private String primary_key;
    private String title;
    private String description;
    private String image;

    // isset id assignments

    public checkCorrectDatahubLogin_args() {
    }

    public checkCorrectDatahubLogin_args(
      String username,
      String repository,
      String table,
      String primary_key,
      String title,
      String description,
      String image)
    {
      this();
      this.username = username;
      this.repository = repository;
      this.table = table;
      this.primary_key = primary_key;
      this.title = title;
      this.description = description;
      this.image = image;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCorrectDatahubLogin_args(checkCorrectDatahubLogin_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepository()) {
        this.repository = other.repository;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetPrimary_key()) {
        this.primary_key = other.primary_key;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetImage()) {
        this.image = other.image;
      }
    }

    public checkCorrectDatahubLogin_args deepCopy() {
      return new checkCorrectDatahubLogin_args(this);
    }

    public void clear() {
      this.username = null;
      this.repository = null;
      this.table = null;
      this.primary_key = null;
      this.title = null;
      this.description = null;
      this.image = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepository() {
      return this.repository;
    }

    public void setRepository(String repository) {
      this.repository = repository;
    }

    public void unsetRepository() {
      this.repository = null;
    }

    /** Returns true if field repository is set (has been assigned a value) and false otherwise */
    public boolean isSetRepository() {
      return this.repository != null;
    }

    public void setRepositoryIsSet(boolean value) {
      if (!value) {
        this.repository = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getPrimary_key() {
      return this.primary_key;
    }

    public void setPrimary_key(String primary_key) {
      this.primary_key = primary_key;
    }

    public void unsetPrimary_key() {
      this.primary_key = null;
    }

    /** Returns true if field primary_key is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimary_key() {
      return this.primary_key != null;
    }

    public void setPrimary_keyIsSet(boolean value) {
      if (!value) {
        this.primary_key = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public void setTitle(String title) {
      this.title = title;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public void setDescription(String description) {
      this.description = description;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public String getImage() {
      return this.image;
    }

    public void setImage(String image) {
      this.image = image;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCorrectDatahubLogin_args)
        return this.equals((checkCorrectDatahubLogin_args)that);
      return false;
    }

    public boolean equals(checkCorrectDatahubLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repository = true && this.isSetRepository();
      boolean that_present_repository = true && that.isSetRepository();
      if (this_present_repository || that_present_repository) {
        if (!(this_present_repository && that_present_repository))
          return false;
        if (!this.repository.equals(that.repository))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_primary_key = true && this.isSetPrimary_key();
      boolean that_present_primary_key = true && that.isSetPrimary_key();
      if (this_present_primary_key || that_present_primary_key) {
        if (!(this_present_primary_key && that_present_primary_key))
          return false;
        if (!this.primary_key.equals(that.primary_key))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (!this.image.equals(that.image))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkCorrectDatahubLogin_args other = (checkCorrectDatahubLogin_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRepository(), other.isSetRepository());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepository()) {
        lastComparison = TBaseHelper.compareTo(this.repository, other.repository);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPrimary_key(), other.isSetPrimary_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimary_key()) {
        lastComparison = TBaseHelper.compareTo(this.primary_key, other.primary_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTitle(), other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDescription(), other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetImage(), other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REPOSITORY
            if (field.type == TType.STRING) {
              this.repository = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TABLE
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PRIMARY_KEY
            if (field.type == TType.STRING) {
              this.primary_key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // TITLE
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // DESCRIPTION
            if (field.type == TType.STRING) {
              this.description = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // IMAGE
            if (field.type == TType.STRING) {
              this.image = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.repository != null) {
        oprot.writeFieldBegin(REPOSITORY_FIELD_DESC);
        oprot.writeString(this.repository);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.primary_key != null) {
        oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
        oprot.writeString(this.primary_key);
        oprot.writeFieldEnd();
      }
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.description);
        oprot.writeFieldEnd();
      }
      if (this.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeString(this.image);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkCorrectDatahubLogin_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repository:");
      if (this.repository == null) {
        sb.append("null");
      } else {
        sb.append(this.repository);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primary_key:");
      if (this.primary_key == null) {
        sb.append("null");
      } else {
        sb.append(this.primary_key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        sb.append(this.image);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkCorrectDatahubLogin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkCorrectDatahubLogin_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkCorrectDatahubLogin_result() {
    }

    public checkCorrectDatahubLogin_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCorrectDatahubLogin_result(checkCorrectDatahubLogin_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public checkCorrectDatahubLogin_result deepCopy() {
      return new checkCorrectDatahubLogin_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCorrectDatahubLogin_result)
        return this.equals((checkCorrectDatahubLogin_result)that);
      return false;
    }

    public boolean equals(checkCorrectDatahubLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkCorrectDatahubLogin_result other = (checkCorrectDatahubLogin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkCorrectDatahubLogin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkRatingsColumn_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkRatingsColumn_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField REPOSITORY_FIELD_DESC = new TField("repository", TType.STRING, (short)3);
    private static final TField RATINGS_COLUMN_FIELD_DESC = new TField("ratings_column", TType.STRING, (short)4);

    private String username;
    private String table;
    private String repository;
    private String ratings_column;

    // isset id assignments

    public checkRatingsColumn_args() {
    }

    public checkRatingsColumn_args(
      String username,
      String table,
      String repository,
      String ratings_column)
    {
      this();
      this.username = username;
      this.table = table;
      this.repository = repository;
      this.ratings_column = ratings_column;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRatingsColumn_args(checkRatingsColumn_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetRepository()) {
        this.repository = other.repository;
      }
      if (other.isSetRatings_column()) {
        this.ratings_column = other.ratings_column;
      }
    }

    public checkRatingsColumn_args deepCopy() {
      return new checkRatingsColumn_args(this);
    }

    public void clear() {
      this.username = null;
      this.table = null;
      this.repository = null;
      this.ratings_column = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getRepository() {
      return this.repository;
    }

    public void setRepository(String repository) {
      this.repository = repository;
    }

    public void unsetRepository() {
      this.repository = null;
    }

    /** Returns true if field repository is set (has been assigned a value) and false otherwise */
    public boolean isSetRepository() {
      return this.repository != null;
    }

    public void setRepositoryIsSet(boolean value) {
      if (!value) {
        this.repository = null;
      }
    }

    public String getRatings_column() {
      return this.ratings_column;
    }

    public void setRatings_column(String ratings_column) {
      this.ratings_column = ratings_column;
    }

    public void unsetRatings_column() {
      this.ratings_column = null;
    }

    /** Returns true if field ratings_column is set (has been assigned a value) and false otherwise */
    public boolean isSetRatings_column() {
      return this.ratings_column != null;
    }

    public void setRatings_columnIsSet(boolean value) {
      if (!value) {
        this.ratings_column = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkRatingsColumn_args)
        return this.equals((checkRatingsColumn_args)that);
      return false;
    }

    public boolean equals(checkRatingsColumn_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_repository = true && this.isSetRepository();
      boolean that_present_repository = true && that.isSetRepository();
      if (this_present_repository || that_present_repository) {
        if (!(this_present_repository && that_present_repository))
          return false;
        if (!this.repository.equals(that.repository))
          return false;
      }

      boolean this_present_ratings_column = true && this.isSetRatings_column();
      boolean that_present_ratings_column = true && that.isSetRatings_column();
      if (this_present_ratings_column || that_present_ratings_column) {
        if (!(this_present_ratings_column && that_present_ratings_column))
          return false;
        if (!this.ratings_column.equals(that.ratings_column))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkRatingsColumn_args other = (checkRatingsColumn_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRepository(), other.isSetRepository());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepository()) {
        lastComparison = TBaseHelper.compareTo(this.repository, other.repository);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRatings_column(), other.isSetRatings_column());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatings_column()) {
        lastComparison = TBaseHelper.compareTo(this.ratings_column, other.ratings_column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REPOSITORY
            if (field.type == TType.STRING) {
              this.repository = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // RATINGS_COLUMN
            if (field.type == TType.STRING) {
              this.ratings_column = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.repository != null) {
        oprot.writeFieldBegin(REPOSITORY_FIELD_DESC);
        oprot.writeString(this.repository);
        oprot.writeFieldEnd();
      }
      if (this.ratings_column != null) {
        oprot.writeFieldBegin(RATINGS_COLUMN_FIELD_DESC);
        oprot.writeString(this.ratings_column);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkRatingsColumn_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repository:");
      if (this.repository == null) {
        sb.append("null");
      } else {
        sb.append(this.repository);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratings_column:");
      if (this.ratings_column == null) {
        sb.append("null");
      } else {
        sb.append(this.ratings_column);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkRatingsColumn_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkRatingsColumn_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkRatingsColumn_result() {
    }

    public checkRatingsColumn_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRatingsColumn_result(checkRatingsColumn_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public checkRatingsColumn_result deepCopy() {
      return new checkRatingsColumn_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkRatingsColumn_result)
        return this.equals((checkRatingsColumn_result)that);
      return false;
    }

    public boolean equals(checkRatingsColumn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkRatingsColumn_result other = (checkRatingsColumn_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkRatingsColumn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecommenders_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecommenders_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);

    private String username;

    // isset id assignments

    public getRecommenders_args() {
    }

    public getRecommenders_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommenders_args(getRecommenders_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getRecommenders_args deepCopy() {
      return new getRecommenders_args(this);
    }

    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommenders_args)
        return this.equals((getRecommenders_args)that);
      return false;
    }

    public boolean equals(getRecommenders_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecommenders_args other = (getRecommenders_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecommenders_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecommenders_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecommenders_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public getRecommenders_result() {
    }

    public getRecommenders_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommenders_result(getRecommenders_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Recommender other_element = (Recommender)other_enum.nextElement();
          __this__success.addElement(new Recommender(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRecommenders_result deepCopy() {
      return new getRecommenders_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Recommender elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommenders_result)
        return this.equals((getRecommenders_result)that);
      return false;
    }

    public boolean equals(getRecommenders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecommenders_result other = (getRecommenders_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list66 = iprot.readListBegin();
                this.success = new Vector(_list66.size);
                for (int _i67 = 0; _i67 < _list66.size; ++_i67)
                {
                  Recommender _elem68;
                  _elem68 = new Recommender();
                  _elem68.read(iprot);
                  this.success.addElement(_elem68);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter69_enum = this.success.elements(); _iter69_enum.hasMoreElements(); )           {
            Recommender _iter69 = (Recommender)_iter69_enum.nextElement();
            _iter69.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecommenders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfilePicture_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfilePicture_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);

    private String username;

    // isset id assignments

    public getProfilePicture_args() {
    }

    public getProfilePicture_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfilePicture_args(getProfilePicture_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getProfilePicture_args deepCopy() {
      return new getProfilePicture_args(this);
    }

    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfilePicture_args)
        return this.equals((getProfilePicture_args)that);
      return false;
    }

    public boolean equals(getProfilePicture_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfilePicture_args other = (getProfilePicture_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfilePicture_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfilePicture_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfilePicture_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    private String success;

    // isset id assignments

    public getProfilePicture_result() {
    }

    public getProfilePicture_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfilePicture_result(getProfilePicture_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProfilePicture_result deepCopy() {
      return new getProfilePicture_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfilePicture_result)
        return this.equals((getProfilePicture_result)that);
      return false;
    }

    public boolean equals(getProfilePicture_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfilePicture_result other = (getProfilePicture_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfilePicture_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class saveFBProfilePic_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("saveFBProfilePic_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField FB_USERNAME_FIELD_DESC = new TField("fbUsername", TType.STRING, (short)2);

    private String username;
    private String fbUsername;

    // isset id assignments

    public saveFBProfilePic_args() {
    }

    public saveFBProfilePic_args(
      String username,
      String fbUsername)
    {
      this();
      this.username = username;
      this.fbUsername = fbUsername;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFBProfilePic_args(saveFBProfilePic_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetFbUsername()) {
        this.fbUsername = other.fbUsername;
      }
    }

    public saveFBProfilePic_args deepCopy() {
      return new saveFBProfilePic_args(this);
    }

    public void clear() {
      this.username = null;
      this.fbUsername = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getFbUsername() {
      return this.fbUsername;
    }

    public void setFbUsername(String fbUsername) {
      this.fbUsername = fbUsername;
    }

    public void unsetFbUsername() {
      this.fbUsername = null;
    }

    /** Returns true if field fbUsername is set (has been assigned a value) and false otherwise */
    public boolean isSetFbUsername() {
      return this.fbUsername != null;
    }

    public void setFbUsernameIsSet(boolean value) {
      if (!value) {
        this.fbUsername = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFBProfilePic_args)
        return this.equals((saveFBProfilePic_args)that);
      return false;
    }

    public boolean equals(saveFBProfilePic_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_fbUsername = true && this.isSetFbUsername();
      boolean that_present_fbUsername = true && that.isSetFbUsername();
      if (this_present_fbUsername || that_present_fbUsername) {
        if (!(this_present_fbUsername && that_present_fbUsername))
          return false;
        if (!this.fbUsername.equals(that.fbUsername))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      saveFBProfilePic_args other = (saveFBProfilePic_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFbUsername(), other.isSetFbUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFbUsername()) {
        lastComparison = TBaseHelper.compareTo(this.fbUsername, other.fbUsername);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FB_USERNAME
            if (field.type == TType.STRING) {
              this.fbUsername = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.fbUsername != null) {
        oprot.writeFieldBegin(FB_USERNAME_FIELD_DESC);
        oprot.writeString(this.fbUsername);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("saveFBProfilePic_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fbUsername:");
      if (this.fbUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.fbUsername);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class saveFBProfilePic_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("saveFBProfilePic_result");


    public saveFBProfilePic_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFBProfilePic_result(saveFBProfilePic_result other) {
    }

    public saveFBProfilePic_result deepCopy() {
      return new saveFBProfilePic_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFBProfilePic_result)
        return this.equals((saveFBProfilePic_result)that);
      return false;
    }

    public boolean equals(saveFBProfilePic_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      saveFBProfilePic_result other = (saveFBProfilePic_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("saveFBProfilePic_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteRecommender_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteRecommender_args");

    private static final TField CLIENT_KEY_FIELD_DESC = new TField("clientKey", TType.STRING, (short)1);

    private String clientKey;

    // isset id assignments

    public deleteRecommender_args() {
    }

    public deleteRecommender_args(
      String clientKey)
    {
      this();
      this.clientKey = clientKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRecommender_args(deleteRecommender_args other) {
      if (other.isSetClientKey()) {
        this.clientKey = other.clientKey;
      }
    }

    public deleteRecommender_args deepCopy() {
      return new deleteRecommender_args(this);
    }

    public void clear() {
      this.clientKey = null;
    }

    public String getClientKey() {
      return this.clientKey;
    }

    public void setClientKey(String clientKey) {
      this.clientKey = clientKey;
    }

    public void unsetClientKey() {
      this.clientKey = null;
    }

    /** Returns true if field clientKey is set (has been assigned a value) and false otherwise */
    public boolean isSetClientKey() {
      return this.clientKey != null;
    }

    public void setClientKeyIsSet(boolean value) {
      if (!value) {
        this.clientKey = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRecommender_args)
        return this.equals((deleteRecommender_args)that);
      return false;
    }

    public boolean equals(deleteRecommender_args that) {
      if (that == null)
        return false;

      boolean this_present_clientKey = true && this.isSetClientKey();
      boolean that_present_clientKey = true && that.isSetClientKey();
      if (this_present_clientKey || that_present_clientKey) {
        if (!(this_present_clientKey && that_present_clientKey))
          return false;
        if (!this.clientKey.equals(that.clientKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      deleteRecommender_args other = (deleteRecommender_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetClientKey(), other.isSetClientKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientKey()) {
        lastComparison = TBaseHelper.compareTo(this.clientKey, other.clientKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CLIENT_KEY
            if (field.type == TType.STRING) {
              this.clientKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.clientKey != null) {
        oprot.writeFieldBegin(CLIENT_KEY_FIELD_DESC);
        oprot.writeString(this.clientKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("deleteRecommender_args(");
      boolean first = true;

      sb.append("clientKey:");
      if (this.clientKey == null) {
        sb.append("null");
      } else {
        sb.append(this.clientKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteRecommender_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteRecommender_result");


    public deleteRecommender_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRecommender_result(deleteRecommender_result other) {
    }

    public deleteRecommender_result deepCopy() {
      return new deleteRecommender_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRecommender_result)
        return this.equals((deleteRecommender_result)that);
      return false;
    }

    public boolean equals(deleteRecommender_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      deleteRecommender_result other = (deleteRecommender_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("deleteRecommender_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTemplate_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTemplate_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField PRIMARY_KEY_FIELD_DESC = new TField("primaryKey", TType.STRING, (short)2);
    private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)3);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)4);
    private static final TField IMAGE_FIELD_DESC = new TField("image", TType.STRING, (short)5);
    private static final TField VIDEO_FIELD_DESC = new TField("video", TType.STRING, (short)6);
    private static final TField ITEM_TYPES_FIELD_DESC = new TField("itemTypes", TType.MAP, (short)7);
    private static final TField DISPLAY_ITEMS_FIELD_DESC = new TField("displayItems", TType.LIST, (short)8);
    private static final TField MAX_RATING_VAL_FIELD_DESC = new TField("maxRatingVal", TType.I64, (short)9);
    private static final TField NUM_RECS_FIELD_DESC = new TField("numRecs", TType.I64, (short)10);
    private static final TField RECOMMENDER_NAME_FIELD_DESC = new TField("recommenderName", TType.STRING, (short)11);
    private static final TField CLIENT_KEY_FIELD_DESC = new TField("clientKey", TType.STRING, (short)12);
    private static final TField HOMEPAGE_FIELD_DESC = new TField("homepage", TType.STRING, (short)13);
    private static final TField CREATOR_NAME_FIELD_DESC = new TField("creatorName", TType.STRING, (short)14);
    private static final TField REPO_NAME_FIELD_DESC = new TField("repoName", TType.STRING, (short)15);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short)16);
    private static final TField RATINGS_COLUMN_FIELD_DESC = new TField("ratingsColumn", TType.STRING, (short)17);

    private String username;
    private String primaryKey;
    private String title;
    private String description;
    private String image;
    private String video;
    private Hashtable itemTypes;
    private Vector displayItems;
    private long maxRatingVal;
    private long numRecs;
    private String recommenderName;
    private String clientKey;
    private String homepage;
    private String creatorName;
    private String repoName;
    private String tableName;
    private String ratingsColumn;

    // isset id assignments
    private static final int __MAXRATINGVAL_ISSET_ID = 0;
    private static final int __NUMRECS_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public updateTemplate_args() {
    }

    public updateTemplate_args(
      String username,
      String primaryKey,
      String title,
      String description,
      String image,
      String video,
      Hashtable itemTypes,
      Vector displayItems,
      long maxRatingVal,
      long numRecs,
      String recommenderName,
      String clientKey,
      String homepage,
      String creatorName,
      String repoName,
      String tableName,
      String ratingsColumn)
    {
      this();
      this.username = username;
      this.primaryKey = primaryKey;
      this.title = title;
      this.description = description;
      this.image = image;
      this.video = video;
      this.itemTypes = itemTypes;
      this.displayItems = displayItems;
      this.maxRatingVal = maxRatingVal;
      setMaxRatingValIsSet(true);
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
      this.recommenderName = recommenderName;
      this.clientKey = clientKey;
      this.homepage = homepage;
      this.creatorName = creatorName;
      this.repoName = repoName;
      this.tableName = tableName;
      this.ratingsColumn = ratingsColumn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTemplate_args(updateTemplate_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPrimaryKey()) {
        this.primaryKey = other.primaryKey;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetImage()) {
        this.image = other.image;
      }
      if (other.isSetVideo()) {
        this.video = other.video;
      }
      if (other.isSetItemTypes()) {
        Hashtable __this__itemTypes = new Hashtable();
        for (Enumeration other_enum = other.itemTypes.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.itemTypes.get(other_element_key);

          String __this__itemTypes_copy_key = other_element_key;

          String __this__itemTypes_copy_value = other_element_value;

          __this__itemTypes.put(__this__itemTypes_copy_key, __this__itemTypes_copy_value);
        }
        this.itemTypes = __this__itemTypes;
      }
      if (other.isSetDisplayItems()) {
        Vector __this__displayItems = new Vector();
        for (Enumeration other_enum = other.displayItems.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__displayItems.addElement(other_element);
        }
        this.displayItems = __this__displayItems;
      }
      this.maxRatingVal = other.maxRatingVal;
      this.numRecs = other.numRecs;
      if (other.isSetRecommenderName()) {
        this.recommenderName = other.recommenderName;
      }
      if (other.isSetClientKey()) {
        this.clientKey = other.clientKey;
      }
      if (other.isSetHomepage()) {
        this.homepage = other.homepage;
      }
      if (other.isSetCreatorName()) {
        this.creatorName = other.creatorName;
      }
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetRatingsColumn()) {
        this.ratingsColumn = other.ratingsColumn;
      }
    }

    public updateTemplate_args deepCopy() {
      return new updateTemplate_args(this);
    }

    public void clear() {
      this.username = null;
      this.primaryKey = null;
      this.title = null;
      this.description = null;
      this.image = null;
      this.video = null;
      this.itemTypes = null;
      this.displayItems = null;
      setMaxRatingValIsSet(false);
      this.maxRatingVal = 0;
      setNumRecsIsSet(false);
      this.numRecs = 0;
      this.recommenderName = null;
      this.clientKey = null;
      this.homepage = null;
      this.creatorName = null;
      this.repoName = null;
      this.tableName = null;
      this.ratingsColumn = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPrimaryKey() {
      return this.primaryKey;
    }

    public void setPrimaryKey(String primaryKey) {
      this.primaryKey = primaryKey;
    }

    public void unsetPrimaryKey() {
      this.primaryKey = null;
    }

    /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryKey() {
      return this.primaryKey != null;
    }

    public void setPrimaryKeyIsSet(boolean value) {
      if (!value) {
        this.primaryKey = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public void setTitle(String title) {
      this.title = title;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public void setDescription(String description) {
      this.description = description;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public String getImage() {
      return this.image;
    }

    public void setImage(String image) {
      this.image = image;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public String getVideo() {
      return this.video;
    }

    public void setVideo(String video) {
      this.video = video;
    }

    public void unsetVideo() {
      this.video = null;
    }

    /** Returns true if field video is set (has been assigned a value) and false otherwise */
    public boolean isSetVideo() {
      return this.video != null;
    }

    public void setVideoIsSet(boolean value) {
      if (!value) {
        this.video = null;
      }
    }

    public int getItemTypesSize() {
      return (this.itemTypes == null) ? 0 : this.itemTypes.size();
    }

    public void putToItemTypes(String key, String val) {
      if (this.itemTypes == null) {
        this.itemTypes = new Hashtable();
      }
      this.itemTypes.put(key, val);
    }

    public Hashtable getItemTypes() {
      return this.itemTypes;
    }

    public void setItemTypes(Hashtable itemTypes) {
      this.itemTypes = itemTypes;
    }

    public void unsetItemTypes() {
      this.itemTypes = null;
    }

    /** Returns true if field itemTypes is set (has been assigned a value) and false otherwise */
    public boolean isSetItemTypes() {
      return this.itemTypes != null;
    }

    public void setItemTypesIsSet(boolean value) {
      if (!value) {
        this.itemTypes = null;
      }
    }

    public int getDisplayItemsSize() {
      return (this.displayItems == null) ? 0 : this.displayItems.size();
    }

    public Enumeration getDisplayItemsEnumeration() {
      return (this.displayItems == null) ? null : this.displayItems.elements();
    }

    public void addToDisplayItems(String elem) {
      if (this.displayItems == null) {
        this.displayItems = new Vector();
      }
      this.displayItems.addElement(elem);
    }

    public Vector getDisplayItems() {
      return this.displayItems;
    }

    public void setDisplayItems(Vector displayItems) {
      this.displayItems = displayItems;
    }

    public void unsetDisplayItems() {
      this.displayItems = null;
    }

    /** Returns true if field displayItems is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayItems() {
      return this.displayItems != null;
    }

    public void setDisplayItemsIsSet(boolean value) {
      if (!value) {
        this.displayItems = null;
      }
    }

    public long getMaxRatingVal() {
      return this.maxRatingVal;
    }

    public void setMaxRatingVal(long maxRatingVal) {
      this.maxRatingVal = maxRatingVal;
      setMaxRatingValIsSet(true);
    }

    public void unsetMaxRatingVal() {
      __isset_vector[__MAXRATINGVAL_ISSET_ID] = false;
    }

    /** Returns true if field maxRatingVal is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxRatingVal() {
      return __isset_vector[__MAXRATINGVAL_ISSET_ID];
    }

    public void setMaxRatingValIsSet(boolean value) {
      __isset_vector[__MAXRATINGVAL_ISSET_ID] = value;
    }

    public long getNumRecs() {
      return this.numRecs;
    }

    public void setNumRecs(long numRecs) {
      this.numRecs = numRecs;
      setNumRecsIsSet(true);
    }

    public void unsetNumRecs() {
      __isset_vector[__NUMRECS_ISSET_ID] = false;
    }

    /** Returns true if field numRecs is set (has been assigned a value) and false otherwise */
    public boolean isSetNumRecs() {
      return __isset_vector[__NUMRECS_ISSET_ID];
    }

    public void setNumRecsIsSet(boolean value) {
      __isset_vector[__NUMRECS_ISSET_ID] = value;
    }

    public String getRecommenderName() {
      return this.recommenderName;
    }

    public void setRecommenderName(String recommenderName) {
      this.recommenderName = recommenderName;
    }

    public void unsetRecommenderName() {
      this.recommenderName = null;
    }

    /** Returns true if field recommenderName is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommenderName() {
      return this.recommenderName != null;
    }

    public void setRecommenderNameIsSet(boolean value) {
      if (!value) {
        this.recommenderName = null;
      }
    }

    public String getClientKey() {
      return this.clientKey;
    }

    public void setClientKey(String clientKey) {
      this.clientKey = clientKey;
    }

    public void unsetClientKey() {
      this.clientKey = null;
    }

    /** Returns true if field clientKey is set (has been assigned a value) and false otherwise */
    public boolean isSetClientKey() {
      return this.clientKey != null;
    }

    public void setClientKeyIsSet(boolean value) {
      if (!value) {
        this.clientKey = null;
      }
    }

    public String getHomepage() {
      return this.homepage;
    }

    public void setHomepage(String homepage) {
      this.homepage = homepage;
    }

    public void unsetHomepage() {
      this.homepage = null;
    }

    /** Returns true if field homepage is set (has been assigned a value) and false otherwise */
    public boolean isSetHomepage() {
      return this.homepage != null;
    }

    public void setHomepageIsSet(boolean value) {
      if (!value) {
        this.homepage = null;
      }
    }

    public String getCreatorName() {
      return this.creatorName;
    }

    public void setCreatorName(String creatorName) {
      this.creatorName = creatorName;
    }

    public void unsetCreatorName() {
      this.creatorName = null;
    }

    /** Returns true if field creatorName is set (has been assigned a value) and false otherwise */
    public boolean isSetCreatorName() {
      return this.creatorName != null;
    }

    public void setCreatorNameIsSet(boolean value) {
      if (!value) {
        this.creatorName = null;
      }
    }

    public String getRepoName() {
      return this.repoName;
    }

    public void setRepoName(String repoName) {
      this.repoName = repoName;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public void setTableName(String tableName) {
      this.tableName = tableName;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getRatingsColumn() {
      return this.ratingsColumn;
    }

    public void setRatingsColumn(String ratingsColumn) {
      this.ratingsColumn = ratingsColumn;
    }

    public void unsetRatingsColumn() {
      this.ratingsColumn = null;
    }

    /** Returns true if field ratingsColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetRatingsColumn() {
      return this.ratingsColumn != null;
    }

    public void setRatingsColumnIsSet(boolean value) {
      if (!value) {
        this.ratingsColumn = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTemplate_args)
        return this.equals((updateTemplate_args)that);
      return false;
    }

    public boolean equals(updateTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_primaryKey = true && this.isSetPrimaryKey();
      boolean that_present_primaryKey = true && that.isSetPrimaryKey();
      if (this_present_primaryKey || that_present_primaryKey) {
        if (!(this_present_primaryKey && that_present_primaryKey))
          return false;
        if (!this.primaryKey.equals(that.primaryKey))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (!this.image.equals(that.image))
          return false;
      }

      boolean this_present_video = true && this.isSetVideo();
      boolean that_present_video = true && that.isSetVideo();
      if (this_present_video || that_present_video) {
        if (!(this_present_video && that_present_video))
          return false;
        if (!this.video.equals(that.video))
          return false;
      }

      boolean this_present_itemTypes = true && this.isSetItemTypes();
      boolean that_present_itemTypes = true && that.isSetItemTypes();
      if (this_present_itemTypes || that_present_itemTypes) {
        if (!(this_present_itemTypes && that_present_itemTypes))
          return false;
        if (!this.itemTypes.equals(that.itemTypes))
          return false;
      }

      boolean this_present_displayItems = true && this.isSetDisplayItems();
      boolean that_present_displayItems = true && that.isSetDisplayItems();
      if (this_present_displayItems || that_present_displayItems) {
        if (!(this_present_displayItems && that_present_displayItems))
          return false;
        if (!this.displayItems.equals(that.displayItems))
          return false;
      }

      boolean this_present_maxRatingVal = true;
      boolean that_present_maxRatingVal = true;
      if (this_present_maxRatingVal || that_present_maxRatingVal) {
        if (!(this_present_maxRatingVal && that_present_maxRatingVal))
          return false;
        if (this.maxRatingVal != that.maxRatingVal)
          return false;
      }

      boolean this_present_numRecs = true;
      boolean that_present_numRecs = true;
      if (this_present_numRecs || that_present_numRecs) {
        if (!(this_present_numRecs && that_present_numRecs))
          return false;
        if (this.numRecs != that.numRecs)
          return false;
      }

      boolean this_present_recommenderName = true && this.isSetRecommenderName();
      boolean that_present_recommenderName = true && that.isSetRecommenderName();
      if (this_present_recommenderName || that_present_recommenderName) {
        if (!(this_present_recommenderName && that_present_recommenderName))
          return false;
        if (!this.recommenderName.equals(that.recommenderName))
          return false;
      }

      boolean this_present_clientKey = true && this.isSetClientKey();
      boolean that_present_clientKey = true && that.isSetClientKey();
      if (this_present_clientKey || that_present_clientKey) {
        if (!(this_present_clientKey && that_present_clientKey))
          return false;
        if (!this.clientKey.equals(that.clientKey))
          return false;
      }

      boolean this_present_homepage = true && this.isSetHomepage();
      boolean that_present_homepage = true && that.isSetHomepage();
      if (this_present_homepage || that_present_homepage) {
        if (!(this_present_homepage && that_present_homepage))
          return false;
        if (!this.homepage.equals(that.homepage))
          return false;
      }

      boolean this_present_creatorName = true && this.isSetCreatorName();
      boolean that_present_creatorName = true && that.isSetCreatorName();
      if (this_present_creatorName || that_present_creatorName) {
        if (!(this_present_creatorName && that_present_creatorName))
          return false;
        if (!this.creatorName.equals(that.creatorName))
          return false;
      }

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_ratingsColumn = true && this.isSetRatingsColumn();
      boolean that_present_ratingsColumn = true && that.isSetRatingsColumn();
      if (this_present_ratingsColumn || that_present_ratingsColumn) {
        if (!(this_present_ratingsColumn && that_present_ratingsColumn))
          return false;
        if (!this.ratingsColumn.equals(that.ratingsColumn))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateTemplate_args other = (updateTemplate_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPrimaryKey(), other.isSetPrimaryKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryKey()) {
        lastComparison = TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTitle(), other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDescription(), other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetImage(), other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVideo(), other.isSetVideo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVideo()) {
        lastComparison = TBaseHelper.compareTo(this.video, other.video);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetItemTypes(), other.isSetItemTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemTypes()) {
        lastComparison = TBaseHelper.compareTo(this.itemTypes, other.itemTypes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayItems(), other.isSetDisplayItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayItems()) {
        lastComparison = TBaseHelper.compareTo(this.displayItems, other.displayItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxRatingVal(), other.isSetMaxRatingVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxRatingVal()) {
        lastComparison = TBaseHelper.compareTo(this.maxRatingVal, other.maxRatingVal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNumRecs(), other.isSetNumRecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRecs()) {
        lastComparison = TBaseHelper.compareTo(this.numRecs, other.numRecs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRecommenderName(), other.isSetRecommenderName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommenderName()) {
        lastComparison = TBaseHelper.compareTo(this.recommenderName, other.recommenderName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetClientKey(), other.isSetClientKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientKey()) {
        lastComparison = TBaseHelper.compareTo(this.clientKey, other.clientKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetHomepage(), other.isSetHomepage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHomepage()) {
        lastComparison = TBaseHelper.compareTo(this.homepage, other.homepage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCreatorName(), other.isSetCreatorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreatorName()) {
        lastComparison = TBaseHelper.compareTo(this.creatorName, other.creatorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRepoName(), other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTableName(), other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRatingsColumn(), other.isSetRatingsColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRatingsColumn()) {
        lastComparison = TBaseHelper.compareTo(this.ratingsColumn, other.ratingsColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PRIMARY_KEY
            if (field.type == TType.STRING) {
              this.primaryKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TITLE
            if (field.type == TType.STRING) {
              this.title = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DESCRIPTION
            if (field.type == TType.STRING) {
              this.description = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // IMAGE
            if (field.type == TType.STRING) {
              this.image = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // VIDEO
            if (field.type == TType.STRING) {
              this.video = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // ITEM_TYPES
            if (field.type == TType.MAP) {
              {
                TMap _map70 = iprot.readMapBegin();
                this.itemTypes = new Hashtable(2*_map70.size);
                for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                {
                  String _key72;
                  String _val73;
                  _key72 = iprot.readString();
                  _val73 = iprot.readString();
                  this.itemTypes.put(_key72, _val73);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // DISPLAY_ITEMS
            if (field.type == TType.LIST) {
              {
                TList _list74 = iprot.readListBegin();
                this.displayItems = new Vector(_list74.size);
                for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                {
                  String _elem76;
                  _elem76 = iprot.readString();
                  this.displayItems.addElement(_elem76);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // MAX_RATING_VAL
            if (field.type == TType.I64) {
              this.maxRatingVal = iprot.readI64();
              setMaxRatingValIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // NUM_RECS
            if (field.type == TType.I64) {
              this.numRecs = iprot.readI64();
              setNumRecsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 11: // RECOMMENDER_NAME
            if (field.type == TType.STRING) {
              this.recommenderName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 12: // CLIENT_KEY
            if (field.type == TType.STRING) {
              this.clientKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 13: // HOMEPAGE
            if (field.type == TType.STRING) {
              this.homepage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 14: // CREATOR_NAME
            if (field.type == TType.STRING) {
              this.creatorName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 15: // REPO_NAME
            if (field.type == TType.STRING) {
              this.repoName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 16: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 17: // RATINGS_COLUMN
            if (field.type == TType.STRING) {
              this.ratingsColumn = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.primaryKey != null) {
        oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
        oprot.writeString(this.primaryKey);
        oprot.writeFieldEnd();
      }
      if (this.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
      if (this.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.description);
        oprot.writeFieldEnd();
      }
      if (this.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeString(this.image);
        oprot.writeFieldEnd();
      }
      if (this.video != null) {
        oprot.writeFieldBegin(VIDEO_FIELD_DESC);
        oprot.writeString(this.video);
        oprot.writeFieldEnd();
      }
      if (this.itemTypes != null) {
        oprot.writeFieldBegin(ITEM_TYPES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.itemTypes.size()));
          for (Enumeration _iter77_enum = this.itemTypes.keys(); _iter77_enum.hasMoreElements(); )           {
            String _iter77 = (String)_iter77_enum.nextElement();
            oprot.writeString(_iter77);
            oprot.writeString(((String)this.itemTypes.get(_iter77)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.displayItems != null) {
        oprot.writeFieldBegin(DISPLAY_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.displayItems.size()));
          for (Enumeration _iter78_enum = this.displayItems.elements(); _iter78_enum.hasMoreElements(); )           {
            String _iter78 = (String)_iter78_enum.nextElement();
            oprot.writeString(_iter78);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_RATING_VAL_FIELD_DESC);
      oprot.writeI64(this.maxRatingVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_RECS_FIELD_DESC);
      oprot.writeI64(this.numRecs);
      oprot.writeFieldEnd();
      if (this.recommenderName != null) {
        oprot.writeFieldBegin(RECOMMENDER_NAME_FIELD_DESC);
        oprot.writeString(this.recommenderName);
        oprot.writeFieldEnd();
      }
      if (this.clientKey != null) {
        oprot.writeFieldBegin(CLIENT_KEY_FIELD_DESC);
        oprot.writeString(this.clientKey);
        oprot.writeFieldEnd();
      }
      if (this.homepage != null) {
        oprot.writeFieldBegin(HOMEPAGE_FIELD_DESC);
        oprot.writeString(this.homepage);
        oprot.writeFieldEnd();
      }
      if (this.creatorName != null) {
        oprot.writeFieldBegin(CREATOR_NAME_FIELD_DESC);
        oprot.writeString(this.creatorName);
        oprot.writeFieldEnd();
      }
      if (this.repoName != null) {
        oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
        oprot.writeString(this.repoName);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.ratingsColumn != null) {
        oprot.writeFieldBegin(RATINGS_COLUMN_FIELD_DESC);
        oprot.writeString(this.ratingsColumn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateTemplate_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryKey:");
      if (this.primaryKey == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        sb.append(this.image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("video:");
      if (this.video == null) {
        sb.append("null");
      } else {
        sb.append(this.video);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemTypes:");
      if (this.itemTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.itemTypes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayItems:");
      if (this.displayItems == null) {
        sb.append("null");
      } else {
        sb.append(this.displayItems);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxRatingVal:");
      sb.append(this.maxRatingVal);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numRecs:");
      sb.append(this.numRecs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recommenderName:");
      if (this.recommenderName == null) {
        sb.append("null");
      } else {
        sb.append(this.recommenderName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientKey:");
      if (this.clientKey == null) {
        sb.append("null");
      } else {
        sb.append(this.clientKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("homepage:");
      if (this.homepage == null) {
        sb.append("null");
      } else {
        sb.append(this.homepage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("creatorName:");
      if (this.creatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.creatorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ratingsColumn:");
      if (this.ratingsColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.ratingsColumn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTemplate_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTemplate_result");


    public updateTemplate_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTemplate_result(updateTemplate_result other) {
    }

    public updateTemplate_result deepCopy() {
      return new updateTemplate_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTemplate_result)
        return this.equals((updateTemplate_result)that);
      return false;
    }

    public boolean equals(updateTemplate_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateTemplate_result other = (updateTemplate_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateTemplate_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class configurePrefilledUserRatings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("configurePrefilledUserRatings_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField REPO_NAME_FIELD_DESC = new TField("repoName", TType.STRING, (short)2);
    private static final TField PRIMARY_KEY_FIELD_DESC = new TField("primaryKey", TType.STRING, (short)3);
    private static final TField ITEM_TABLE_FIELD_DESC = new TField("itemTable", TType.STRING, (short)4);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short)5);
    private static final TField USER_ID_COL_FIELD_DESC = new TField("userIdCol", TType.STRING, (short)6);
    private static final TField ITEM_ID_COL_FIELD_DESC = new TField("itemIdCol", TType.STRING, (short)7);
    private static final TField USER_RATING_COL_FIELD_DESC = new TField("userRatingCol", TType.STRING, (short)8);

    private String username;
    private String repoName;
    private String primaryKey;
    private String itemTable;
    private String tableName;
    private String userIdCol;
    private String itemIdCol;
    private String userRatingCol;

    // isset id assignments

    public configurePrefilledUserRatings_args() {
    }

    public configurePrefilledUserRatings_args(
      String username,
      String repoName,
      String primaryKey,
      String itemTable,
      String tableName,
      String userIdCol,
      String itemIdCol,
      String userRatingCol)
    {
      this();
      this.username = username;
      this.repoName = repoName;
      this.primaryKey = primaryKey;
      this.itemTable = itemTable;
      this.tableName = tableName;
      this.userIdCol = userIdCol;
      this.itemIdCol = itemIdCol;
      this.userRatingCol = userRatingCol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configurePrefilledUserRatings_args(configurePrefilledUserRatings_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepoName()) {
        this.repoName = other.repoName;
      }
      if (other.isSetPrimaryKey()) {
        this.primaryKey = other.primaryKey;
      }
      if (other.isSetItemTable()) {
        this.itemTable = other.itemTable;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetUserIdCol()) {
        this.userIdCol = other.userIdCol;
      }
      if (other.isSetItemIdCol()) {
        this.itemIdCol = other.itemIdCol;
      }
      if (other.isSetUserRatingCol()) {
        this.userRatingCol = other.userRatingCol;
      }
    }

    public configurePrefilledUserRatings_args deepCopy() {
      return new configurePrefilledUserRatings_args(this);
    }

    public void clear() {
      this.username = null;
      this.repoName = null;
      this.primaryKey = null;
      this.itemTable = null;
      this.tableName = null;
      this.userIdCol = null;
      this.itemIdCol = null;
      this.userRatingCol = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepoName() {
      return this.repoName;
    }

    public void setRepoName(String repoName) {
      this.repoName = repoName;
    }

    public void unsetRepoName() {
      this.repoName = null;
    }

    /** Returns true if field repoName is set (has been assigned a value) and false otherwise */
    public boolean isSetRepoName() {
      return this.repoName != null;
    }

    public void setRepoNameIsSet(boolean value) {
      if (!value) {
        this.repoName = null;
      }
    }

    public String getPrimaryKey() {
      return this.primaryKey;
    }

    public void setPrimaryKey(String primaryKey) {
      this.primaryKey = primaryKey;
    }

    public void unsetPrimaryKey() {
      this.primaryKey = null;
    }

    /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimaryKey() {
      return this.primaryKey != null;
    }

    public void setPrimaryKeyIsSet(boolean value) {
      if (!value) {
        this.primaryKey = null;
      }
    }

    public String getItemTable() {
      return this.itemTable;
    }

    public void setItemTable(String itemTable) {
      this.itemTable = itemTable;
    }

    public void unsetItemTable() {
      this.itemTable = null;
    }

    /** Returns true if field itemTable is set (has been assigned a value) and false otherwise */
    public boolean isSetItemTable() {
      return this.itemTable != null;
    }

    public void setItemTableIsSet(boolean value) {
      if (!value) {
        this.itemTable = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public void setTableName(String tableName) {
      this.tableName = tableName;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getUserIdCol() {
      return this.userIdCol;
    }

    public void setUserIdCol(String userIdCol) {
      this.userIdCol = userIdCol;
    }

    public void unsetUserIdCol() {
      this.userIdCol = null;
    }

    /** Returns true if field userIdCol is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdCol() {
      return this.userIdCol != null;
    }

    public void setUserIdColIsSet(boolean value) {
      if (!value) {
        this.userIdCol = null;
      }
    }

    public String getItemIdCol() {
      return this.itemIdCol;
    }

    public void setItemIdCol(String itemIdCol) {
      this.itemIdCol = itemIdCol;
    }

    public void unsetItemIdCol() {
      this.itemIdCol = null;
    }

    /** Returns true if field itemIdCol is set (has been assigned a value) and false otherwise */
    public boolean isSetItemIdCol() {
      return this.itemIdCol != null;
    }

    public void setItemIdColIsSet(boolean value) {
      if (!value) {
        this.itemIdCol = null;
      }
    }

    public String getUserRatingCol() {
      return this.userRatingCol;
    }

    public void setUserRatingCol(String userRatingCol) {
      this.userRatingCol = userRatingCol;
    }

    public void unsetUserRatingCol() {
      this.userRatingCol = null;
    }

    /** Returns true if field userRatingCol is set (has been assigned a value) and false otherwise */
    public boolean isSetUserRatingCol() {
      return this.userRatingCol != null;
    }

    public void setUserRatingColIsSet(boolean value) {
      if (!value) {
        this.userRatingCol = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configurePrefilledUserRatings_args)
        return this.equals((configurePrefilledUserRatings_args)that);
      return false;
    }

    public boolean equals(configurePrefilledUserRatings_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repoName = true && this.isSetRepoName();
      boolean that_present_repoName = true && that.isSetRepoName();
      if (this_present_repoName || that_present_repoName) {
        if (!(this_present_repoName && that_present_repoName))
          return false;
        if (!this.repoName.equals(that.repoName))
          return false;
      }

      boolean this_present_primaryKey = true && this.isSetPrimaryKey();
      boolean that_present_primaryKey = true && that.isSetPrimaryKey();
      if (this_present_primaryKey || that_present_primaryKey) {
        if (!(this_present_primaryKey && that_present_primaryKey))
          return false;
        if (!this.primaryKey.equals(that.primaryKey))
          return false;
      }

      boolean this_present_itemTable = true && this.isSetItemTable();
      boolean that_present_itemTable = true && that.isSetItemTable();
      if (this_present_itemTable || that_present_itemTable) {
        if (!(this_present_itemTable && that_present_itemTable))
          return false;
        if (!this.itemTable.equals(that.itemTable))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_userIdCol = true && this.isSetUserIdCol();
      boolean that_present_userIdCol = true && that.isSetUserIdCol();
      if (this_present_userIdCol || that_present_userIdCol) {
        if (!(this_present_userIdCol && that_present_userIdCol))
          return false;
        if (!this.userIdCol.equals(that.userIdCol))
          return false;
      }

      boolean this_present_itemIdCol = true && this.isSetItemIdCol();
      boolean that_present_itemIdCol = true && that.isSetItemIdCol();
      if (this_present_itemIdCol || that_present_itemIdCol) {
        if (!(this_present_itemIdCol && that_present_itemIdCol))
          return false;
        if (!this.itemIdCol.equals(that.itemIdCol))
          return false;
      }

      boolean this_present_userRatingCol = true && this.isSetUserRatingCol();
      boolean that_present_userRatingCol = true && that.isSetUserRatingCol();
      if (this_present_userRatingCol || that_present_userRatingCol) {
        if (!(this_present_userRatingCol && that_present_userRatingCol))
          return false;
        if (!this.userRatingCol.equals(that.userRatingCol))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      configurePrefilledUserRatings_args other = (configurePrefilledUserRatings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRepoName(), other.isSetRepoName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepoName()) {
        lastComparison = TBaseHelper.compareTo(this.repoName, other.repoName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPrimaryKey(), other.isSetPrimaryKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrimaryKey()) {
        lastComparison = TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetItemTable(), other.isSetItemTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemTable()) {
        lastComparison = TBaseHelper.compareTo(this.itemTable, other.itemTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTableName(), other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserIdCol(), other.isSetUserIdCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdCol()) {
        lastComparison = TBaseHelper.compareTo(this.userIdCol, other.userIdCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetItemIdCol(), other.isSetItemIdCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemIdCol()) {
        lastComparison = TBaseHelper.compareTo(this.itemIdCol, other.itemIdCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserRatingCol(), other.isSetUserRatingCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserRatingCol()) {
        lastComparison = TBaseHelper.compareTo(this.userRatingCol, other.userRatingCol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REPO_NAME
            if (field.type == TType.STRING) {
              this.repoName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PRIMARY_KEY
            if (field.type == TType.STRING) {
              this.primaryKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ITEM_TABLE
            if (field.type == TType.STRING) {
              this.itemTable = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // USER_ID_COL
            if (field.type == TType.STRING) {
              this.userIdCol = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // ITEM_ID_COL
            if (field.type == TType.STRING) {
              this.itemIdCol = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // USER_RATING_COL
            if (field.type == TType.STRING) {
              this.userRatingCol = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.repoName != null) {
        oprot.writeFieldBegin(REPO_NAME_FIELD_DESC);
        oprot.writeString(this.repoName);
        oprot.writeFieldEnd();
      }
      if (this.primaryKey != null) {
        oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
        oprot.writeString(this.primaryKey);
        oprot.writeFieldEnd();
      }
      if (this.itemTable != null) {
        oprot.writeFieldBegin(ITEM_TABLE_FIELD_DESC);
        oprot.writeString(this.itemTable);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.userIdCol != null) {
        oprot.writeFieldBegin(USER_ID_COL_FIELD_DESC);
        oprot.writeString(this.userIdCol);
        oprot.writeFieldEnd();
      }
      if (this.itemIdCol != null) {
        oprot.writeFieldBegin(ITEM_ID_COL_FIELD_DESC);
        oprot.writeString(this.itemIdCol);
        oprot.writeFieldEnd();
      }
      if (this.userRatingCol != null) {
        oprot.writeFieldBegin(USER_RATING_COL_FIELD_DESC);
        oprot.writeString(this.userRatingCol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("configurePrefilledUserRatings_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repoName:");
      if (this.repoName == null) {
        sb.append("null");
      } else {
        sb.append(this.repoName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("primaryKey:");
      if (this.primaryKey == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemTable:");
      if (this.itemTable == null) {
        sb.append("null");
      } else {
        sb.append(this.itemTable);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIdCol:");
      if (this.userIdCol == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdCol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemIdCol:");
      if (this.itemIdCol == null) {
        sb.append("null");
      } else {
        sb.append(this.itemIdCol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userRatingCol:");
      if (this.userRatingCol == null) {
        sb.append("null");
      } else {
        sb.append(this.userRatingCol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class configurePrefilledUserRatings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("configurePrefilledUserRatings_result");


    public configurePrefilledUserRatings_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configurePrefilledUserRatings_result(configurePrefilledUserRatings_result other) {
    }

    public configurePrefilledUserRatings_result deepCopy() {
      return new configurePrefilledUserRatings_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configurePrefilledUserRatings_result)
        return this.equals((configurePrefilledUserRatings_result)that);
      return false;
    }

    public boolean equals(configurePrefilledUserRatings_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      configurePrefilledUserRatings_result other = (configurePrefilledUserRatings_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("configurePrefilledUserRatings_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTables_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getTables_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField REPO_FIELD_DESC = new TField("repo", TType.STRING, (short)2);

    private String username;
    private String repo;

    // isset id assignments

    public getTables_args() {
    }

    public getTables_args(
      String username,
      String repo)
    {
      this();
      this.username = username;
      this.repo = repo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTables_args(getTables_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepo()) {
        this.repo = other.repo;
      }
    }

    public getTables_args deepCopy() {
      return new getTables_args(this);
    }

    public void clear() {
      this.username = null;
      this.repo = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepo() {
      return this.repo;
    }

    public void setRepo(String repo) {
      this.repo = repo;
    }

    public void unsetRepo() {
      this.repo = null;
    }

    /** Returns true if field repo is set (has been assigned a value) and false otherwise */
    public boolean isSetRepo() {
      return this.repo != null;
    }

    public void setRepoIsSet(boolean value) {
      if (!value) {
        this.repo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTables_args)
        return this.equals((getTables_args)that);
      return false;
    }

    public boolean equals(getTables_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repo = true && this.isSetRepo();
      boolean that_present_repo = true && that.isSetRepo();
      if (this_present_repo || that_present_repo) {
        if (!(this_present_repo && that_present_repo))
          return false;
        if (!this.repo.equals(that.repo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getTables_args other = (getTables_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRepo(), other.isSetRepo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepo()) {
        lastComparison = TBaseHelper.compareTo(this.repo, other.repo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REPO
            if (field.type == TType.STRING) {
              this.repo = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.repo != null) {
        oprot.writeFieldBegin(REPO_FIELD_DESC);
        oprot.writeString(this.repo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getTables_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repo:");
      if (this.repo == null) {
        sb.append("null");
      } else {
        sb.append(this.repo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTables_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getTables_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public getTables_result() {
    }

    public getTables_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTables_result(getTables_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
    }

    public getTables_result deepCopy() {
      return new getTables_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTables_result)
        return this.equals((getTables_result)that);
      return false;
    }

    public boolean equals(getTables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getTables_result other = (getTables_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list79 = iprot.readListBegin();
                this.success = new Vector(_list79.size);
                for (int _i80 = 0; _i80 < _list79.size; ++_i80)
                {
                  String _elem81;
                  _elem81 = iprot.readString();
                  this.success.addElement(_elem81);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter82_enum = this.success.elements(); _iter82_enum.hasMoreElements(); )           {
            String _iter82 = (String)_iter82_enum.nextElement();
            oprot.writeString(_iter82);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getTables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getColumns_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getColumns_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField REPO_FIELD_DESC = new TField("repo", TType.STRING, (short)2);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)3);

    private String username;
    private String repo;
    private String table;

    // isset id assignments

    public getColumns_args() {
    }

    public getColumns_args(
      String username,
      String repo,
      String table)
    {
      this();
      this.username = username;
      this.repo = repo;
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getColumns_args(getColumns_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetRepo()) {
        this.repo = other.repo;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public getColumns_args deepCopy() {
      return new getColumns_args(this);
    }

    public void clear() {
      this.username = null;
      this.repo = null;
      this.table = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getRepo() {
      return this.repo;
    }

    public void setRepo(String repo) {
      this.repo = repo;
    }

    public void unsetRepo() {
      this.repo = null;
    }

    /** Returns true if field repo is set (has been assigned a value) and false otherwise */
    public boolean isSetRepo() {
      return this.repo != null;
    }

    public void setRepoIsSet(boolean value) {
      if (!value) {
        this.repo = null;
      }
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getColumns_args)
        return this.equals((getColumns_args)that);
      return false;
    }

    public boolean equals(getColumns_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_repo = true && this.isSetRepo();
      boolean that_present_repo = true && that.isSetRepo();
      if (this_present_repo || that_present_repo) {
        if (!(this_present_repo && that_present_repo))
          return false;
        if (!this.repo.equals(that.repo))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getColumns_args other = (getColumns_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRepo(), other.isSetRepo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepo()) {
        lastComparison = TBaseHelper.compareTo(this.repo, other.repo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REPO
            if (field.type == TType.STRING) {
              this.repo = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TABLE
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.repo != null) {
        oprot.writeFieldBegin(REPO_FIELD_DESC);
        oprot.writeString(this.repo);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getColumns_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repo:");
      if (this.repo == null) {
        sb.append("null");
      } else {
        sb.append(this.repo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getColumns_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getColumns_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    private Vector success;

    // isset id assignments

    public getColumns_result() {
    }

    public getColumns_result(
      Vector success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getColumns_result(getColumns_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
    }

    public getColumns_result deepCopy() {
      return new getColumns_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getColumns_result)
        return this.equals((getColumns_result)that);
      return false;
    }

    public boolean equals(getColumns_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getColumns_result other = (getColumns_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list83 = iprot.readListBegin();
                this.success = new Vector(_list83.size);
                for (int _i84 = 0; _i84 < _list83.size; ++_i84)
                {
                  String _elem85;
                  _elem85 = iprot.readString();
                  this.success.addElement(_elem85);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter86_enum = this.success.elements(); _iter86_enum.hasMoreElements(); )           {
            String _iter86 = (String)_iter86_enum.nextElement();
            oprot.writeString(_iter86);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getColumns_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
