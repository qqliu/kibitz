// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package kibitz

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type RecommenderService interface {
	// Parameters:
	//  - Key
	CreateNewIndividualServer(key string) (err error)
	// Parameters:
	//  - Key
	TerminateSession(key string) (err error)
	// Parameters:
	//  - Key
	//  - UserId
	//  - NumRecs
	//  - IsBoolean
	//  - DisplayColumns
	MakeRecommendation(key string, userId int64, numRecs int64, isBoolean bool, displayColumns []string) (r []*Item, err error)
	// Parameters:
	//  - Key
	//  - UserId
	//  - NumRecs
	//  - DisplayColumns
	MakeItemBasedRecommendations(key string, userId int64, numRecs int64, displayColumns []string) (r []*Item, err error)
	// Parameters:
	//  - Key
	//  - Page
	//  - NumPerPage
	//  - DisplayColumns
	GetPageItems(key string, page int64, numPerPage int64, displayColumns []string) (r []*Item, err error)
	// Parameters:
	//  - Key
	GetItemCount(key string) (r int64, err error)
	// Parameters:
	//  - Key
	//  - UserId
	//  - ItemId
	//  - Rating
	RecordRatings(key string, userId int64, itemId int64, rating int64) (err error)
	// Parameters:
	//  - Key
	//  - UserId
	//  - ItemId
	DeleteRatings(key string, userId int64, itemId int64) (err error)
	// Parameters:
	//  - Key
	//  - Username
	//  - Iskibitzuser
	CreateNewUser(key string, username string, iskibitzuser bool) (r string, err error)
	// Parameters:
	//  - Key
	//  - Username
	//  - Iskibitzuser
	CheckUsername(key string, username string, iskibitzuser bool) (r bool, err error)
	// Parameters:
	//  - Key
	//  - Username
	//  - Password
	//  - Iskibitzuser
	CheckLogin(key string, username string, password string, iskibitzuser bool) (r bool, err error)
	// Parameters:
	//  - Key
	//  - Username
	RetrieveUserId(key string, username string) (r int64, err error)
	// Parameters:
	//  - Username
	//  - PrimaryKey
	//  - Database
	//  - Table
	//  - Title
	//  - Description
	//  - Image
	//  - RatingsColumn
	//  - ClientKey
	CreateNewRecommender(username string, primaryKey string, database string, table string, title string, description string, image string, ratings_column string, clientKey string) (r bool, err error)
	// Parameters:
	//  - Key
	//  - UserId
	//  - DisplayColumns
	GetUserRatedItems(key string, userId int64, displayColumns []string) (r []*Item, err error)
	// Parameters:
	//  - Key
	//  - Table
	//  - Username
	//  - Database
	InitiateModel(key string, table string, username string, database string) (err error)
	// Parameters:
	//  - Table
	//  - Query
	//  - ColumnsToSearch
	//  - DisplayColumns
	GetSearchItems(table string, query string, columnsToSearch []string, displayColumns []string) (r []*Item, err error)
	// Parameters:
	//  - Key
	//  - RatingColumnName
	//  - NumRecs
	//  - DisplayColumns
	MakeOverallRatingBasedOrRandomRecommendation(key string, ratingColumnName string, numRecs int64, displayColumns []string) (r []*Item, err error)
	// Parameters:
	//  - Email
	//  - Password
	AddKibitzUser(email string, password string) (err error)
	// Parameters:
	//  - Username
	//  - Repository
	//  - Table
	//  - PrimaryKey
	//  - Title
	//  - Description
	//  - Image
	CheckCorrectDatahubLogin(username string, repository string, table string, primary_key string, title string, description string, image string) (r bool, err error)
	// Parameters:
	//  - Username
	//  - Table
	//  - Repository
	//  - RatingsColumn
	CheckRatingsColumn(username string, table string, repository string, ratings_column string) (r bool, err error)
	// Parameters:
	//  - Username
	GetRecommenders(username string) (r []*Recommender, err error)
	// Parameters:
	//  - Username
	GetProfilePicture(username string) (r string, err error)
	// Parameters:
	//  - Username
	//  - FbUsername
	SaveFBProfilePic(username string, fbUsername string) (err error)
	// Parameters:
	//  - ClientKey
	DeleteRecommender(clientKey string) (err error)
	// Parameters:
	//  - Username
	//  - PrimaryKey
	//  - Title
	//  - Description
	//  - Image
	//  - Video
	//  - ItemTypes
	//  - DisplayItems
	//  - MaxRatingVal
	//  - NumRecs
	//  - RecommenderName
	//  - ClientKey
	//  - Homepage
	//  - CreatorName
	//  - RepoName
	//  - TableName
	//  - RatingsColumn
	UpdateTemplate(username string, primaryKey string, title string, description string, image string, video string, itemTypes map[string]string, displayItems []string, maxRatingVal int64, numRecs int64, recommenderName string, clientKey string, homepage string, creatorName string, repoName string, tableName string, ratingsColumn string) (err error)
	// Parameters:
	//  - Username
	//  - RepoName
	//  - PrimaryKey
	//  - ItemTable
	//  - TableName
	//  - UserIdCol
	//  - ItemIdCol
	//  - UserRatingCol
	ConfigurePrefilledUserRatings(username string, repoName string, primaryKey string, itemTable string, tableName string, userIdCol string, itemIdCol string, userRatingCol string) (err error)
	// Parameters:
	//  - Username
	//  - Repo
	GetTables(username string, repo string) (r []string, err error)
	// Parameters:
	//  - Username
	//  - Repo
	//  - Table
	GetColumns(username string, repo string, table string) (r []string, err error)
}

type RecommenderServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewRecommenderServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RecommenderServiceClient {
	return &RecommenderServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewRecommenderServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RecommenderServiceClient {
	return &RecommenderServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Key
func (p *RecommenderServiceClient) CreateNewIndividualServer(key string) (err error) {
	if err = p.sendCreateNewIndividualServer(key); err != nil {
		return
	}
	return p.recvCreateNewIndividualServer()
}

func (p *RecommenderServiceClient) sendCreateNewIndividualServer(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createNewIndividualServer", thrift.CALL, p.SeqId)
	args5 := NewCreateNewIndividualServerArgs()
	args5.Key = key
	err = args5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvCreateNewIndividualServer() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result6 := NewCreateNewIndividualServerResult()
	err = result6.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Key
func (p *RecommenderServiceClient) TerminateSession(key string) (err error) {
	if err = p.sendTerminateSession(key); err != nil {
		return
	}
	return p.recvTerminateSession()
}

func (p *RecommenderServiceClient) sendTerminateSession(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("terminateSession", thrift.CALL, p.SeqId)
	args9 := NewTerminateSessionArgs()
	args9.Key = key
	err = args9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvTerminateSession() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result10 := NewTerminateSessionResult()
	err = result10.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Key
//  - UserId
//  - NumRecs
//  - IsBoolean
//  - DisplayColumns
func (p *RecommenderServiceClient) MakeRecommendation(key string, userId int64, numRecs int64, isBoolean bool, displayColumns []string) (r []*Item, err error) {
	if err = p.sendMakeRecommendation(key, userId, numRecs, isBoolean, displayColumns); err != nil {
		return
	}
	return p.recvMakeRecommendation()
}

func (p *RecommenderServiceClient) sendMakeRecommendation(key string, userId int64, numRecs int64, isBoolean bool, displayColumns []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("makeRecommendation", thrift.CALL, p.SeqId)
	args13 := NewMakeRecommendationArgs()
	args13.Key = key
	args13.UserId = userId
	args13.NumRecs = numRecs
	args13.IsBoolean = isBoolean
	args13.DisplayColumns = displayColumns
	err = args13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvMakeRecommendation() (value []*Item, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result14 := NewMakeRecommendationResult()
	err = result14.Read(iprot)
	iprot.ReadMessageEnd()
	value = result14.Success
	return
}

// Parameters:
//  - Key
//  - UserId
//  - NumRecs
//  - DisplayColumns
func (p *RecommenderServiceClient) MakeItemBasedRecommendations(key string, userId int64, numRecs int64, displayColumns []string) (r []*Item, err error) {
	if err = p.sendMakeItemBasedRecommendations(key, userId, numRecs, displayColumns); err != nil {
		return
	}
	return p.recvMakeItemBasedRecommendations()
}

func (p *RecommenderServiceClient) sendMakeItemBasedRecommendations(key string, userId int64, numRecs int64, displayColumns []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("makeItemBasedRecommendations", thrift.CALL, p.SeqId)
	args17 := NewMakeItemBasedRecommendationsArgs()
	args17.Key = key
	args17.UserId = userId
	args17.NumRecs = numRecs
	args17.DisplayColumns = displayColumns
	err = args17.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvMakeItemBasedRecommendations() (value []*Item, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		error20, err = error19.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error20
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result18 := NewMakeItemBasedRecommendationsResult()
	err = result18.Read(iprot)
	iprot.ReadMessageEnd()
	value = result18.Success
	return
}

// Parameters:
//  - Key
//  - Page
//  - NumPerPage
//  - DisplayColumns
func (p *RecommenderServiceClient) GetPageItems(key string, page int64, numPerPage int64, displayColumns []string) (r []*Item, err error) {
	if err = p.sendGetPageItems(key, page, numPerPage, displayColumns); err != nil {
		return
	}
	return p.recvGetPageItems()
}

func (p *RecommenderServiceClient) sendGetPageItems(key string, page int64, numPerPage int64, displayColumns []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getPageItems", thrift.CALL, p.SeqId)
	args21 := NewGetPageItemsArgs()
	args21.Key = key
	args21.Page = page
	args21.NumPerPage = numPerPage
	args21.DisplayColumns = displayColumns
	err = args21.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetPageItems() (value []*Item, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result22 := NewGetPageItemsResult()
	err = result22.Read(iprot)
	iprot.ReadMessageEnd()
	value = result22.Success
	return
}

// Parameters:
//  - Key
func (p *RecommenderServiceClient) GetItemCount(key string) (r int64, err error) {
	if err = p.sendGetItemCount(key); err != nil {
		return
	}
	return p.recvGetItemCount()
}

func (p *RecommenderServiceClient) sendGetItemCount(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getItemCount", thrift.CALL, p.SeqId)
	args25 := NewGetItemCountArgs()
	args25.Key = key
	err = args25.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetItemCount() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result26 := NewGetItemCountResult()
	err = result26.Read(iprot)
	iprot.ReadMessageEnd()
	value = result26.Success
	return
}

// Parameters:
//  - Key
//  - UserId
//  - ItemId
//  - Rating
func (p *RecommenderServiceClient) RecordRatings(key string, userId int64, itemId int64, rating int64) (err error) {
	if err = p.sendRecordRatings(key, userId, itemId, rating); err != nil {
		return
	}
	return p.recvRecordRatings()
}

func (p *RecommenderServiceClient) sendRecordRatings(key string, userId int64, itemId int64, rating int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("recordRatings", thrift.CALL, p.SeqId)
	args29 := NewRecordRatingsArgs()
	args29.Key = key
	args29.UserId = userId
	args29.ItemId = itemId
	args29.Rating = rating
	err = args29.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvRecordRatings() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result30 := NewRecordRatingsResult()
	err = result30.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Key
//  - UserId
//  - ItemId
func (p *RecommenderServiceClient) DeleteRatings(key string, userId int64, itemId int64) (err error) {
	if err = p.sendDeleteRatings(key, userId, itemId); err != nil {
		return
	}
	return p.recvDeleteRatings()
}

func (p *RecommenderServiceClient) sendDeleteRatings(key string, userId int64, itemId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteRatings", thrift.CALL, p.SeqId)
	args33 := NewDeleteRatingsArgs()
	args33.Key = key
	args33.UserId = userId
	args33.ItemId = itemId
	err = args33.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvDeleteRatings() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result34 := NewDeleteRatingsResult()
	err = result34.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Key
//  - Username
//  - Iskibitzuser
func (p *RecommenderServiceClient) CreateNewUser(key string, username string, iskibitzuser bool) (r string, err error) {
	if err = p.sendCreateNewUser(key, username, iskibitzuser); err != nil {
		return
	}
	return p.recvCreateNewUser()
}

func (p *RecommenderServiceClient) sendCreateNewUser(key string, username string, iskibitzuser bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createNewUser", thrift.CALL, p.SeqId)
	args37 := NewCreateNewUserArgs()
	args37.Key = key
	args37.Username = username
	args37.Iskibitzuser = iskibitzuser
	err = args37.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvCreateNewUser() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result38 := NewCreateNewUserResult()
	err = result38.Read(iprot)
	iprot.ReadMessageEnd()
	value = result38.Success
	return
}

// Parameters:
//  - Key
//  - Username
//  - Iskibitzuser
func (p *RecommenderServiceClient) CheckUsername(key string, username string, iskibitzuser bool) (r bool, err error) {
	if err = p.sendCheckUsername(key, username, iskibitzuser); err != nil {
		return
	}
	return p.recvCheckUsername()
}

func (p *RecommenderServiceClient) sendCheckUsername(key string, username string, iskibitzuser bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("checkUsername", thrift.CALL, p.SeqId)
	args41 := NewCheckUsernameArgs()
	args41.Key = key
	args41.Username = username
	args41.Iskibitzuser = iskibitzuser
	err = args41.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvCheckUsername() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result42 := NewCheckUsernameResult()
	err = result42.Read(iprot)
	iprot.ReadMessageEnd()
	value = result42.Success
	return
}

// Parameters:
//  - Key
//  - Username
//  - Password
//  - Iskibitzuser
func (p *RecommenderServiceClient) CheckLogin(key string, username string, password string, iskibitzuser bool) (r bool, err error) {
	if err = p.sendCheckLogin(key, username, password, iskibitzuser); err != nil {
		return
	}
	return p.recvCheckLogin()
}

func (p *RecommenderServiceClient) sendCheckLogin(key string, username string, password string, iskibitzuser bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("checkLogin", thrift.CALL, p.SeqId)
	args45 := NewCheckLoginArgs()
	args45.Key = key
	args45.Username = username
	args45.Password = password
	args45.Iskibitzuser = iskibitzuser
	err = args45.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvCheckLogin() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result46 := NewCheckLoginResult()
	err = result46.Read(iprot)
	iprot.ReadMessageEnd()
	value = result46.Success
	return
}

// Parameters:
//  - Key
//  - Username
func (p *RecommenderServiceClient) RetrieveUserId(key string, username string) (r int64, err error) {
	if err = p.sendRetrieveUserId(key, username); err != nil {
		return
	}
	return p.recvRetrieveUserId()
}

func (p *RecommenderServiceClient) sendRetrieveUserId(key string, username string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("retrieveUserId", thrift.CALL, p.SeqId)
	args49 := NewRetrieveUserIdArgs()
	args49.Key = key
	args49.Username = username
	err = args49.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvRetrieveUserId() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result50 := NewRetrieveUserIdResult()
	err = result50.Read(iprot)
	iprot.ReadMessageEnd()
	value = result50.Success
	return
}

// Parameters:
//  - Username
//  - PrimaryKey
//  - Database
//  - Table
//  - Title
//  - Description
//  - Image
//  - RatingsColumn
//  - ClientKey
func (p *RecommenderServiceClient) CreateNewRecommender(username string, primaryKey string, database string, table string, title string, description string, image string, ratings_column string, clientKey string) (r bool, err error) {
	if err = p.sendCreateNewRecommender(username, primaryKey, database, table, title, description, image, ratings_column, clientKey); err != nil {
		return
	}
	return p.recvCreateNewRecommender()
}

func (p *RecommenderServiceClient) sendCreateNewRecommender(username string, primaryKey string, database string, table string, title string, description string, image string, ratings_column string, clientKey string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createNewRecommender", thrift.CALL, p.SeqId)
	args53 := NewCreateNewRecommenderArgs()
	args53.Username = username
	args53.PrimaryKey = primaryKey
	args53.Database = database
	args53.Table = table
	args53.Title = title
	args53.Description = description
	args53.Image = image
	args53.RatingsColumn = ratings_column
	args53.ClientKey = clientKey
	err = args53.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvCreateNewRecommender() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result54 := NewCreateNewRecommenderResult()
	err = result54.Read(iprot)
	iprot.ReadMessageEnd()
	value = result54.Success
	return
}

// Parameters:
//  - Key
//  - UserId
//  - DisplayColumns
func (p *RecommenderServiceClient) GetUserRatedItems(key string, userId int64, displayColumns []string) (r []*Item, err error) {
	if err = p.sendGetUserRatedItems(key, userId, displayColumns); err != nil {
		return
	}
	return p.recvGetUserRatedItems()
}

func (p *RecommenderServiceClient) sendGetUserRatedItems(key string, userId int64, displayColumns []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getUserRatedItems", thrift.CALL, p.SeqId)
	args57 := NewGetUserRatedItemsArgs()
	args57.Key = key
	args57.UserId = userId
	args57.DisplayColumns = displayColumns
	err = args57.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetUserRatedItems() (value []*Item, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result58 := NewGetUserRatedItemsResult()
	err = result58.Read(iprot)
	iprot.ReadMessageEnd()
	value = result58.Success
	return
}

// Parameters:
//  - Key
//  - Table
//  - Username
//  - Database
func (p *RecommenderServiceClient) InitiateModel(key string, table string, username string, database string) (err error) {
	if err = p.sendInitiateModel(key, table, username, database); err != nil {
		return
	}
	return p.recvInitiateModel()
}

func (p *RecommenderServiceClient) sendInitiateModel(key string, table string, username string, database string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("initiateModel", thrift.CALL, p.SeqId)
	args61 := NewInitiateModelArgs()
	args61.Key = key
	args61.Table = table
	args61.Username = username
	args61.Database = database
	err = args61.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvInitiateModel() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result62 := NewInitiateModelResult()
	err = result62.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Table
//  - Query
//  - ColumnsToSearch
//  - DisplayColumns
func (p *RecommenderServiceClient) GetSearchItems(table string, query string, columnsToSearch []string, displayColumns []string) (r []*Item, err error) {
	if err = p.sendGetSearchItems(table, query, columnsToSearch, displayColumns); err != nil {
		return
	}
	return p.recvGetSearchItems()
}

func (p *RecommenderServiceClient) sendGetSearchItems(table string, query string, columnsToSearch []string, displayColumns []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSearchItems", thrift.CALL, p.SeqId)
	args65 := NewGetSearchItemsArgs()
	args65.Table = table
	args65.Query = query
	args65.ColumnsToSearch = columnsToSearch
	args65.DisplayColumns = displayColumns
	err = args65.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetSearchItems() (value []*Item, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result66 := NewGetSearchItemsResult()
	err = result66.Read(iprot)
	iprot.ReadMessageEnd()
	value = result66.Success
	return
}

// Parameters:
//  - Key
//  - RatingColumnName
//  - NumRecs
//  - DisplayColumns
func (p *RecommenderServiceClient) MakeOverallRatingBasedOrRandomRecommendation(key string, ratingColumnName string, numRecs int64, displayColumns []string) (r []*Item, err error) {
	if err = p.sendMakeOverallRatingBasedOrRandomRecommendation(key, ratingColumnName, numRecs, displayColumns); err != nil {
		return
	}
	return p.recvMakeOverallRatingBasedOrRandomRecommendation()
}

func (p *RecommenderServiceClient) sendMakeOverallRatingBasedOrRandomRecommendation(key string, ratingColumnName string, numRecs int64, displayColumns []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("makeOverallRatingBasedOrRandomRecommendation", thrift.CALL, p.SeqId)
	args69 := NewMakeOverallRatingBasedOrRandomRecommendationArgs()
	args69.Key = key
	args69.RatingColumnName = ratingColumnName
	args69.NumRecs = numRecs
	args69.DisplayColumns = displayColumns
	err = args69.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvMakeOverallRatingBasedOrRandomRecommendation() (value []*Item, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result70 := NewMakeOverallRatingBasedOrRandomRecommendationResult()
	err = result70.Read(iprot)
	iprot.ReadMessageEnd()
	value = result70.Success
	return
}

// Parameters:
//  - Email
//  - Password
func (p *RecommenderServiceClient) AddKibitzUser(email string, password string) (err error) {
	if err = p.sendAddKibitzUser(email, password); err != nil {
		return
	}
	return p.recvAddKibitzUser()
}

func (p *RecommenderServiceClient) sendAddKibitzUser(email string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("addKibitzUser", thrift.CALL, p.SeqId)
	args73 := NewAddKibitzUserArgs()
	args73.Email = email
	args73.Password = password
	err = args73.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvAddKibitzUser() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error75 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error76 error
		error76, err = error75.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error76
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result74 := NewAddKibitzUserResult()
	err = result74.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Username
//  - Repository
//  - Table
//  - PrimaryKey
//  - Title
//  - Description
//  - Image
func (p *RecommenderServiceClient) CheckCorrectDatahubLogin(username string, repository string, table string, primary_key string, title string, description string, image string) (r bool, err error) {
	if err = p.sendCheckCorrectDatahubLogin(username, repository, table, primary_key, title, description, image); err != nil {
		return
	}
	return p.recvCheckCorrectDatahubLogin()
}

func (p *RecommenderServiceClient) sendCheckCorrectDatahubLogin(username string, repository string, table string, primary_key string, title string, description string, image string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("checkCorrectDatahubLogin", thrift.CALL, p.SeqId)
	args77 := NewCheckCorrectDatahubLoginArgs()
	args77.Username = username
	args77.Repository = repository
	args77.Table = table
	args77.PrimaryKey = primary_key
	args77.Title = title
	args77.Description = description
	args77.Image = image
	err = args77.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvCheckCorrectDatahubLogin() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error79 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error80 error
		error80, err = error79.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error80
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result78 := NewCheckCorrectDatahubLoginResult()
	err = result78.Read(iprot)
	iprot.ReadMessageEnd()
	value = result78.Success
	return
}

// Parameters:
//  - Username
//  - Table
//  - Repository
//  - RatingsColumn
func (p *RecommenderServiceClient) CheckRatingsColumn(username string, table string, repository string, ratings_column string) (r bool, err error) {
	if err = p.sendCheckRatingsColumn(username, table, repository, ratings_column); err != nil {
		return
	}
	return p.recvCheckRatingsColumn()
}

func (p *RecommenderServiceClient) sendCheckRatingsColumn(username string, table string, repository string, ratings_column string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("checkRatingsColumn", thrift.CALL, p.SeqId)
	args81 := NewCheckRatingsColumnArgs()
	args81.Username = username
	args81.Table = table
	args81.Repository = repository
	args81.RatingsColumn = ratings_column
	err = args81.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvCheckRatingsColumn() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error83 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error84 error
		error84, err = error83.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error84
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result82 := NewCheckRatingsColumnResult()
	err = result82.Read(iprot)
	iprot.ReadMessageEnd()
	value = result82.Success
	return
}

// Parameters:
//  - Username
func (p *RecommenderServiceClient) GetRecommenders(username string) (r []*Recommender, err error) {
	if err = p.sendGetRecommenders(username); err != nil {
		return
	}
	return p.recvGetRecommenders()
}

func (p *RecommenderServiceClient) sendGetRecommenders(username string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRecommenders", thrift.CALL, p.SeqId)
	args85 := NewGetRecommendersArgs()
	args85.Username = username
	err = args85.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetRecommenders() (value []*Recommender, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error87 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error88 error
		error88, err = error87.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error88
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result86 := NewGetRecommendersResult()
	err = result86.Read(iprot)
	iprot.ReadMessageEnd()
	value = result86.Success
	return
}

// Parameters:
//  - Username
func (p *RecommenderServiceClient) GetProfilePicture(username string) (r string, err error) {
	if err = p.sendGetProfilePicture(username); err != nil {
		return
	}
	return p.recvGetProfilePicture()
}

func (p *RecommenderServiceClient) sendGetProfilePicture(username string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getProfilePicture", thrift.CALL, p.SeqId)
	args89 := NewGetProfilePictureArgs()
	args89.Username = username
	err = args89.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetProfilePicture() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error91 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error92 error
		error92, err = error91.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error92
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result90 := NewGetProfilePictureResult()
	err = result90.Read(iprot)
	iprot.ReadMessageEnd()
	value = result90.Success
	return
}

// Parameters:
//  - Username
//  - FbUsername
func (p *RecommenderServiceClient) SaveFBProfilePic(username string, fbUsername string) (err error) {
	if err = p.sendSaveFBProfilePic(username, fbUsername); err != nil {
		return
	}
	return p.recvSaveFBProfilePic()
}

func (p *RecommenderServiceClient) sendSaveFBProfilePic(username string, fbUsername string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("saveFBProfilePic", thrift.CALL, p.SeqId)
	args93 := NewSaveFBProfilePicArgs()
	args93.Username = username
	args93.FbUsername = fbUsername
	err = args93.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvSaveFBProfilePic() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error95 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error96 error
		error96, err = error95.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error96
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result94 := NewSaveFBProfilePicResult()
	err = result94.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - ClientKey
func (p *RecommenderServiceClient) DeleteRecommender(clientKey string) (err error) {
	if err = p.sendDeleteRecommender(clientKey); err != nil {
		return
	}
	return p.recvDeleteRecommender()
}

func (p *RecommenderServiceClient) sendDeleteRecommender(clientKey string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteRecommender", thrift.CALL, p.SeqId)
	args97 := NewDeleteRecommenderArgs()
	args97.ClientKey = clientKey
	err = args97.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvDeleteRecommender() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error99 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error100 error
		error100, err = error99.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error100
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result98 := NewDeleteRecommenderResult()
	err = result98.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Username
//  - PrimaryKey
//  - Title
//  - Description
//  - Image
//  - Video
//  - ItemTypes
//  - DisplayItems
//  - MaxRatingVal
//  - NumRecs
//  - RecommenderName
//  - ClientKey
//  - Homepage
//  - CreatorName
//  - RepoName
//  - TableName
//  - RatingsColumn
func (p *RecommenderServiceClient) UpdateTemplate(username string, primaryKey string, title string, description string, image string, video string, itemTypes map[string]string, displayItems []string, maxRatingVal int64, numRecs int64, recommenderName string, clientKey string, homepage string, creatorName string, repoName string, tableName string, ratingsColumn string) (err error) {
	if err = p.sendUpdateTemplate(username, primaryKey, title, description, image, video, itemTypes, displayItems, maxRatingVal, numRecs, recommenderName, clientKey, homepage, creatorName, repoName, tableName, ratingsColumn); err != nil {
		return
	}
	return p.recvUpdateTemplate()
}

func (p *RecommenderServiceClient) sendUpdateTemplate(username string, primaryKey string, title string, description string, image string, video string, itemTypes map[string]string, displayItems []string, maxRatingVal int64, numRecs int64, recommenderName string, clientKey string, homepage string, creatorName string, repoName string, tableName string, ratingsColumn string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateTemplate", thrift.CALL, p.SeqId)
	args101 := NewUpdateTemplateArgs()
	args101.Username = username
	args101.PrimaryKey = primaryKey
	args101.Title = title
	args101.Description = description
	args101.Image = image
	args101.Video = video
	args101.ItemTypes = itemTypes
	args101.DisplayItems = displayItems
	args101.MaxRatingVal = maxRatingVal
	args101.NumRecs = numRecs
	args101.RecommenderName = recommenderName
	args101.ClientKey = clientKey
	args101.Homepage = homepage
	args101.CreatorName = creatorName
	args101.RepoName = repoName
	args101.TableName = tableName
	args101.RatingsColumn = ratingsColumn
	err = args101.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvUpdateTemplate() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error103 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error104 error
		error104, err = error103.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error104
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result102 := NewUpdateTemplateResult()
	err = result102.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Username
//  - RepoName
//  - PrimaryKey
//  - ItemTable
//  - TableName
//  - UserIdCol
//  - ItemIdCol
//  - UserRatingCol
func (p *RecommenderServiceClient) ConfigurePrefilledUserRatings(username string, repoName string, primaryKey string, itemTable string, tableName string, userIdCol string, itemIdCol string, userRatingCol string) (err error) {
	if err = p.sendConfigurePrefilledUserRatings(username, repoName, primaryKey, itemTable, tableName, userIdCol, itemIdCol, userRatingCol); err != nil {
		return
	}
	return p.recvConfigurePrefilledUserRatings()
}

func (p *RecommenderServiceClient) sendConfigurePrefilledUserRatings(username string, repoName string, primaryKey string, itemTable string, tableName string, userIdCol string, itemIdCol string, userRatingCol string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("configurePrefilledUserRatings", thrift.CALL, p.SeqId)
	args105 := NewConfigurePrefilledUserRatingsArgs()
	args105.Username = username
	args105.RepoName = repoName
	args105.PrimaryKey = primaryKey
	args105.ItemTable = itemTable
	args105.TableName = tableName
	args105.UserIdCol = userIdCol
	args105.ItemIdCol = itemIdCol
	args105.UserRatingCol = userRatingCol
	err = args105.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvConfigurePrefilledUserRatings() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error107 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error108 error
		error108, err = error107.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error108
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result106 := NewConfigurePrefilledUserRatingsResult()
	err = result106.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

// Parameters:
//  - Username
//  - Repo
func (p *RecommenderServiceClient) GetTables(username string, repo string) (r []string, err error) {
	if err = p.sendGetTables(username, repo); err != nil {
		return
	}
	return p.recvGetTables()
}

func (p *RecommenderServiceClient) sendGetTables(username string, repo string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTables", thrift.CALL, p.SeqId)
	args109 := NewGetTablesArgs()
	args109.Username = username
	args109.Repo = repo
	err = args109.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error112 error
		error112, err = error111.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error112
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result110 := NewGetTablesResult()
	err = result110.Read(iprot)
	iprot.ReadMessageEnd()
	value = result110.Success
	return
}

// Parameters:
//  - Username
//  - Repo
//  - Table
func (p *RecommenderServiceClient) GetColumns(username string, repo string, table string) (r []string, err error) {
	if err = p.sendGetColumns(username, repo, table); err != nil {
		return
	}
	return p.recvGetColumns()
}

func (p *RecommenderServiceClient) sendGetColumns(username string, repo string, table string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getColumns", thrift.CALL, p.SeqId)
	args113 := NewGetColumnsArgs()
	args113.Username = username
	args113.Repo = repo
	args113.Table = table
	err = args113.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *RecommenderServiceClient) recvGetColumns() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error115 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error116 error
		error116, err = error115.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error116
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result114 := NewGetColumnsResult()
	err = result114.Read(iprot)
	iprot.ReadMessageEnd()
	value = result114.Success
	return
}

type RecommenderServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RecommenderService
}

func (p *RecommenderServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RecommenderServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RecommenderServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRecommenderServiceProcessor(handler RecommenderService) *RecommenderServiceProcessor {

	self117 := &RecommenderServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self117.processorMap["createNewIndividualServer"] = &recommenderServiceProcessorCreateNewIndividualServer{handler: handler}
	self117.processorMap["terminateSession"] = &recommenderServiceProcessorTerminateSession{handler: handler}
	self117.processorMap["makeRecommendation"] = &recommenderServiceProcessorMakeRecommendation{handler: handler}
	self117.processorMap["makeItemBasedRecommendations"] = &recommenderServiceProcessorMakeItemBasedRecommendations{handler: handler}
	self117.processorMap["getPageItems"] = &recommenderServiceProcessorGetPageItems{handler: handler}
	self117.processorMap["getItemCount"] = &recommenderServiceProcessorGetItemCount{handler: handler}
	self117.processorMap["recordRatings"] = &recommenderServiceProcessorRecordRatings{handler: handler}
	self117.processorMap["deleteRatings"] = &recommenderServiceProcessorDeleteRatings{handler: handler}
	self117.processorMap["createNewUser"] = &recommenderServiceProcessorCreateNewUser{handler: handler}
	self117.processorMap["checkUsername"] = &recommenderServiceProcessorCheckUsername{handler: handler}
	self117.processorMap["checkLogin"] = &recommenderServiceProcessorCheckLogin{handler: handler}
	self117.processorMap["retrieveUserId"] = &recommenderServiceProcessorRetrieveUserId{handler: handler}
	self117.processorMap["createNewRecommender"] = &recommenderServiceProcessorCreateNewRecommender{handler: handler}
	self117.processorMap["getUserRatedItems"] = &recommenderServiceProcessorGetUserRatedItems{handler: handler}
	self117.processorMap["initiateModel"] = &recommenderServiceProcessorInitiateModel{handler: handler}
	self117.processorMap["getSearchItems"] = &recommenderServiceProcessorGetSearchItems{handler: handler}
	self117.processorMap["makeOverallRatingBasedOrRandomRecommendation"] = &recommenderServiceProcessorMakeOverallRatingBasedOrRandomRecommendation{handler: handler}
	self117.processorMap["addKibitzUser"] = &recommenderServiceProcessorAddKibitzUser{handler: handler}
	self117.processorMap["checkCorrectDatahubLogin"] = &recommenderServiceProcessorCheckCorrectDatahubLogin{handler: handler}
	self117.processorMap["checkRatingsColumn"] = &recommenderServiceProcessorCheckRatingsColumn{handler: handler}
	self117.processorMap["getRecommenders"] = &recommenderServiceProcessorGetRecommenders{handler: handler}
	self117.processorMap["getProfilePicture"] = &recommenderServiceProcessorGetProfilePicture{handler: handler}
	self117.processorMap["saveFBProfilePic"] = &recommenderServiceProcessorSaveFBProfilePic{handler: handler}
	self117.processorMap["deleteRecommender"] = &recommenderServiceProcessorDeleteRecommender{handler: handler}
	self117.processorMap["updateTemplate"] = &recommenderServiceProcessorUpdateTemplate{handler: handler}
	self117.processorMap["configurePrefilledUserRatings"] = &recommenderServiceProcessorConfigurePrefilledUserRatings{handler: handler}
	self117.processorMap["getTables"] = &recommenderServiceProcessorGetTables{handler: handler}
	self117.processorMap["getColumns"] = &recommenderServiceProcessorGetColumns{handler: handler}
	return self117
}

func (p *RecommenderServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x118 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x118.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x118

}

type recommenderServiceProcessorCreateNewIndividualServer struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorCreateNewIndividualServer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateNewIndividualServerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createNewIndividualServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateNewIndividualServerResult()
	if err = p.handler.CreateNewIndividualServer(args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNewIndividualServer: "+err.Error())
		oprot.WriteMessageBegin("createNewIndividualServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createNewIndividualServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorTerminateSession struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorTerminateSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewTerminateSessionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("terminateSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewTerminateSessionResult()
	if err = p.handler.TerminateSession(args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing terminateSession: "+err.Error())
		oprot.WriteMessageBegin("terminateSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("terminateSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorMakeRecommendation struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorMakeRecommendation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMakeRecommendationArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("makeRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMakeRecommendationResult()
	if result.Success, err = p.handler.MakeRecommendation(args.Key, args.UserId, args.NumRecs, args.IsBoolean, args.DisplayColumns); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing makeRecommendation: "+err.Error())
		oprot.WriteMessageBegin("makeRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("makeRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorMakeItemBasedRecommendations struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorMakeItemBasedRecommendations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMakeItemBasedRecommendationsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("makeItemBasedRecommendations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMakeItemBasedRecommendationsResult()
	if result.Success, err = p.handler.MakeItemBasedRecommendations(args.Key, args.UserId, args.NumRecs, args.DisplayColumns); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing makeItemBasedRecommendations: "+err.Error())
		oprot.WriteMessageBegin("makeItemBasedRecommendations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("makeItemBasedRecommendations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetPageItems struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetPageItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPageItemsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPageItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPageItemsResult()
	if result.Success, err = p.handler.GetPageItems(args.Key, args.Page, args.NumPerPage, args.DisplayColumns); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPageItems: "+err.Error())
		oprot.WriteMessageBegin("getPageItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getPageItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetItemCount struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetItemCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetItemCountArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getItemCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetItemCountResult()
	if result.Success, err = p.handler.GetItemCount(args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemCount: "+err.Error())
		oprot.WriteMessageBegin("getItemCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getItemCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorRecordRatings struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorRecordRatings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRecordRatingsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("recordRatings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRecordRatingsResult()
	if err = p.handler.RecordRatings(args.Key, args.UserId, args.ItemId, args.Rating); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing recordRatings: "+err.Error())
		oprot.WriteMessageBegin("recordRatings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("recordRatings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorDeleteRatings struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorDeleteRatings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteRatingsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteRatings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteRatingsResult()
	if err = p.handler.DeleteRatings(args.Key, args.UserId, args.ItemId); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteRatings: "+err.Error())
		oprot.WriteMessageBegin("deleteRatings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteRatings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorCreateNewUser struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorCreateNewUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateNewUserArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createNewUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateNewUserResult()
	if result.Success, err = p.handler.CreateNewUser(args.Key, args.Username, args.Iskibitzuser); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNewUser: "+err.Error())
		oprot.WriteMessageBegin("createNewUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createNewUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorCheckUsername struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorCheckUsername) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCheckUsernameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkUsername", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCheckUsernameResult()
	if result.Success, err = p.handler.CheckUsername(args.Key, args.Username, args.Iskibitzuser); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkUsername: "+err.Error())
		oprot.WriteMessageBegin("checkUsername", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("checkUsername", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorCheckLogin struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorCheckLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCheckLoginArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCheckLoginResult()
	if result.Success, err = p.handler.CheckLogin(args.Key, args.Username, args.Password, args.Iskibitzuser); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkLogin: "+err.Error())
		oprot.WriteMessageBegin("checkLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("checkLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorRetrieveUserId struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorRetrieveUserId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRetrieveUserIdArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("retrieveUserId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRetrieveUserIdResult()
	if result.Success, err = p.handler.RetrieveUserId(args.Key, args.Username); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing retrieveUserId: "+err.Error())
		oprot.WriteMessageBegin("retrieveUserId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("retrieveUserId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorCreateNewRecommender struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorCreateNewRecommender) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateNewRecommenderArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createNewRecommender", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateNewRecommenderResult()
	if result.Success, err = p.handler.CreateNewRecommender(args.Username, args.PrimaryKey, args.Database, args.Table, args.Title, args.Description, args.Image, args.RatingsColumn, args.ClientKey); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNewRecommender: "+err.Error())
		oprot.WriteMessageBegin("createNewRecommender", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createNewRecommender", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetUserRatedItems struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetUserRatedItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetUserRatedItemsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserRatedItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetUserRatedItemsResult()
	if result.Success, err = p.handler.GetUserRatedItems(args.Key, args.UserId, args.DisplayColumns); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserRatedItems: "+err.Error())
		oprot.WriteMessageBegin("getUserRatedItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getUserRatedItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorInitiateModel struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorInitiateModel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewInitiateModelArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("initiateModel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewInitiateModelResult()
	if err = p.handler.InitiateModel(args.Key, args.Table, args.Username, args.Database); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing initiateModel: "+err.Error())
		oprot.WriteMessageBegin("initiateModel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("initiateModel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetSearchItems struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetSearchItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSearchItemsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSearchItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSearchItemsResult()
	if result.Success, err = p.handler.GetSearchItems(args.Table, args.Query, args.ColumnsToSearch, args.DisplayColumns); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSearchItems: "+err.Error())
		oprot.WriteMessageBegin("getSearchItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSearchItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorMakeOverallRatingBasedOrRandomRecommendation struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorMakeOverallRatingBasedOrRandomRecommendation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMakeOverallRatingBasedOrRandomRecommendationArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("makeOverallRatingBasedOrRandomRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMakeOverallRatingBasedOrRandomRecommendationResult()
	if result.Success, err = p.handler.MakeOverallRatingBasedOrRandomRecommendation(args.Key, args.RatingColumnName, args.NumRecs, args.DisplayColumns); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing makeOverallRatingBasedOrRandomRecommendation: "+err.Error())
		oprot.WriteMessageBegin("makeOverallRatingBasedOrRandomRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("makeOverallRatingBasedOrRandomRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorAddKibitzUser struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorAddKibitzUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAddKibitzUserArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addKibitzUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAddKibitzUserResult()
	if err = p.handler.AddKibitzUser(args.Email, args.Password); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addKibitzUser: "+err.Error())
		oprot.WriteMessageBegin("addKibitzUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("addKibitzUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorCheckCorrectDatahubLogin struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorCheckCorrectDatahubLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCheckCorrectDatahubLoginArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkCorrectDatahubLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCheckCorrectDatahubLoginResult()
	if result.Success, err = p.handler.CheckCorrectDatahubLogin(args.Username, args.Repository, args.Table, args.PrimaryKey, args.Title, args.Description, args.Image); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkCorrectDatahubLogin: "+err.Error())
		oprot.WriteMessageBegin("checkCorrectDatahubLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("checkCorrectDatahubLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorCheckRatingsColumn struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorCheckRatingsColumn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCheckRatingsColumnArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkRatingsColumn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCheckRatingsColumnResult()
	if result.Success, err = p.handler.CheckRatingsColumn(args.Username, args.Table, args.Repository, args.RatingsColumn); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkRatingsColumn: "+err.Error())
		oprot.WriteMessageBegin("checkRatingsColumn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("checkRatingsColumn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetRecommenders struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetRecommenders) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRecommendersArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRecommenders", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRecommendersResult()
	if result.Success, err = p.handler.GetRecommenders(args.Username); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecommenders: "+err.Error())
		oprot.WriteMessageBegin("getRecommenders", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRecommenders", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetProfilePicture struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetProfilePicture) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetProfilePictureArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProfilePicture", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetProfilePictureResult()
	if result.Success, err = p.handler.GetProfilePicture(args.Username); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfilePicture: "+err.Error())
		oprot.WriteMessageBegin("getProfilePicture", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getProfilePicture", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorSaveFBProfilePic struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorSaveFBProfilePic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSaveFBProfilePicArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("saveFBProfilePic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSaveFBProfilePicResult()
	if err = p.handler.SaveFBProfilePic(args.Username, args.FbUsername); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveFBProfilePic: "+err.Error())
		oprot.WriteMessageBegin("saveFBProfilePic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("saveFBProfilePic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorDeleteRecommender struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorDeleteRecommender) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteRecommenderArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteRecommender", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteRecommenderResult()
	if err = p.handler.DeleteRecommender(args.ClientKey); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteRecommender: "+err.Error())
		oprot.WriteMessageBegin("deleteRecommender", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteRecommender", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorUpdateTemplate struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorUpdateTemplate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateTemplateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateTemplateResult()
	if err = p.handler.UpdateTemplate(args.Username, args.PrimaryKey, args.Title, args.Description, args.Image, args.Video, args.ItemTypes, args.DisplayItems, args.MaxRatingVal, args.NumRecs, args.RecommenderName, args.ClientKey, args.Homepage, args.CreatorName, args.RepoName, args.TableName, args.RatingsColumn); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTemplate: "+err.Error())
		oprot.WriteMessageBegin("updateTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateTemplate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorConfigurePrefilledUserRatings struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorConfigurePrefilledUserRatings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewConfigurePrefilledUserRatingsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("configurePrefilledUserRatings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewConfigurePrefilledUserRatingsResult()
	if err = p.handler.ConfigurePrefilledUserRatings(args.Username, args.RepoName, args.PrimaryKey, args.ItemTable, args.TableName, args.UserIdCol, args.ItemIdCol, args.UserRatingCol); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing configurePrefilledUserRatings: "+err.Error())
		oprot.WriteMessageBegin("configurePrefilledUserRatings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("configurePrefilledUserRatings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetTables struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTablesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTablesResult()
	if result.Success, err = p.handler.GetTables(args.Username, args.Repo); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTables: "+err.Error())
		oprot.WriteMessageBegin("getTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type recommenderServiceProcessorGetColumns struct {
	handler RecommenderService
}

func (p *recommenderServiceProcessorGetColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetColumnsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetColumnsResult()
	if result.Success, err = p.handler.GetColumns(args.Username, args.Repo, args.Table); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getColumns: "+err.Error())
		oprot.WriteMessageBegin("getColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateNewIndividualServerArgs struct {
	Key string `thrift:"key,1"`
}

func NewCreateNewIndividualServerArgs() *CreateNewIndividualServerArgs {
	return &CreateNewIndividualServerArgs{}
}

func (p *CreateNewIndividualServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNewIndividualServerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *CreateNewIndividualServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNewIndividualServer_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNewIndividualServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *CreateNewIndividualServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNewIndividualServerArgs(%+v)", *p)
}

type CreateNewIndividualServerResult struct {
}

func NewCreateNewIndividualServerResult() *CreateNewIndividualServerResult {
	return &CreateNewIndividualServerResult{}
}

func (p *CreateNewIndividualServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNewIndividualServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNewIndividualServer_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNewIndividualServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNewIndividualServerResult(%+v)", *p)
}

type TerminateSessionArgs struct {
	Key string `thrift:"key,1"`
}

func NewTerminateSessionArgs() *TerminateSessionArgs {
	return &TerminateSessionArgs{}
}

func (p *TerminateSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TerminateSessionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *TerminateSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("terminateSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TerminateSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *TerminateSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TerminateSessionArgs(%+v)", *p)
}

type TerminateSessionResult struct {
}

func NewTerminateSessionResult() *TerminateSessionResult {
	return &TerminateSessionResult{}
}

func (p *TerminateSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TerminateSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("terminateSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TerminateSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TerminateSessionResult(%+v)", *p)
}

type MakeRecommendationArgs struct {
	Key            string   `thrift:"key,1"`
	UserId         int64    `thrift:"userId,2"`
	NumRecs        int64    `thrift:"numRecs,3"`
	IsBoolean      bool     `thrift:"isBoolean,4"`
	DisplayColumns []string `thrift:"displayColumns,5"`
}

func NewMakeRecommendationArgs() *MakeRecommendationArgs {
	return &MakeRecommendationArgs{}
}

func (p *MakeRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MakeRecommendationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *MakeRecommendationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MakeRecommendationArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NumRecs = v
	}
	return nil
}

func (p *MakeRecommendationArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IsBoolean = v
	}
	return nil
}

func (p *MakeRecommendationArgs) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DisplayColumns = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem119 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem119 = v
		}
		p.DisplayColumns = append(p.DisplayColumns, _elem119)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *MakeRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("makeRecommendation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MakeRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *MakeRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userId: %s", p, err)
	}
	return err
}

func (p *MakeRecommendationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numRecs", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numRecs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumRecs)); err != nil {
		return fmt.Errorf("%T.numRecs (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numRecs: %s", p, err)
	}
	return err
}

func (p *MakeRecommendationArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isBoolean", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:isBoolean: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsBoolean)); err != nil {
		return fmt.Errorf("%T.isBoolean (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:isBoolean: %s", p, err)
	}
	return err
}

func (p *MakeRecommendationArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if p.DisplayColumns != nil {
		if err := oprot.WriteFieldBegin("displayColumns", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:displayColumns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DisplayColumns)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DisplayColumns {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:displayColumns: %s", p, err)
		}
	}
	return err
}

func (p *MakeRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakeRecommendationArgs(%+v)", *p)
}

type MakeRecommendationResult struct {
	Success []*Item `thrift:"success,0"`
}

func NewMakeRecommendationResult() *MakeRecommendationResult {
	return &MakeRecommendationResult{}
}

func (p *MakeRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MakeRecommendationResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Item, 0, size)
	for i := 0; i < size; i++ {
		_elem120 := NewItem()
		if err := _elem120.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem120)
		}
		p.Success = append(p.Success, _elem120)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *MakeRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("makeRecommendation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MakeRecommendationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MakeRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakeRecommendationResult(%+v)", *p)
}

type MakeItemBasedRecommendationsArgs struct {
	Key            string   `thrift:"key,1"`
	UserId         int64    `thrift:"userId,2"`
	NumRecs        int64    `thrift:"numRecs,3"`
	DisplayColumns []string `thrift:"displayColumns,4"`
}

func NewMakeItemBasedRecommendationsArgs() *MakeItemBasedRecommendationsArgs {
	return &MakeItemBasedRecommendationsArgs{}
}

func (p *MakeItemBasedRecommendationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MakeItemBasedRecommendationsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *MakeItemBasedRecommendationsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserId = v
	}
	return nil
}

func (p *MakeItemBasedRecommendationsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NumRecs = v
	}
	return nil
}

func (p *MakeItemBasedRecommendationsArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DisplayColumns = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem121 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem121 = v
		}
		p.DisplayColumns = append(p.DisplayColumns, _elem121)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *MakeItemBasedRecommendationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("makeItemBasedRecommendations_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MakeItemBasedRecommendationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *MakeItemBasedRecommendationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userId: %s", p, err)
	}
	return err
}

func (p *MakeItemBasedRecommendationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numRecs", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numRecs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumRecs)); err != nil {
		return fmt.Errorf("%T.numRecs (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numRecs: %s", p, err)
	}
	return err
}

func (p *MakeItemBasedRecommendationsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.DisplayColumns != nil {
		if err := oprot.WriteFieldBegin("displayColumns", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:displayColumns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DisplayColumns)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DisplayColumns {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:displayColumns: %s", p, err)
		}
	}
	return err
}

func (p *MakeItemBasedRecommendationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakeItemBasedRecommendationsArgs(%+v)", *p)
}

type MakeItemBasedRecommendationsResult struct {
	Success []*Item `thrift:"success,0"`
}

func NewMakeItemBasedRecommendationsResult() *MakeItemBasedRecommendationsResult {
	return &MakeItemBasedRecommendationsResult{}
}

func (p *MakeItemBasedRecommendationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MakeItemBasedRecommendationsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Item, 0, size)
	for i := 0; i < size; i++ {
		_elem122 := NewItem()
		if err := _elem122.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem122)
		}
		p.Success = append(p.Success, _elem122)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *MakeItemBasedRecommendationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("makeItemBasedRecommendations_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MakeItemBasedRecommendationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MakeItemBasedRecommendationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakeItemBasedRecommendationsResult(%+v)", *p)
}

type GetPageItemsArgs struct {
	Key            string   `thrift:"key,1"`
	Page           int64    `thrift:"page,2"`
	NumPerPage     int64    `thrift:"numPerPage,3"`
	DisplayColumns []string `thrift:"displayColumns,4"`
}

func NewGetPageItemsArgs() *GetPageItemsArgs {
	return &GetPageItemsArgs{}
}

func (p *GetPageItemsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPageItemsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetPageItemsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Page = v
	}
	return nil
}

func (p *GetPageItemsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NumPerPage = v
	}
	return nil
}

func (p *GetPageItemsArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DisplayColumns = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem123 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem123 = v
		}
		p.DisplayColumns = append(p.DisplayColumns, _elem123)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPageItemsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPageItems_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPageItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetPageItemsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:page: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Page)); err != nil {
		return fmt.Errorf("%T.page (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:page: %s", p, err)
	}
	return err
}

func (p *GetPageItemsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numPerPage", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numPerPage: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumPerPage)); err != nil {
		return fmt.Errorf("%T.numPerPage (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numPerPage: %s", p, err)
	}
	return err
}

func (p *GetPageItemsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.DisplayColumns != nil {
		if err := oprot.WriteFieldBegin("displayColumns", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:displayColumns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DisplayColumns)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DisplayColumns {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:displayColumns: %s", p, err)
		}
	}
	return err
}

func (p *GetPageItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPageItemsArgs(%+v)", *p)
}

type GetPageItemsResult struct {
	Success []*Item `thrift:"success,0"`
}

func NewGetPageItemsResult() *GetPageItemsResult {
	return &GetPageItemsResult{}
}

func (p *GetPageItemsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPageItemsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Item, 0, size)
	for i := 0; i < size; i++ {
		_elem124 := NewItem()
		if err := _elem124.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem124)
		}
		p.Success = append(p.Success, _elem124)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPageItemsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPageItems_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPageItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPageItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPageItemsResult(%+v)", *p)
}

type GetItemCountArgs struct {
	Key string `thrift:"key,1"`
}

func NewGetItemCountArgs() *GetItemCountArgs {
	return &GetItemCountArgs{}
}

func (p *GetItemCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetItemCountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetItemCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItemCount_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetItemCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetItemCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemCountArgs(%+v)", *p)
}

type GetItemCountResult struct {
	Success int64 `thrift:"success,0"`
}

func NewGetItemCountResult() *GetItemCountResult {
	return &GetItemCountResult{}
}

func (p *GetItemCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetItemCountResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetItemCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItemCount_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetItemCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetItemCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemCountResult(%+v)", *p)
}

type RecordRatingsArgs struct {
	Key    string `thrift:"key,1"`
	UserId int64  `thrift:"userId,2"`
	ItemId int64  `thrift:"itemId,3"`
	Rating int64  `thrift:"rating,4"`
}

func NewRecordRatingsArgs() *RecordRatingsArgs {
	return &RecordRatingsArgs{}
}

func (p *RecordRatingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RecordRatingsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *RecordRatingsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserId = v
	}
	return nil
}

func (p *RecordRatingsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *RecordRatingsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Rating = v
	}
	return nil
}

func (p *RecordRatingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("recordRatings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RecordRatingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *RecordRatingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userId: %s", p, err)
	}
	return err
}

func (p *RecordRatingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemId", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:itemId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
		return fmt.Errorf("%T.itemId (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:itemId: %s", p, err)
	}
	return err
}

func (p *RecordRatingsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rating", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:rating: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Rating)); err != nil {
		return fmt.Errorf("%T.rating (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:rating: %s", p, err)
	}
	return err
}

func (p *RecordRatingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecordRatingsArgs(%+v)", *p)
}

type RecordRatingsResult struct {
}

func NewRecordRatingsResult() *RecordRatingsResult {
	return &RecordRatingsResult{}
}

func (p *RecordRatingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RecordRatingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("recordRatings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RecordRatingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecordRatingsResult(%+v)", *p)
}

type DeleteRatingsArgs struct {
	Key    string `thrift:"key,1"`
	UserId int64  `thrift:"userId,2"`
	ItemId int64  `thrift:"itemId,3"`
}

func NewDeleteRatingsArgs() *DeleteRatingsArgs {
	return &DeleteRatingsArgs{}
}

func (p *DeleteRatingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteRatingsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *DeleteRatingsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DeleteRatingsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *DeleteRatingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteRatings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteRatingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *DeleteRatingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userId: %s", p, err)
	}
	return err
}

func (p *DeleteRatingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemId", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:itemId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ItemId)); err != nil {
		return fmt.Errorf("%T.itemId (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:itemId: %s", p, err)
	}
	return err
}

func (p *DeleteRatingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRatingsArgs(%+v)", *p)
}

type DeleteRatingsResult struct {
}

func NewDeleteRatingsResult() *DeleteRatingsResult {
	return &DeleteRatingsResult{}
}

func (p *DeleteRatingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteRatingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteRatings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteRatingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRatingsResult(%+v)", *p)
}

type CreateNewUserArgs struct {
	Key          string `thrift:"key,1"`
	Username     string `thrift:"username,2"`
	Iskibitzuser bool   `thrift:"iskibitzuser,3"`
}

func NewCreateNewUserArgs() *CreateNewUserArgs {
	return &CreateNewUserArgs{}
}

func (p *CreateNewUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNewUserArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *CreateNewUserArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *CreateNewUserArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Iskibitzuser = v
	}
	return nil
}

func (p *CreateNewUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNewUser_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNewUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *CreateNewUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:username: %s", p, err)
	}
	return err
}

func (p *CreateNewUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iskibitzuser", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:iskibitzuser: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Iskibitzuser)); err != nil {
		return fmt.Errorf("%T.iskibitzuser (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:iskibitzuser: %s", p, err)
	}
	return err
}

func (p *CreateNewUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNewUserArgs(%+v)", *p)
}

type CreateNewUserResult struct {
	Success string `thrift:"success,0"`
}

func NewCreateNewUserResult() *CreateNewUserResult {
	return &CreateNewUserResult{}
}

func (p *CreateNewUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNewUserResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CreateNewUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNewUser_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNewUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CreateNewUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNewUserResult(%+v)", *p)
}

type CheckUsernameArgs struct {
	Key          string `thrift:"key,1"`
	Username     string `thrift:"username,2"`
	Iskibitzuser bool   `thrift:"iskibitzuser,3"`
}

func NewCheckUsernameArgs() *CheckUsernameArgs {
	return &CheckUsernameArgs{}
}

func (p *CheckUsernameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckUsernameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *CheckUsernameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *CheckUsernameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Iskibitzuser = v
	}
	return nil
}

func (p *CheckUsernameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkUsername_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *CheckUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:username: %s", p, err)
	}
	return err
}

func (p *CheckUsernameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iskibitzuser", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:iskibitzuser: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Iskibitzuser)); err != nil {
		return fmt.Errorf("%T.iskibitzuser (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:iskibitzuser: %s", p, err)
	}
	return err
}

func (p *CheckUsernameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckUsernameArgs(%+v)", *p)
}

type CheckUsernameResult struct {
	Success bool `thrift:"success,0"`
}

func NewCheckUsernameResult() *CheckUsernameResult {
	return &CheckUsernameResult{}
}

func (p *CheckUsernameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckUsernameResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CheckUsernameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkUsername_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CheckUsernameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckUsernameResult(%+v)", *p)
}

type CheckLoginArgs struct {
	Key          string `thrift:"key,1"`
	Username     string `thrift:"username,2"`
	Password     string `thrift:"password,3"`
	Iskibitzuser bool   `thrift:"iskibitzuser,4"`
}

func NewCheckLoginArgs() *CheckLoginArgs {
	return &CheckLoginArgs{}
}

func (p *CheckLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckLoginArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *CheckLoginArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *CheckLoginArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Password = v
	}
	return nil
}

func (p *CheckLoginArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Iskibitzuser = v
	}
	return nil
}

func (p *CheckLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkLogin_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *CheckLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:username: %s", p, err)
	}
	return err
}

func (p *CheckLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:password: %s", p, err)
	}
	return err
}

func (p *CheckLoginArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iskibitzuser", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:iskibitzuser: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Iskibitzuser)); err != nil {
		return fmt.Errorf("%T.iskibitzuser (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:iskibitzuser: %s", p, err)
	}
	return err
}

func (p *CheckLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckLoginArgs(%+v)", *p)
}

type CheckLoginResult struct {
	Success bool `thrift:"success,0"`
}

func NewCheckLoginResult() *CheckLoginResult {
	return &CheckLoginResult{}
}

func (p *CheckLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckLoginResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CheckLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkLogin_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CheckLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckLoginResult(%+v)", *p)
}

type RetrieveUserIdArgs struct {
	Key      string `thrift:"key,1"`
	Username string `thrift:"username,2"`
}

func NewRetrieveUserIdArgs() *RetrieveUserIdArgs {
	return &RetrieveUserIdArgs{}
}

func (p *RetrieveUserIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RetrieveUserIdArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *RetrieveUserIdArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *RetrieveUserIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("retrieveUserId_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RetrieveUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *RetrieveUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:username: %s", p, err)
	}
	return err
}

func (p *RetrieveUserIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RetrieveUserIdArgs(%+v)", *p)
}

type RetrieveUserIdResult struct {
	Success int64 `thrift:"success,0"`
}

func NewRetrieveUserIdResult() *RetrieveUserIdResult {
	return &RetrieveUserIdResult{}
}

func (p *RetrieveUserIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RetrieveUserIdResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *RetrieveUserIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("retrieveUserId_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RetrieveUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *RetrieveUserIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RetrieveUserIdResult(%+v)", *p)
}

type CreateNewRecommenderArgs struct {
	Username   string `thrift:"username,1"`
	PrimaryKey string `thrift:"primaryKey,2"`
	Database   string `thrift:"database,3"`
	// unused field # 4
	Table         string `thrift:"table,5"`
	Title         string `thrift:"title,6"`
	Description   string `thrift:"description,7"`
	Image         string `thrift:"image,8"`
	RatingsColumn string `thrift:"ratings_column,9"`
	ClientKey     string `thrift:"clientKey,10"`
}

func NewCreateNewRecommenderArgs() *CreateNewRecommenderArgs {
	return &CreateNewRecommenderArgs{}
}

func (p *CreateNewRecommenderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PrimaryKey = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Database = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Table = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Description = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Image = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.RatingsColumn = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.ClientKey = v
	}
	return nil
}

func (p *CreateNewRecommenderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNewRecommender_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNewRecommenderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("primaryKey", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:primaryKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrimaryKey)); err != nil {
		return fmt.Errorf("%T.primaryKey (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:primaryKey: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("database", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:database: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Database)); err != nil {
		return fmt.Errorf("%T.database (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:database: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:table: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return fmt.Errorf("%T.table (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:table: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:title: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.description (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:description: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:image: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Image)); err != nil {
		return fmt.Errorf("%T.image (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:image: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ratings_column", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:ratings_column: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RatingsColumn)); err != nil {
		return fmt.Errorf("%T.ratings_column (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:ratings_column: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientKey", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:clientKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientKey)); err != nil {
		return fmt.Errorf("%T.clientKey (10) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:clientKey: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNewRecommenderArgs(%+v)", *p)
}

type CreateNewRecommenderResult struct {
	Success bool `thrift:"success,0"`
}

func NewCreateNewRecommenderResult() *CreateNewRecommenderResult {
	return &CreateNewRecommenderResult{}
}

func (p *CreateNewRecommenderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNewRecommenderResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CreateNewRecommenderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNewRecommender_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNewRecommenderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CreateNewRecommenderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNewRecommenderResult(%+v)", *p)
}

type GetUserRatedItemsArgs struct {
	Key            string   `thrift:"key,1"`
	UserId         int64    `thrift:"userId,2"`
	DisplayColumns []string `thrift:"displayColumns,3"`
}

func NewGetUserRatedItemsArgs() *GetUserRatedItemsArgs {
	return &GetUserRatedItemsArgs{}
}

func (p *GetUserRatedItemsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserRatedItemsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetUserRatedItemsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetUserRatedItemsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DisplayColumns = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem125 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem125 = v
		}
		p.DisplayColumns = append(p.DisplayColumns, _elem125)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetUserRatedItemsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserRatedItems_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserRatedItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetUserRatedItemsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userId: %s", p, err)
	}
	return err
}

func (p *GetUserRatedItemsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.DisplayColumns != nil {
		if err := oprot.WriteFieldBegin("displayColumns", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:displayColumns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DisplayColumns)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DisplayColumns {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:displayColumns: %s", p, err)
		}
	}
	return err
}

func (p *GetUserRatedItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserRatedItemsArgs(%+v)", *p)
}

type GetUserRatedItemsResult struct {
	Success []*Item `thrift:"success,0"`
}

func NewGetUserRatedItemsResult() *GetUserRatedItemsResult {
	return &GetUserRatedItemsResult{}
}

func (p *GetUserRatedItemsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserRatedItemsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Item, 0, size)
	for i := 0; i < size; i++ {
		_elem126 := NewItem()
		if err := _elem126.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem126)
		}
		p.Success = append(p.Success, _elem126)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetUserRatedItemsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserRatedItems_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserRatedItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetUserRatedItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserRatedItemsResult(%+v)", *p)
}

type InitiateModelArgs struct {
	Key      string `thrift:"key,1"`
	Table    string `thrift:"table,2"`
	Username string `thrift:"username,3"`
	Database string `thrift:"database,4"`
}

func NewInitiateModelArgs() *InitiateModelArgs {
	return &InitiateModelArgs{}
}

func (p *InitiateModelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InitiateModelArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *InitiateModelArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Table = v
	}
	return nil
}

func (p *InitiateModelArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *InitiateModelArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Database = v
	}
	return nil
}

func (p *InitiateModelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("initiateModel_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *InitiateModelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *InitiateModelArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return fmt.Errorf("%T.table (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table: %s", p, err)
	}
	return err
}

func (p *InitiateModelArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:username: %s", p, err)
	}
	return err
}

func (p *InitiateModelArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("database", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:database: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Database)); err != nil {
		return fmt.Errorf("%T.database (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:database: %s", p, err)
	}
	return err
}

func (p *InitiateModelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InitiateModelArgs(%+v)", *p)
}

type InitiateModelResult struct {
}

func NewInitiateModelResult() *InitiateModelResult {
	return &InitiateModelResult{}
}

func (p *InitiateModelResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InitiateModelResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("initiateModel_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *InitiateModelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InitiateModelResult(%+v)", *p)
}

type GetSearchItemsArgs struct {
	Table           string   `thrift:"table,1"`
	Query           string   `thrift:"query,2"`
	ColumnsToSearch []string `thrift:"columnsToSearch,3"`
	DisplayColumns  []string `thrift:"displayColumns,4"`
}

func NewGetSearchItemsArgs() *GetSearchItemsArgs {
	return &GetSearchItemsArgs{}
}

func (p *GetSearchItemsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSearchItemsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Table = v
	}
	return nil
}

func (p *GetSearchItemsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Query = v
	}
	return nil
}

func (p *GetSearchItemsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ColumnsToSearch = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem127 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem127 = v
		}
		p.ColumnsToSearch = append(p.ColumnsToSearch, _elem127)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetSearchItemsArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DisplayColumns = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem128 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem128 = v
		}
		p.DisplayColumns = append(p.DisplayColumns, _elem128)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetSearchItemsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSearchItems_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSearchItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:table: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return fmt.Errorf("%T.table (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:table: %s", p, err)
	}
	return err
}

func (p *GetSearchItemsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:query: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return fmt.Errorf("%T.query (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:query: %s", p, err)
	}
	return err
}

func (p *GetSearchItemsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ColumnsToSearch != nil {
		if err := oprot.WriteFieldBegin("columnsToSearch", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:columnsToSearch: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnsToSearch)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.ColumnsToSearch {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:columnsToSearch: %s", p, err)
		}
	}
	return err
}

func (p *GetSearchItemsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.DisplayColumns != nil {
		if err := oprot.WriteFieldBegin("displayColumns", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:displayColumns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DisplayColumns)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DisplayColumns {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:displayColumns: %s", p, err)
		}
	}
	return err
}

func (p *GetSearchItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSearchItemsArgs(%+v)", *p)
}

type GetSearchItemsResult struct {
	Success []*Item `thrift:"success,0"`
}

func NewGetSearchItemsResult() *GetSearchItemsResult {
	return &GetSearchItemsResult{}
}

func (p *GetSearchItemsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSearchItemsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Item, 0, size)
	for i := 0; i < size; i++ {
		_elem129 := NewItem()
		if err := _elem129.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem129)
		}
		p.Success = append(p.Success, _elem129)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetSearchItemsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSearchItems_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSearchItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSearchItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSearchItemsResult(%+v)", *p)
}

type MakeOverallRatingBasedOrRandomRecommendationArgs struct {
	Key              string   `thrift:"key,1"`
	RatingColumnName string   `thrift:"ratingColumnName,2"`
	NumRecs          int64    `thrift:"numRecs,3"`
	DisplayColumns   []string `thrift:"displayColumns,4"`
}

func NewMakeOverallRatingBasedOrRandomRecommendationArgs() *MakeOverallRatingBasedOrRandomRecommendationArgs {
	return &MakeOverallRatingBasedOrRandomRecommendationArgs{}
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RatingColumnName = v
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NumRecs = v
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DisplayColumns = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem130 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem130 = v
		}
		p.DisplayColumns = append(p.DisplayColumns, _elem130)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("makeOverallRatingBasedOrRandomRecommendation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ratingColumnName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ratingColumnName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RatingColumnName)); err != nil {
		return fmt.Errorf("%T.ratingColumnName (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ratingColumnName: %s", p, err)
	}
	return err
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numRecs", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:numRecs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumRecs)); err != nil {
		return fmt.Errorf("%T.numRecs (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:numRecs: %s", p, err)
	}
	return err
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.DisplayColumns != nil {
		if err := oprot.WriteFieldBegin("displayColumns", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:displayColumns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DisplayColumns)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DisplayColumns {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:displayColumns: %s", p, err)
		}
	}
	return err
}

func (p *MakeOverallRatingBasedOrRandomRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakeOverallRatingBasedOrRandomRecommendationArgs(%+v)", *p)
}

type MakeOverallRatingBasedOrRandomRecommendationResult struct {
	Success []*Item `thrift:"success,0"`
}

func NewMakeOverallRatingBasedOrRandomRecommendationResult() *MakeOverallRatingBasedOrRandomRecommendationResult {
	return &MakeOverallRatingBasedOrRandomRecommendationResult{}
}

func (p *MakeOverallRatingBasedOrRandomRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Item, 0, size)
	for i := 0; i < size; i++ {
		_elem131 := NewItem()
		if err := _elem131.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem131)
		}
		p.Success = append(p.Success, _elem131)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("makeOverallRatingBasedOrRandomRecommendation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MakeOverallRatingBasedOrRandomRecommendationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MakeOverallRatingBasedOrRandomRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakeOverallRatingBasedOrRandomRecommendationResult(%+v)", *p)
}

type AddKibitzUserArgs struct {
	Email    string `thrift:"email,1"`
	Password string `thrift:"password,2"`
}

func NewAddKibitzUserArgs() *AddKibitzUserArgs {
	return &AddKibitzUserArgs{}
}

func (p *AddKibitzUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddKibitzUserArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Email = v
	}
	return nil
}

func (p *AddKibitzUserArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Password = v
	}
	return nil
}

func (p *AddKibitzUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addKibitzUser_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddKibitzUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:email: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return fmt.Errorf("%T.email (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:email: %s", p, err)
	}
	return err
}

func (p *AddKibitzUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:password: %s", p, err)
	}
	return err
}

func (p *AddKibitzUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddKibitzUserArgs(%+v)", *p)
}

type AddKibitzUserResult struct {
}

func NewAddKibitzUserResult() *AddKibitzUserResult {
	return &AddKibitzUserResult{}
}

func (p *AddKibitzUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddKibitzUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addKibitzUser_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddKibitzUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddKibitzUserResult(%+v)", *p)
}

type CheckCorrectDatahubLoginArgs struct {
	Username    string `thrift:"username,1"`
	Repository  string `thrift:"repository,2"`
	Table       string `thrift:"table,3"`
	PrimaryKey  string `thrift:"primary_key,4"`
	Title       string `thrift:"title,5"`
	Description string `thrift:"description,6"`
	Image       string `thrift:"image,7"`
}

func NewCheckCorrectDatahubLoginArgs() *CheckCorrectDatahubLoginArgs {
	return &CheckCorrectDatahubLoginArgs{}
}

func (p *CheckCorrectDatahubLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Repository = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Table = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.PrimaryKey = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Description = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Image = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkCorrectDatahubLogin_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckCorrectDatahubLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repository", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:repository: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Repository)); err != nil {
		return fmt.Errorf("%T.repository (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:repository: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:table: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return fmt.Errorf("%T.table (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:table: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("primary_key", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:primary_key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrimaryKey)); err != nil {
		return fmt.Errorf("%T.primary_key (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:primary_key: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:title: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.description (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:description: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:image: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Image)); err != nil {
		return fmt.Errorf("%T.image (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:image: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckCorrectDatahubLoginArgs(%+v)", *p)
}

type CheckCorrectDatahubLoginResult struct {
	Success bool `thrift:"success,0"`
}

func NewCheckCorrectDatahubLoginResult() *CheckCorrectDatahubLoginResult {
	return &CheckCorrectDatahubLoginResult{}
}

func (p *CheckCorrectDatahubLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckCorrectDatahubLoginResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CheckCorrectDatahubLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkCorrectDatahubLogin_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckCorrectDatahubLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CheckCorrectDatahubLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckCorrectDatahubLoginResult(%+v)", *p)
}

type CheckRatingsColumnArgs struct {
	Username      string `thrift:"username,1"`
	Table         string `thrift:"table,2"`
	Repository    string `thrift:"repository,3"`
	RatingsColumn string `thrift:"ratings_column,4"`
}

func NewCheckRatingsColumnArgs() *CheckRatingsColumnArgs {
	return &CheckRatingsColumnArgs{}
}

func (p *CheckRatingsColumnArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckRatingsColumnArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *CheckRatingsColumnArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Table = v
	}
	return nil
}

func (p *CheckRatingsColumnArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Repository = v
	}
	return nil
}

func (p *CheckRatingsColumnArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.RatingsColumn = v
	}
	return nil
}

func (p *CheckRatingsColumnArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkRatingsColumn_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckRatingsColumnArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *CheckRatingsColumnArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return fmt.Errorf("%T.table (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table: %s", p, err)
	}
	return err
}

func (p *CheckRatingsColumnArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repository", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:repository: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Repository)); err != nil {
		return fmt.Errorf("%T.repository (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:repository: %s", p, err)
	}
	return err
}

func (p *CheckRatingsColumnArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ratings_column", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ratings_column: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RatingsColumn)); err != nil {
		return fmt.Errorf("%T.ratings_column (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ratings_column: %s", p, err)
	}
	return err
}

func (p *CheckRatingsColumnArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckRatingsColumnArgs(%+v)", *p)
}

type CheckRatingsColumnResult struct {
	Success bool `thrift:"success,0"`
}

func NewCheckRatingsColumnResult() *CheckRatingsColumnResult {
	return &CheckRatingsColumnResult{}
}

func (p *CheckRatingsColumnResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckRatingsColumnResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CheckRatingsColumnResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkRatingsColumn_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckRatingsColumnResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CheckRatingsColumnResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckRatingsColumnResult(%+v)", *p)
}

type GetRecommendersArgs struct {
	Username string `thrift:"username,1"`
}

func NewGetRecommendersArgs() *GetRecommendersArgs {
	return &GetRecommendersArgs{}
}

func (p *GetRecommendersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRecommendersArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *GetRecommendersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecommenders_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRecommendersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *GetRecommendersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRecommendersArgs(%+v)", *p)
}

type GetRecommendersResult struct {
	Success []*Recommender `thrift:"success,0"`
}

func NewGetRecommendersResult() *GetRecommendersResult {
	return &GetRecommendersResult{}
}

func (p *GetRecommendersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRecommendersResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Recommender, 0, size)
	for i := 0; i < size; i++ {
		_elem132 := NewRecommender()
		if err := _elem132.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem132)
		}
		p.Success = append(p.Success, _elem132)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetRecommendersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecommenders_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRecommendersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRecommendersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRecommendersResult(%+v)", *p)
}

type GetProfilePictureArgs struct {
	Username string `thrift:"username,1"`
}

func NewGetProfilePictureArgs() *GetProfilePictureArgs {
	return &GetProfilePictureArgs{}
}

func (p *GetProfilePictureArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProfilePictureArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *GetProfilePictureArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfilePicture_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProfilePictureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *GetProfilePictureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProfilePictureArgs(%+v)", *p)
}

type GetProfilePictureResult struct {
	Success string `thrift:"success,0"`
}

func NewGetProfilePictureResult() *GetProfilePictureResult {
	return &GetProfilePictureResult{}
}

func (p *GetProfilePictureResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProfilePictureResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetProfilePictureResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfilePicture_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProfilePictureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetProfilePictureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProfilePictureResult(%+v)", *p)
}

type SaveFBProfilePicArgs struct {
	Username   string `thrift:"username,1"`
	FbUsername string `thrift:"fbUsername,2"`
}

func NewSaveFBProfilePicArgs() *SaveFBProfilePicArgs {
	return &SaveFBProfilePicArgs{}
}

func (p *SaveFBProfilePicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SaveFBProfilePicArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *SaveFBProfilePicArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.FbUsername = v
	}
	return nil
}

func (p *SaveFBProfilePicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("saveFBProfilePic_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SaveFBProfilePicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *SaveFBProfilePicArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fbUsername", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:fbUsername: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FbUsername)); err != nil {
		return fmt.Errorf("%T.fbUsername (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:fbUsername: %s", p, err)
	}
	return err
}

func (p *SaveFBProfilePicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveFBProfilePicArgs(%+v)", *p)
}

type SaveFBProfilePicResult struct {
}

func NewSaveFBProfilePicResult() *SaveFBProfilePicResult {
	return &SaveFBProfilePicResult{}
}

func (p *SaveFBProfilePicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SaveFBProfilePicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("saveFBProfilePic_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SaveFBProfilePicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveFBProfilePicResult(%+v)", *p)
}

type DeleteRecommenderArgs struct {
	ClientKey string `thrift:"clientKey,1"`
}

func NewDeleteRecommenderArgs() *DeleteRecommenderArgs {
	return &DeleteRecommenderArgs{}
}

func (p *DeleteRecommenderArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteRecommenderArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ClientKey = v
	}
	return nil
}

func (p *DeleteRecommenderArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteRecommender_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteRecommenderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:clientKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientKey)); err != nil {
		return fmt.Errorf("%T.clientKey (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:clientKey: %s", p, err)
	}
	return err
}

func (p *DeleteRecommenderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRecommenderArgs(%+v)", *p)
}

type DeleteRecommenderResult struct {
}

func NewDeleteRecommenderResult() *DeleteRecommenderResult {
	return &DeleteRecommenderResult{}
}

func (p *DeleteRecommenderResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteRecommenderResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteRecommender_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteRecommenderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteRecommenderResult(%+v)", *p)
}

type UpdateTemplateArgs struct {
	Username        string            `thrift:"username,1"`
	PrimaryKey      string            `thrift:"primaryKey,2"`
	Title           string            `thrift:"title,3"`
	Description     string            `thrift:"description,4"`
	Image           string            `thrift:"image,5"`
	Video           string            `thrift:"video,6"`
	ItemTypes       map[string]string `thrift:"itemTypes,7"`
	DisplayItems    []string          `thrift:"displayItems,8"`
	MaxRatingVal    int64             `thrift:"maxRatingVal,9"`
	NumRecs         int64             `thrift:"numRecs,10"`
	RecommenderName string            `thrift:"recommenderName,11"`
	ClientKey       string            `thrift:"clientKey,12"`
	Homepage        string            `thrift:"homepage,13"`
	CreatorName     string            `thrift:"creatorName,14"`
	RepoName        string            `thrift:"repoName,15"`
	TableName       string            `thrift:"tableName,16"`
	RatingsColumn   string            `thrift:"ratingsColumn,17"`
}

func NewUpdateTemplateArgs() *UpdateTemplateArgs {
	return &UpdateTemplateArgs{}
}

func (p *UpdateTemplateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTemplateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PrimaryKey = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Description = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Image = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Video = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.ItemTypes = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key133 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key133 = v
		}
		var _val134 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val134 = v
		}
		p.ItemTypes[_key133] = _val134
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *UpdateTemplateArgs) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DisplayItems = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem135 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem135 = v
		}
		p.DisplayItems = append(p.DisplayItems, _elem135)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *UpdateTemplateArgs) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.MaxRatingVal = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.NumRecs = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.RecommenderName = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.ClientKey = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.Homepage = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.CreatorName = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.RepoName = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.TableName = v
	}
	return nil
}

func (p *UpdateTemplateArgs) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.RatingsColumn = v
	}
	return nil
}

func (p *UpdateTemplateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTemplate_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTemplateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("primaryKey", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:primaryKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrimaryKey)); err != nil {
		return fmt.Errorf("%T.primaryKey (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:primaryKey: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:title: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.description (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:description: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("image", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:image: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Image)); err != nil {
		return fmt.Errorf("%T.image (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:image: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("video", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:video: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Video)); err != nil {
		return fmt.Errorf("%T.video (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:video: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if p.ItemTypes != nil {
		if err := oprot.WriteFieldBegin("itemTypes", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:itemTypes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ItemTypes)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.ItemTypes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:itemTypes: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTemplateArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if p.DisplayItems != nil {
		if err := oprot.WriteFieldBegin("displayItems", thrift.LIST, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:displayItems: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DisplayItems)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DisplayItems {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:displayItems: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTemplateArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxRatingVal", thrift.I64, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:maxRatingVal: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MaxRatingVal)); err != nil {
		return fmt.Errorf("%T.maxRatingVal (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:maxRatingVal: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numRecs", thrift.I64, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:numRecs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NumRecs)); err != nil {
		return fmt.Errorf("%T.numRecs (10) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:numRecs: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommenderName", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:recommenderName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RecommenderName)); err != nil {
		return fmt.Errorf("%T.recommenderName (11) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:recommenderName: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientKey", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:clientKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientKey)); err != nil {
		return fmt.Errorf("%T.clientKey (12) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:clientKey: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("homepage", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:homepage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Homepage)); err != nil {
		return fmt.Errorf("%T.homepage (13) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:homepage: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creatorName", thrift.STRING, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:creatorName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreatorName)); err != nil {
		return fmt.Errorf("%T.creatorName (14) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:creatorName: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repoName", thrift.STRING, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:repoName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RepoName)); err != nil {
		return fmt.Errorf("%T.repoName (15) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:repoName: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (16) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:tableName: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ratingsColumn", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:ratingsColumn: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RatingsColumn)); err != nil {
		return fmt.Errorf("%T.ratingsColumn (17) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:ratingsColumn: %s", p, err)
	}
	return err
}

func (p *UpdateTemplateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTemplateArgs(%+v)", *p)
}

type UpdateTemplateResult struct {
}

func NewUpdateTemplateResult() *UpdateTemplateResult {
	return &UpdateTemplateResult{}
}

func (p *UpdateTemplateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTemplateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTemplate_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTemplateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTemplateResult(%+v)", *p)
}

type ConfigurePrefilledUserRatingsArgs struct {
	Username      string `thrift:"username,1"`
	RepoName      string `thrift:"repoName,2"`
	PrimaryKey    string `thrift:"primaryKey,3"`
	ItemTable     string `thrift:"itemTable,4"`
	TableName     string `thrift:"tableName,5"`
	UserIdCol     string `thrift:"userIdCol,6"`
	ItemIdCol     string `thrift:"itemIdCol,7"`
	UserRatingCol string `thrift:"userRatingCol,8"`
}

func NewConfigurePrefilledUserRatingsArgs() *ConfigurePrefilledUserRatingsArgs {
	return &ConfigurePrefilledUserRatingsArgs{}
}

func (p *ConfigurePrefilledUserRatingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RepoName = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.PrimaryKey = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ItemTable = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.TableName = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.UserIdCol = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.ItemIdCol = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.UserRatingCol = v
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("configurePrefilledUserRatings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repoName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:repoName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RepoName)); err != nil {
		return fmt.Errorf("%T.repoName (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:repoName: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("primaryKey", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:primaryKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrimaryKey)); err != nil {
		return fmt.Errorf("%T.primaryKey (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:primaryKey: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemTable", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:itemTable: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ItemTable)); err != nil {
		return fmt.Errorf("%T.itemTable (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:itemTable: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:tableName: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userIdCol", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:userIdCol: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserIdCol)); err != nil {
		return fmt.Errorf("%T.userIdCol (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:userIdCol: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemIdCol", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:itemIdCol: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ItemIdCol)); err != nil {
		return fmt.Errorf("%T.itemIdCol (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:itemIdCol: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userRatingCol", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:userRatingCol: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserRatingCol)); err != nil {
		return fmt.Errorf("%T.userRatingCol (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:userRatingCol: %s", p, err)
	}
	return err
}

func (p *ConfigurePrefilledUserRatingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigurePrefilledUserRatingsArgs(%+v)", *p)
}

type ConfigurePrefilledUserRatingsResult struct {
}

func NewConfigurePrefilledUserRatingsResult() *ConfigurePrefilledUserRatingsResult {
	return &ConfigurePrefilledUserRatingsResult{}
}

func (p *ConfigurePrefilledUserRatingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("configurePrefilledUserRatings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfigurePrefilledUserRatingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigurePrefilledUserRatingsResult(%+v)", *p)
}

type GetTablesArgs struct {
	Username string `thrift:"username,1"`
	Repo     string `thrift:"repo,2"`
}

func NewGetTablesArgs() *GetTablesArgs {
	return &GetTablesArgs{}
}

func (p *GetTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *GetTablesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Repo = v
	}
	return nil
}

func (p *GetTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:repo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Repo)); err != nil {
		return fmt.Errorf("%T.repo (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:repo: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesArgs(%+v)", *p)
}

type GetTablesResult struct {
	Success []string `thrift:"success,0"`
}

func NewGetTablesResult() *GetTablesResult {
	return &GetTablesResult{}
}

func (p *GetTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem136 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem136 = v
		}
		p.Success = append(p.Success, _elem136)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesResult(%+v)", *p)
}

type GetColumnsArgs struct {
	Username string `thrift:"username,1"`
	Repo     string `thrift:"repo,2"`
	Table    string `thrift:"table,3"`
}

func NewGetColumnsArgs() *GetColumnsArgs {
	return &GetColumnsArgs{}
}

func (p *GetColumnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetColumnsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *GetColumnsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Repo = v
	}
	return nil
}

func (p *GetColumnsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Table = v
	}
	return nil
}

func (p *GetColumnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getColumns_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetColumnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:username: %s", p, err)
	}
	return err
}

func (p *GetColumnsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repo", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:repo: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Repo)); err != nil {
		return fmt.Errorf("%T.repo (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:repo: %s", p, err)
	}
	return err
}

func (p *GetColumnsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:table: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return fmt.Errorf("%T.table (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:table: %s", p, err)
	}
	return err
}

func (p *GetColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetColumnsArgs(%+v)", *p)
}

type GetColumnsResult struct {
	Success []string `thrift:"success,0"`
}

func NewGetColumnsResult() *GetColumnsResult {
	return &GetColumnsResult{}
}

func (p *GetColumnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetColumnsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem137 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem137 = v
		}
		p.Success = append(p.Success, _elem137)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetColumnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getColumns_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetColumnsResult(%+v)", *p)
}
