// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "kibitz"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void createNewIndividualServer(string key)")
  fmt.Fprintln(os.Stderr, "  void terminateSession(string key)")
  fmt.Fprintln(os.Stderr, "   makeRecommendation(string key, i64 userId, i64 numRecs, bool isBoolean,  displayColumns)")
  fmt.Fprintln(os.Stderr, "   makeItemBasedRecommendations(string key, i64 userId, i64 numRecs,  displayColumns)")
  fmt.Fprintln(os.Stderr, "   getPageItems(string key, i64 page, i64 numPerPage,  displayColumns)")
  fmt.Fprintln(os.Stderr, "  i64 getItemCount(string key)")
  fmt.Fprintln(os.Stderr, "  void recordRatings(string key, i64 userId, i64 itemId, i64 rating)")
  fmt.Fprintln(os.Stderr, "  void deleteRatings(string key, i64 userId, i64 itemId)")
  fmt.Fprintln(os.Stderr, "  string createNewUser(string key, string username, bool iskibitzuser)")
  fmt.Fprintln(os.Stderr, "  bool checkUsername(string key, string username, bool iskibitzuser)")
  fmt.Fprintln(os.Stderr, "  bool checkLogin(string key, string username, string password, bool iskibitzuser)")
  fmt.Fprintln(os.Stderr, "  i64 retrieveUserId(string key, string username)")
  fmt.Fprintln(os.Stderr, "  bool createNewRecommender(string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey)")
  fmt.Fprintln(os.Stderr, "   getUserRatedItems(string key, i64 userId,  displayColumns)")
  fmt.Fprintln(os.Stderr, "  void initiateModel(string key, string table, string username, string database)")
  fmt.Fprintln(os.Stderr, "   getSearchItems(string table, string query,  columnsToSearch,  displayColumns)")
  fmt.Fprintln(os.Stderr, "   makeOverallRatingBasedOrRandomRecommendation(string key, string ratingColumnName, i64 numRecs,  displayColumns)")
  fmt.Fprintln(os.Stderr, "  void addKibitzUser(string email, string password)")
  fmt.Fprintln(os.Stderr, "  bool checkCorrectDatahubLogin(string username, string repository, string table, string primary_key, string title, string description, string image)")
  fmt.Fprintln(os.Stderr, "  bool checkRatingsColumn(string username, string table, string repository, string ratings_column)")
  fmt.Fprintln(os.Stderr, "   getRecommenders(string username)")
  fmt.Fprintln(os.Stderr, "  string getProfilePicture(string username)")
  fmt.Fprintln(os.Stderr, "  void saveFBProfilePic(string username, string fbUsername)")
  fmt.Fprintln(os.Stderr, "  void deleteRecommender(string clientKey)")
  fmt.Fprintln(os.Stderr, "  void updateTemplate(string username, string primaryKey, string title, string description, string image, string video,  itemTypes,  displayItems, i64 maxRatingVal, i64 numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn)")
  fmt.Fprintln(os.Stderr, "  void configurePrefilledUserRatings(string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol)")
  fmt.Fprintln(os.Stderr, "   getTables(string username, string repo)")
  fmt.Fprintln(os.Stderr, "   getColumns(string username, string repo, string table)")
  fmt.Fprintln(os.Stderr, "  string getFirstRepo(string username)")
  fmt.Fprintln(os.Stderr, "  i64 getNumRepos(string username)")
  fmt.Fprintln(os.Stderr, "   getAllRepos(string username)")
  fmt.Fprintln(os.Stderr, "  void saveCSSData(string path, string data)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := kibitz.NewRecommenderServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createNewIndividualServer":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateNewIndividualServer requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CreateNewIndividualServer(value0))
    fmt.Print("\n")
    break
  case "terminateSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TerminateSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.TerminateSession(value0))
    fmt.Print("\n")
    break
  case "makeRecommendation":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "MakeRecommendation requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err94 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err94 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err95 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err95 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg97 := flag.Arg(5)
    mbTrans98 := thrift.NewTMemoryBufferLen(len(arg97))
    defer mbTrans98.Close()
    _, err99 := mbTrans98.WriteString(arg97)
    if err99 != nil { 
      Usage()
      return
    }
    factory100 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt101 := factory100.GetProtocol(mbTrans98)
    containerStruct4 := kibitz.NewMakeRecommendationArgs()
    err102 := containerStruct4.ReadField5(jsProt101)
    if err102 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.DisplayColumns
    value4 := argvalue4
    fmt.Print(client.MakeRecommendation(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "makeItemBasedRecommendations":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MakeItemBasedRecommendations requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err104 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err104 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err105 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err105 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg106 := flag.Arg(4)
    mbTrans107 := thrift.NewTMemoryBufferLen(len(arg106))
    defer mbTrans107.Close()
    _, err108 := mbTrans107.WriteString(arg106)
    if err108 != nil { 
      Usage()
      return
    }
    factory109 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt110 := factory109.GetProtocol(mbTrans107)
    containerStruct3 := kibitz.NewMakeItemBasedRecommendationsArgs()
    err111 := containerStruct3.ReadField4(jsProt110)
    if err111 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.DisplayColumns
    value3 := argvalue3
    fmt.Print(client.MakeItemBasedRecommendations(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getPageItems":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPageItems requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err113 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err113 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err114 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err114 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg115 := flag.Arg(4)
    mbTrans116 := thrift.NewTMemoryBufferLen(len(arg115))
    defer mbTrans116.Close()
    _, err117 := mbTrans116.WriteString(arg115)
    if err117 != nil { 
      Usage()
      return
    }
    factory118 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt119 := factory118.GetProtocol(mbTrans116)
    containerStruct3 := kibitz.NewGetPageItemsArgs()
    err120 := containerStruct3.ReadField4(jsProt119)
    if err120 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.DisplayColumns
    value3 := argvalue3
    fmt.Print(client.GetPageItems(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getItemCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetItemCount requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetItemCount(value0))
    fmt.Print("\n")
    break
  case "recordRatings":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RecordRatings requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err123 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err123 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err124 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err124 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err125 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err125 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RecordRatings(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteRatings":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteRatings requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err127 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err127 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err128 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err128 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DeleteRatings(value0, value1, value2))
    fmt.Print("\n")
    break
  case "createNewUser":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateNewUser requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.CreateNewUser(value0, value1, value2))
    fmt.Print("\n")
    break
  case "checkUsername":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CheckUsername requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.CheckUsername(value0, value1, value2))
    fmt.Print("\n")
    break
  case "checkLogin":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CheckLogin requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.CheckLogin(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "retrieveUserId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RetrieveUserId requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RetrieveUserId(value0, value1))
    fmt.Print("\n")
    break
  case "createNewRecommender":
    if flag.NArg() - 1 != 9 {
      fmt.Fprintln(os.Stderr, "CreateNewRecommender requires 9 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    argvalue8 := flag.Arg(9)
    value8 := argvalue8
    fmt.Print(client.CreateNewRecommender(value0, value1, value2, value3, value4, value5, value6, value7, value8))
    fmt.Print("\n")
    break
  case "getUserRatedItems":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetUserRatedItems requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err151 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err151 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg152 := flag.Arg(3)
    mbTrans153 := thrift.NewTMemoryBufferLen(len(arg152))
    defer mbTrans153.Close()
    _, err154 := mbTrans153.WriteString(arg152)
    if err154 != nil { 
      Usage()
      return
    }
    factory155 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt156 := factory155.GetProtocol(mbTrans153)
    containerStruct2 := kibitz.NewGetUserRatedItemsArgs()
    err157 := containerStruct2.ReadField3(jsProt156)
    if err157 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.DisplayColumns
    value2 := argvalue2
    fmt.Print(client.GetUserRatedItems(value0, value1, value2))
    fmt.Print("\n")
    break
  case "initiateModel":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "InitiateModel requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.InitiateModel(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getSearchItems":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetSearchItems requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg164 := flag.Arg(3)
    mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
    defer mbTrans165.Close()
    _, err166 := mbTrans165.WriteString(arg164)
    if err166 != nil { 
      Usage()
      return
    }
    factory167 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt168 := factory167.GetProtocol(mbTrans165)
    containerStruct2 := kibitz.NewGetSearchItemsArgs()
    err169 := containerStruct2.ReadField3(jsProt168)
    if err169 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ColumnsToSearch
    value2 := argvalue2
    arg170 := flag.Arg(4)
    mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
    defer mbTrans171.Close()
    _, err172 := mbTrans171.WriteString(arg170)
    if err172 != nil { 
      Usage()
      return
    }
    factory173 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt174 := factory173.GetProtocol(mbTrans171)
    containerStruct3 := kibitz.NewGetSearchItemsArgs()
    err175 := containerStruct3.ReadField4(jsProt174)
    if err175 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.DisplayColumns
    value3 := argvalue3
    fmt.Print(client.GetSearchItems(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "makeOverallRatingBasedOrRandomRecommendation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MakeOverallRatingBasedOrRandomRecommendation requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err178 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err178 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg179 := flag.Arg(4)
    mbTrans180 := thrift.NewTMemoryBufferLen(len(arg179))
    defer mbTrans180.Close()
    _, err181 := mbTrans180.WriteString(arg179)
    if err181 != nil { 
      Usage()
      return
    }
    factory182 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt183 := factory182.GetProtocol(mbTrans180)
    containerStruct3 := kibitz.NewMakeOverallRatingBasedOrRandomRecommendationArgs()
    err184 := containerStruct3.ReadField4(jsProt183)
    if err184 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.DisplayColumns
    value3 := argvalue3
    fmt.Print(client.MakeOverallRatingBasedOrRandomRecommendation(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "addKibitzUser":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddKibitzUser requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddKibitzUser(value0, value1))
    fmt.Print("\n")
    break
  case "checkCorrectDatahubLogin":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CheckCorrectDatahubLogin requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.CheckCorrectDatahubLogin(value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "checkRatingsColumn":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CheckRatingsColumn requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.CheckRatingsColumn(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRecommenders":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecommenders requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRecommenders(value0))
    fmt.Print("\n")
    break
  case "getProfilePicture":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfilePicture requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProfilePicture(value0))
    fmt.Print("\n")
    break
  case "saveFBProfilePic":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SaveFBProfilePic requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SaveFBProfilePic(value0, value1))
    fmt.Print("\n")
    break
  case "deleteRecommender":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteRecommender requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DeleteRecommender(value0))
    fmt.Print("\n")
    break
  case "updateTemplate":
    if flag.NArg() - 1 != 17 {
      fmt.Fprintln(os.Stderr, "UpdateTemplate requires 17 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    arg209 := flag.Arg(7)
    mbTrans210 := thrift.NewTMemoryBufferLen(len(arg209))
    defer mbTrans210.Close()
    _, err211 := mbTrans210.WriteString(arg209)
    if err211 != nil { 
      Usage()
      return
    }
    factory212 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt213 := factory212.GetProtocol(mbTrans210)
    containerStruct6 := kibitz.NewUpdateTemplateArgs()
    err214 := containerStruct6.ReadField7(jsProt213)
    if err214 != nil {
      Usage()
      return
    }
    argvalue6 := containerStruct6.ItemTypes
    value6 := argvalue6
    arg215 := flag.Arg(8)
    mbTrans216 := thrift.NewTMemoryBufferLen(len(arg215))
    defer mbTrans216.Close()
    _, err217 := mbTrans216.WriteString(arg215)
    if err217 != nil { 
      Usage()
      return
    }
    factory218 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt219 := factory218.GetProtocol(mbTrans216)
    containerStruct7 := kibitz.NewUpdateTemplateArgs()
    err220 := containerStruct7.ReadField8(jsProt219)
    if err220 != nil {
      Usage()
      return
    }
    argvalue7 := containerStruct7.DisplayItems
    value7 := argvalue7
    argvalue8, err221 := (strconv.ParseInt(flag.Arg(9), 10, 64))
    if err221 != nil {
      Usage()
      return
    }
    value8 := argvalue8
    argvalue9, err222 := (strconv.ParseInt(flag.Arg(10), 10, 64))
    if err222 != nil {
      Usage()
      return
    }
    value9 := argvalue9
    argvalue10 := flag.Arg(11)
    value10 := argvalue10
    argvalue11 := flag.Arg(12)
    value11 := argvalue11
    argvalue12 := flag.Arg(13)
    value12 := argvalue12
    argvalue13 := flag.Arg(14)
    value13 := argvalue13
    argvalue14 := flag.Arg(15)
    value14 := argvalue14
    argvalue15 := flag.Arg(16)
    value15 := argvalue15
    argvalue16 := flag.Arg(17)
    value16 := argvalue16
    fmt.Print(client.UpdateTemplate(value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16))
    fmt.Print("\n")
    break
  case "configurePrefilledUserRatings":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "ConfigurePrefilledUserRatings requires 8 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    fmt.Print(client.ConfigurePrefilledUserRatings(value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "getTables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(value0, value1))
    fmt.Print("\n")
    break
  case "getColumns":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetColumns requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetColumns(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getFirstRepo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFirstRepo requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetFirstRepo(value0))
    fmt.Print("\n")
    break
  case "getNumRepos":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNumRepos requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetNumRepos(value0))
    fmt.Print("\n")
    break
  case "getAllRepos":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllRepos requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllRepos(value0))
    fmt.Print("\n")
    break
  case "saveCSSData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SaveCSSData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SaveCSSData(value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
