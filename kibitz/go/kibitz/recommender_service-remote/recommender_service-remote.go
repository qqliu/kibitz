// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"kibitz"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void createNewIndividualServer(string key)")
	fmt.Fprintln(os.Stderr, "  void terminateSession(string key)")
	fmt.Fprintln(os.Stderr, "   makeRecommendation(string key, i64 userId, i64 numRecs, bool isBoolean,  displayColumns)")
	fmt.Fprintln(os.Stderr, "   makeItemBasedRecommendations(string key, i64 userId, i64 numRecs,  displayColumns)")
	fmt.Fprintln(os.Stderr, "   getPageItems(string key, i64 page, i64 numPerPage,  displayColumns)")
	fmt.Fprintln(os.Stderr, "  i64 getItemCount(string key)")
	fmt.Fprintln(os.Stderr, "  void recordRatings(string key, i64 userId, i64 itemId, i64 rating)")
	fmt.Fprintln(os.Stderr, "  void deleteRatings(string key, i64 userId, i64 itemId)")
	fmt.Fprintln(os.Stderr, "  string createNewUser(string key, string username, bool iskibitzuser)")
	fmt.Fprintln(os.Stderr, "  bool checkUsername(string key, string username, bool iskibitzuser)")
	fmt.Fprintln(os.Stderr, "  bool checkLogin(string key, string username, string password, bool iskibitzuser)")
	fmt.Fprintln(os.Stderr, "  i64 retrieveUserId(string key, string username)")
	fmt.Fprintln(os.Stderr, "  bool createNewRecommender(string username, string primaryKey, string database, string table, string title, string description, string image, string ratings_column, string clientKey)")
	fmt.Fprintln(os.Stderr, "   getUserRatedItems(string key, i64 userId,  displayColumns)")
	fmt.Fprintln(os.Stderr, "  void initiateModel(string key, string table, string username, string database)")
	fmt.Fprintln(os.Stderr, "   getSearchItems(string table, string query,  columnsToSearch,  displayColumns)")
	fmt.Fprintln(os.Stderr, "   makeOverallRatingBasedOrRandomRecommendation(string key, string ratingColumnName, i64 numRecs,  displayColumns)")
	fmt.Fprintln(os.Stderr, "  void addKibitzUser(string email, string password)")
	fmt.Fprintln(os.Stderr, "  bool checkCorrectDatahubLogin(string username, string repository, string table, string primary_key, string title, string description, string image)")
	fmt.Fprintln(os.Stderr, "  bool checkRatingsColumn(string username, string table, string repository, string ratings_column)")
	fmt.Fprintln(os.Stderr, "   getRecommenders(string username)")
	fmt.Fprintln(os.Stderr, "  string getProfilePicture(string username)")
	fmt.Fprintln(os.Stderr, "  void saveFBProfilePic(string username, string fbUsername)")
	fmt.Fprintln(os.Stderr, "  void deleteRecommender(string clientKey)")
	fmt.Fprintln(os.Stderr, "  void updateTemplate(string username, string primaryKey, string title, string description, string image, string video,  itemTypes,  displayItems, i64 maxRatingVal, i64 numRecs, string recommenderName, string clientKey, string homepage, string creatorName, string repoName, string tableName, string ratingsColumn)")
	fmt.Fprintln(os.Stderr, "  void configurePrefilledUserRatings(string username, string repoName, string primaryKey, string itemTable, string tableName, string userIdCol, string itemIdCol, string userRatingCol)")
	fmt.Fprintln(os.Stderr, "   getTables(string username, string repo)")
	fmt.Fprintln(os.Stderr, "   getColumns(string username, string repo, string table)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := kibitz.NewRecommenderServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "createNewIndividualServer":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateNewIndividualServer requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CreateNewIndividualServer(value0))
		fmt.Print("\n")
		break
	case "terminateSession":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TerminateSession requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.TerminateSession(value0))
		fmt.Print("\n")
		break
	case "makeRecommendation":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "MakeRecommendation requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err141 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err141 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err142 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err142 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg144 := flag.Arg(5)
		mbTrans145 := thrift.NewTMemoryBufferLen(len(arg144))
		defer mbTrans145.Close()
		_, err146 := mbTrans145.WriteString(arg144)
		if err146 != nil {
			Usage()
			return
		}
		factory147 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt148 := factory147.GetProtocol(mbTrans145)
		containerStruct4 := kibitz.NewMakeRecommendationArgs()
		err149 := containerStruct4.ReadField5(jsProt148)
		if err149 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.DisplayColumns
		value4 := argvalue4
		fmt.Print(client.MakeRecommendation(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "makeItemBasedRecommendations":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MakeItemBasedRecommendations requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err151 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err151 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err152 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err152 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg153 := flag.Arg(4)
		mbTrans154 := thrift.NewTMemoryBufferLen(len(arg153))
		defer mbTrans154.Close()
		_, err155 := mbTrans154.WriteString(arg153)
		if err155 != nil {
			Usage()
			return
		}
		factory156 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt157 := factory156.GetProtocol(mbTrans154)
		containerStruct3 := kibitz.NewMakeItemBasedRecommendationsArgs()
		err158 := containerStruct3.ReadField4(jsProt157)
		if err158 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.DisplayColumns
		value3 := argvalue3
		fmt.Print(client.MakeItemBasedRecommendations(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getPageItems":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPageItems requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err160 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err160 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err161 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err161 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg162 := flag.Arg(4)
		mbTrans163 := thrift.NewTMemoryBufferLen(len(arg162))
		defer mbTrans163.Close()
		_, err164 := mbTrans163.WriteString(arg162)
		if err164 != nil {
			Usage()
			return
		}
		factory165 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt166 := factory165.GetProtocol(mbTrans163)
		containerStruct3 := kibitz.NewGetPageItemsArgs()
		err167 := containerStruct3.ReadField4(jsProt166)
		if err167 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.DisplayColumns
		value3 := argvalue3
		fmt.Print(client.GetPageItems(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getItemCount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetItemCount requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetItemCount(value0))
		fmt.Print("\n")
		break
	case "recordRatings":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RecordRatings requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err170 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err170 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err171 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err171 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3, err172 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err172 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RecordRatings(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteRatings":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteRatings requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err174 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err174 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err175 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err175 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.DeleteRatings(value0, value1, value2))
		fmt.Print("\n")
		break
	case "createNewUser":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CreateNewUser requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.CreateNewUser(value0, value1, value2))
		fmt.Print("\n")
		break
	case "checkUsername":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CheckUsername requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.CheckUsername(value0, value1, value2))
		fmt.Print("\n")
		break
	case "checkLogin":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "CheckLogin requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.CheckLogin(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "retrieveUserId":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RetrieveUserId requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RetrieveUserId(value0, value1))
		fmt.Print("\n")
		break
	case "createNewRecommender":
		if flag.NArg()-1 != 9 {
			fmt.Fprintln(os.Stderr, "CreateNewRecommender requires 9 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		argvalue7 := flag.Arg(8)
		value7 := argvalue7
		argvalue8 := flag.Arg(9)
		value8 := argvalue8
		fmt.Print(client.CreateNewRecommender(value0, value1, value2, value3, value4, value5, value6, value7, value8))
		fmt.Print("\n")
		break
	case "getUserRatedItems":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetUserRatedItems requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err198 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err198 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg199 := flag.Arg(3)
		mbTrans200 := thrift.NewTMemoryBufferLen(len(arg199))
		defer mbTrans200.Close()
		_, err201 := mbTrans200.WriteString(arg199)
		if err201 != nil {
			Usage()
			return
		}
		factory202 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt203 := factory202.GetProtocol(mbTrans200)
		containerStruct2 := kibitz.NewGetUserRatedItemsArgs()
		err204 := containerStruct2.ReadField3(jsProt203)
		if err204 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.DisplayColumns
		value2 := argvalue2
		fmt.Print(client.GetUserRatedItems(value0, value1, value2))
		fmt.Print("\n")
		break
	case "initiateModel":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "InitiateModel requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.InitiateModel(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getSearchItems":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetSearchItems requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg211 := flag.Arg(3)
		mbTrans212 := thrift.NewTMemoryBufferLen(len(arg211))
		defer mbTrans212.Close()
		_, err213 := mbTrans212.WriteString(arg211)
		if err213 != nil {
			Usage()
			return
		}
		factory214 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt215 := factory214.GetProtocol(mbTrans212)
		containerStruct2 := kibitz.NewGetSearchItemsArgs()
		err216 := containerStruct2.ReadField3(jsProt215)
		if err216 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ColumnsToSearch
		value2 := argvalue2
		arg217 := flag.Arg(4)
		mbTrans218 := thrift.NewTMemoryBufferLen(len(arg217))
		defer mbTrans218.Close()
		_, err219 := mbTrans218.WriteString(arg217)
		if err219 != nil {
			Usage()
			return
		}
		factory220 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt221 := factory220.GetProtocol(mbTrans218)
		containerStruct3 := kibitz.NewGetSearchItemsArgs()
		err222 := containerStruct3.ReadField4(jsProt221)
		if err222 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.DisplayColumns
		value3 := argvalue3
		fmt.Print(client.GetSearchItems(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "makeOverallRatingBasedOrRandomRecommendation":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MakeOverallRatingBasedOrRandomRecommendation requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err225 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err225 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg226 := flag.Arg(4)
		mbTrans227 := thrift.NewTMemoryBufferLen(len(arg226))
		defer mbTrans227.Close()
		_, err228 := mbTrans227.WriteString(arg226)
		if err228 != nil {
			Usage()
			return
		}
		factory229 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt230 := factory229.GetProtocol(mbTrans227)
		containerStruct3 := kibitz.NewMakeOverallRatingBasedOrRandomRecommendationArgs()
		err231 := containerStruct3.ReadField4(jsProt230)
		if err231 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.DisplayColumns
		value3 := argvalue3
		fmt.Print(client.MakeOverallRatingBasedOrRandomRecommendation(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "addKibitzUser":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddKibitzUser requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddKibitzUser(value0, value1))
		fmt.Print("\n")
		break
	case "checkCorrectDatahubLogin":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "CheckCorrectDatahubLogin requires 7 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.CheckCorrectDatahubLogin(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "checkRatingsColumn":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "CheckRatingsColumn requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.CheckRatingsColumn(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRecommenders":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRecommenders requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetRecommenders(value0))
		fmt.Print("\n")
		break
	case "getProfilePicture":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProfilePicture requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetProfilePicture(value0))
		fmt.Print("\n")
		break
	case "saveFBProfilePic":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SaveFBProfilePic requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SaveFBProfilePic(value0, value1))
		fmt.Print("\n")
		break
	case "deleteRecommender":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteRecommender requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DeleteRecommender(value0))
		fmt.Print("\n")
		break
	case "updateTemplate":
		if flag.NArg()-1 != 17 {
			fmt.Fprintln(os.Stderr, "UpdateTemplate requires 17 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		arg256 := flag.Arg(7)
		mbTrans257 := thrift.NewTMemoryBufferLen(len(arg256))
		defer mbTrans257.Close()
		_, err258 := mbTrans257.WriteString(arg256)
		if err258 != nil {
			Usage()
			return
		}
		factory259 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt260 := factory259.GetProtocol(mbTrans257)
		containerStruct6 := kibitz.NewUpdateTemplateArgs()
		err261 := containerStruct6.ReadField7(jsProt260)
		if err261 != nil {
			Usage()
			return
		}
		argvalue6 := containerStruct6.ItemTypes
		value6 := argvalue6
		arg262 := flag.Arg(8)
		mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
		defer mbTrans263.Close()
		_, err264 := mbTrans263.WriteString(arg262)
		if err264 != nil {
			Usage()
			return
		}
		factory265 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt266 := factory265.GetProtocol(mbTrans263)
		containerStruct7 := kibitz.NewUpdateTemplateArgs()
		err267 := containerStruct7.ReadField8(jsProt266)
		if err267 != nil {
			Usage()
			return
		}
		argvalue7 := containerStruct7.DisplayItems
		value7 := argvalue7
		argvalue8, err268 := (strconv.ParseInt(flag.Arg(9), 10, 64))
		if err268 != nil {
			Usage()
			return
		}
		value8 := argvalue8
		argvalue9, err269 := (strconv.ParseInt(flag.Arg(10), 10, 64))
		if err269 != nil {
			Usage()
			return
		}
		value9 := argvalue9
		argvalue10 := flag.Arg(11)
		value10 := argvalue10
		argvalue11 := flag.Arg(12)
		value11 := argvalue11
		argvalue12 := flag.Arg(13)
		value12 := argvalue12
		argvalue13 := flag.Arg(14)
		value13 := argvalue13
		argvalue14 := flag.Arg(15)
		value14 := argvalue14
		argvalue15 := flag.Arg(16)
		value15 := argvalue15
		argvalue16 := flag.Arg(17)
		value16 := argvalue16
		fmt.Print(client.UpdateTemplate(value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16))
		fmt.Print("\n")
		break
	case "configurePrefilledUserRatings":
		if flag.NArg()-1 != 8 {
			fmt.Fprintln(os.Stderr, "ConfigurePrefilledUserRatings requires 8 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		argvalue7 := flag.Arg(8)
		value7 := argvalue7
		fmt.Print(client.ConfigurePrefilledUserRatings(value0, value1, value2, value3, value4, value5, value6, value7))
		fmt.Print("\n")
		break
	case "getTables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(value0, value1))
		fmt.Print("\n")
		break
	case "getColumns":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetColumns requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetColumns(value0, value1, value2))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
