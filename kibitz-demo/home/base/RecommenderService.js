//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

kibitz.RecommenderService_createNewIndividualServer_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_createNewIndividualServer_args.prototype = {};
kibitz.RecommenderService_createNewIndividualServer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewIndividualServer_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_result = function(args) {
};
kibitz.RecommenderService_createNewIndividualServer_result.prototype = {};
kibitz.RecommenderService_createNewIndividualServer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewIndividualServer_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewIndividualServer_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_terminateSession_args.prototype = {};
kibitz.RecommenderService_terminateSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_terminateSession_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_result = function(args) {
};
kibitz.RecommenderService_terminateSession_result.prototype = {};
kibitz.RecommenderService_terminateSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_terminateSession_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_terminateSession_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_args = function(args) {
  this.key = null;
  this.userId = null;
  this.numRecs = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.numRecs !== undefined) {
      this.numRecs = args.numRecs;
    }
  }
};
kibitz.RecommenderService_makeRecommendation_args.prototype = {};
kibitz.RecommenderService_makeRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRecs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeRecommendation_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.numRecs !== null && this.numRecs !== undefined) {
    output.writeFieldBegin('numRecs', Thrift.Type.I32, 3);
    output.writeI32(this.numRecs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_makeRecommendation_result.prototype = {};
kibitz.RecommenderService_makeRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new kibitz.Item();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_makeRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_makeRecommendation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getItems_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
kibitz.RecommenderService_getItems_args.prototype = {};
kibitz.RecommenderService_getItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getItems_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getItems_result.prototype = {};
kibitz.RecommenderService_getItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new kibitz.Item();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_args = function(args) {
  this.key = null;
  this.userId = null;
  this.itemId = null;
  this.rating = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
    if (args.rating !== undefined) {
      this.rating = args.rating;
    }
  }
};
kibitz.RecommenderService_recordRatings_args.prototype = {};
kibitz.RecommenderService_recordRatings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.itemId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rating = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_recordRatings_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I32, 3);
    output.writeI32(this.itemId);
    output.writeFieldEnd();
  }
  if (this.rating !== null && this.rating !== undefined) {
    output.writeFieldBegin('rating', Thrift.Type.I32, 4);
    output.writeI32(this.rating);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_result = function(args) {
};
kibitz.RecommenderService_recordRatings_result.prototype = {};
kibitz.RecommenderService_recordRatings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_recordRatings_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_recordRatings_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_args = function(args) {
  this.key = null;
  this.userId = null;
  this.itemId = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
  }
};
kibitz.RecommenderService_deleteRatings_args.prototype = {};
kibitz.RecommenderService_deleteRatings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.itemId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRatings_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I32, 3);
    output.writeI32(this.itemId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_result = function(args) {
};
kibitz.RecommenderService_deleteRatings_result.prototype = {};
kibitz.RecommenderService_deleteRatings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_deleteRatings_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_deleteRatings_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_args = function(args) {
  this.key = null;
  this.username = null;
  this.email = null;
  this.password = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_createNewUser_args.prototype = {};
kibitz.RecommenderService_createNewUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewUser_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 5);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_createNewUser_result.prototype = {};
kibitz.RecommenderService_createNewUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewUser_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_args = function(args) {
  this.key = null;
  this.username = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_checkUsername_args.prototype = {};
kibitz.RecommenderService_checkUsername_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkUsername_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 3);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkUsername_result.prototype = {};
kibitz.RecommenderService_checkUsername_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkUsername_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkUsername_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_args = function(args) {
  this.key = null;
  this.username = null;
  this.password = null;
  this.iskibitzuser = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.iskibitzuser !== undefined) {
      this.iskibitzuser = args.iskibitzuser;
    }
  }
};
kibitz.RecommenderService_checkLogin_args.prototype = {};
kibitz.RecommenderService_checkLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.iskibitzuser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkLogin_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.iskibitzuser !== null && this.iskibitzuser !== undefined) {
    output.writeFieldBegin('iskibitzuser', Thrift.Type.BOOL, 4);
    output.writeBool(this.iskibitzuser);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_checkLogin_result.prototype = {};
kibitz.RecommenderService_checkLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_checkLogin_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_checkLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_args = function(args) {
  this.key = null;
  this.username = null;
  this.password = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
kibitz.RecommenderService_retrieveUserId_args.prototype = {};
kibitz.RecommenderService_retrieveUserId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_retrieveUserId_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_retrieveUserId_result.prototype = {};
kibitz.RecommenderService_retrieveUserId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_retrieveUserId_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_retrieveUserId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_args = function(args) {
  this.username = null;
  this.password = null;
  this.database = null;
  this.table = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
kibitz.RecommenderService_createNewRecommender_args.prototype = {};
kibitz.RecommenderService_createNewRecommender_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewRecommender_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 3);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 4);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_createNewRecommender_result.prototype = {};
kibitz.RecommenderService_createNewRecommender_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_createNewRecommender_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_createNewRecommender_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_args = function(args) {
  this.key = null;
  this.userId = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
kibitz.RecommenderService_getUserRatedItems_args.prototype = {};
kibitz.RecommenderService_getUserRatedItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getUserRatedItems_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
kibitz.RecommenderService_getUserRatedItems_result.prototype = {};
kibitz.RecommenderService_getUserRatedItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new kibitz.Item();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_getUserRatedItems_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_getUserRatedItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_args = function(args) {
  this.key = null;
  this.table = null;
  this.username = null;
  this.password = null;
  this.database = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
  }
};
kibitz.RecommenderService_initiateModel_args.prototype = {};
kibitz.RecommenderService_initiateModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_args.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_initiateModel_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 2);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 5);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_result = function(args) {
};
kibitz.RecommenderService_initiateModel_result.prototype = {};
kibitz.RecommenderService_initiateModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kibitz.RecommenderService_initiateModel_result.prototype.write = function(output) {
  output.writeStructBegin('RecommenderService_initiateModel_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kibitz.RecommenderServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
kibitz.RecommenderServiceClient.prototype = {};
kibitz.RecommenderServiceClient.prototype.createNewIndividualServer = function(key) {
  this.send_createNewIndividualServer(key);
  this.recv_createNewIndividualServer();
};

kibitz.RecommenderServiceClient.prototype.send_createNewIndividualServer = function(key) {
  this.output.writeMessageBegin('createNewIndividualServer', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewIndividualServer_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_createNewIndividualServer = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewIndividualServer_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.terminateSession = function(key) {
  this.send_terminateSession(key);
  this.recv_terminateSession();
};

kibitz.RecommenderServiceClient.prototype.send_terminateSession = function(key) {
  this.output.writeMessageBegin('terminateSession', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_terminateSession_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_terminateSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_terminateSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.makeRecommendation = function(key, userId, numRecs) {
  this.send_makeRecommendation(key, userId, numRecs);
  return this.recv_makeRecommendation();
};

kibitz.RecommenderServiceClient.prototype.send_makeRecommendation = function(key, userId, numRecs) {
  this.output.writeMessageBegin('makeRecommendation', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_makeRecommendation_args();
  args.key = key;
  args.userId = userId;
  args.numRecs = numRecs;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_makeRecommendation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_makeRecommendation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makeRecommendation failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getItems = function(key) {
  this.send_getItems(key);
  return this.recv_getItems();
};

kibitz.RecommenderServiceClient.prototype.send_getItems = function(key) {
  this.output.writeMessageBegin('getItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getItems_args();
  args.key = key;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_getItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.recordRatings = function(key, userId, itemId, rating) {
  this.send_recordRatings(key, userId, itemId, rating);
  this.recv_recordRatings();
};

kibitz.RecommenderServiceClient.prototype.send_recordRatings = function(key, userId, itemId, rating) {
  this.output.writeMessageBegin('recordRatings', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_recordRatings_args();
  args.key = key;
  args.userId = userId;
  args.itemId = itemId;
  args.rating = rating;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_recordRatings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_recordRatings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.deleteRatings = function(key, userId, itemId) {
  this.send_deleteRatings(key, userId, itemId);
  this.recv_deleteRatings();
};

kibitz.RecommenderServiceClient.prototype.send_deleteRatings = function(key, userId, itemId) {
  this.output.writeMessageBegin('deleteRatings', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_deleteRatings_args();
  args.key = key;
  args.userId = userId;
  args.itemId = itemId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_deleteRatings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_deleteRatings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
kibitz.RecommenderServiceClient.prototype.createNewUser = function(key, username, email, password, iskibitzuser) {
  this.send_createNewUser(key, username, email, password, iskibitzuser);
  return this.recv_createNewUser();
};

kibitz.RecommenderServiceClient.prototype.send_createNewUser = function(key, username, email, password, iskibitzuser) {
  this.output.writeMessageBegin('createNewUser', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewUser_args();
  args.key = key;
  args.username = username;
  args.email = email;
  args.password = password;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_createNewUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createNewUser failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.checkUsername = function(key, username, iskibitzuser) {
  this.send_checkUsername(key, username, iskibitzuser);
  return this.recv_checkUsername();
};

kibitz.RecommenderServiceClient.prototype.send_checkUsername = function(key, username, iskibitzuser) {
  this.output.writeMessageBegin('checkUsername', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkUsername_args();
  args.key = key;
  args.username = username;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_checkUsername = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkUsername_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkUsername failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.checkLogin = function(key, username, password, iskibitzuser) {
  this.send_checkLogin(key, username, password, iskibitzuser);
  return this.recv_checkLogin();
};

kibitz.RecommenderServiceClient.prototype.send_checkLogin = function(key, username, password, iskibitzuser) {
  this.output.writeMessageBegin('checkLogin', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_checkLogin_args();
  args.key = key;
  args.username = username;
  args.password = password;
  args.iskibitzuser = iskibitzuser;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_checkLogin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_checkLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkLogin failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.retrieveUserId = function(key, username, password) {
  this.send_retrieveUserId(key, username, password);
  return this.recv_retrieveUserId();
};

kibitz.RecommenderServiceClient.prototype.send_retrieveUserId = function(key, username, password) {
  this.output.writeMessageBegin('retrieveUserId', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_retrieveUserId_args();
  args.key = key;
  args.username = username;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_retrieveUserId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_retrieveUserId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveUserId failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.createNewRecommender = function(username, password, database, table) {
  this.send_createNewRecommender(username, password, database, table);
  return this.recv_createNewRecommender();
};

kibitz.RecommenderServiceClient.prototype.send_createNewRecommender = function(username, password, database, table) {
  this.output.writeMessageBegin('createNewRecommender', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_createNewRecommender_args();
  args.username = username;
  args.password = password;
  args.database = database;
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_createNewRecommender = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_createNewRecommender_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createNewRecommender failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.getUserRatedItems = function(key, userId) {
  this.send_getUserRatedItems(key, userId);
  return this.recv_getUserRatedItems();
};

kibitz.RecommenderServiceClient.prototype.send_getUserRatedItems = function(key, userId) {
  this.output.writeMessageBegin('getUserRatedItems', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_getUserRatedItems_args();
  args.key = key;
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_getUserRatedItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_getUserRatedItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserRatedItems failed: unknown result';
};
kibitz.RecommenderServiceClient.prototype.initiateModel = function(key, table, username, password, database) {
  this.send_initiateModel(key, table, username, password, database);
  this.recv_initiateModel();
};

kibitz.RecommenderServiceClient.prototype.send_initiateModel = function(key, table, username, password, database) {
  this.output.writeMessageBegin('initiateModel', Thrift.MessageType.CALL, this.seqid);
  var args = new kibitz.RecommenderService_initiateModel_args();
  args.key = key;
  args.table = table;
  args.username = username;
  args.password = password;
  args.database = database;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

kibitz.RecommenderServiceClient.prototype.recv_initiateModel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kibitz.RecommenderService_initiateModel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
